<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MyTest</title>
    <url>/archives/2018/05/MyTest/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0afd48b5869d1b2f20c3ea2ee8c0d769c5dfb985602849a7a24804d7a02f4b0e">bd25ed9264b080267271e137e33d0ce10d0d63c746cf62e20f15a634036418035663a28cabb4d8b61b9b22b55a2353d15acb169f7fa04cc96688119bd92ec7b40b99daa3c42da4fecadae2f68aad2a034ef2e0af1015869ed0322b4c171df2c76f376a02d301920914a387ca6e0f471e</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">测试用，请输入密码：</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo部署至Vercel(Zeit)——解决国内速度和百度爬虫问题</title>
    <url>/archives/2021/02/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3Vercel-Zeit-%E2%80%94%E2%80%94%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E7%88%AC%E8%99%AB%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>近日由于更换电脑便把博客迁移到了新电脑，同时想将博客提交到百度进行收录。由于不可知的原因 2015 年 GitHub 禁止了百度的爬虫，搜了搜没找到什么好方案，发现大多都是 GitHub 和 Coding 双部署。新版Coding与腾讯云融合可以实现自动部署、自定义域名和 CDN 加速，但由于没有进行域名备案，Coding 会将资源部署在国外再由CDN加速回国，这样速度反而更慢了（域名备案除外）。同时，由于 Coding 部署利用了腾讯的 OSS 和 CDN 资源需要收费，而我作为新版 Coding 的新用户不能向老用户一样白嫖，这显然不符合我白嫖走天下的理念。经过一番寻找最终找到了部署至 Vercel 的方案。</p>
<h2 id="Coding部署"><a href="#Coding部署" class="headerlink" title="Coding部署"></a>Coding部署</h2><p>关于Coding部署可以参考这一篇：<a href="https://asurada.zone/post/CODING-Pages-Upgrade-To-TencentCloud/">CODING Pages 静态网站升级腾讯云新版踩坑小记</a></p>
<div class="note info"><h2 id="Vercel"><a href="#Vercel" class="headerlink" title="Vercel"></a>Vercel</h2><p>原名 Zeit，服务器在美国，在港台有 CDN 节点，提供自定义 xxx.now.sh 和 xxx.vercel.app 域名，且支持免费绑定个人域名，同时可以解决百度爬虫问题。最大的好处就是可以绑定 GitHub 账号，由 GitHub 托管Hexo博客源码，Vercel 导入博客源码，当检测到仓库改动后自动进行部署。</p>
</div>
<p>下面进行 Vercel 部署的介绍。</p>
<h2 id="仓库导入与部署"><a href="#仓库导入与部署" class="headerlink" title="仓库导入与部署"></a>仓库导入与部署</h2><div class="note warning"><p>在开始之前，请准备</p>
<ul>
<li>一个 GitHub 账号（注意不能绑有 QQ 邮箱）</li>
<li>一个存储 Hexo 生成文件的 Git 仓库(不能是私人库)</li>
</ul>
</div>

<p>进入 <a href="https://vercel.com/">Vercel</a> 官网，注册账号，点击 <code>Continue with GitHub</code>。</p>
<p><img src="/image/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3Vercel-Zeit/image-0.png"></p>
<p>过程中会弹出如下对话框,此图截取自参考链接 3 的博主文章，他给的建议是<code>All repo</code>,但我选择的<code>Only</code>,只不过再导入 GitHub 其他项目时需要重新走一遍流程，可自己根据情况选择。</p>
<p><img src="/image/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3Vercel-Zeit/image-4.png"></p>
<p>授权完成后，选择 <code>Import Git Repository</code> ，点击 <code>Continue</code>，进入如下界面。输入你的仓库 url（https）。</p>
<p><img src="/image/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3Vercel-Zeit/image-1.png"></p>
<p>填写仓库名，点击 <code>Continue</code>,创建Vercel仓库用于存储导入的文件。</p>
<p><img src="/image/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3Vercel-Zeit/image-2.png"></p>
<p>填写项目名称选择框架，默认即可，点击<code>Deploy</code>。</p>
<p><img src="/image/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3Vercel-Zeit/image-3.png"></p>
<p>等待 Vercel 部署完成，点击 <code>Visit</code>即可浏览。</p>
<p><img src="/image/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3Vercel-Zeit/image-5.png" alt=" ">   </p>
<p>在首页可以看到 Vercel 提供的两个域名，如果没有自定义域名需求的话到这里就可以结束了。</p>
<p><img src="/image/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3Vercel-Zeit/image-6.png" alt=" "></p>
<h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>进入项目设置，找到 <code>Domains</code>，在 <code>Add</code> 前面的输入框内输入要自定义的域名地址，再点击 <code>Add</code> 即可。</p>
<p><img src="/image/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3Vercel-Zeit/image-7.png" alt=" "></p>
<p>在下方会显示 <code>Invalid Configuration</code> 提示，并给出两种验证方式。</p>
<p><img src="/image/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3Vercel-Zeit/image-8.png"></p>
<p>此时，可以选择添加 DNS 解析记录</p>
<blockquote>
<p>添加 A 类型，主机记录 <code>@ </code>，记录值为 <code>76.76.21.21</code>。<br>添加 CNAME 类型，主机记录 <code>@ </code>，记录值为 <code>cname.vercel-dns.com</code>。</p>
</blockquote>
<p>添加完成后，稍等片刻便会在自定义域名下方显示通过的提示，有时解析正常 仍然显示 <code>Invalid Configuration</code>，只要可以通过自定义域名访问博客便可忽略。</p>
<p><img src="/image/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3Vercel-Zeit/image-9.png"></p>
<p>到这里，整个部署过程就结束了，通过此方式百度便可进行爬虫，接下来就该去到百度提交站点地图等待收录了。</p>
<hr>
<p>参考：<br>1、<a href="http://hongwan.xyz/netlify%E5%92%8Ccloudflare%E4%B8%8Ezeit%E6%90%AD%E9%85%8Djsdelivr%E7%BB%99Hexo%E5%8D%9A%E5%AE%A2cdn%E5%8A%A0%E9%80%9F%E5%AF%B9%E6%AF%94.html">netlify和cloudflare与zeit搭配jsdelivr给Hexo博客cdn加速对比</a><br>2、<a href="https://zpjiang.me/2020/01/15/let-baidu-index-github-page">解决百度爬虫无法爬取 Github Pages 个人博客的问题</a><br>3、<a href="https://snow.js.org/hexo-vercel/">Hexo：将你的博客部署到 Vercel</a>（主题不错）</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown使用记录</title>
    <url>/archives/2021/02/Markdown%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="1、代码增减标识"><a href="#1、代码增减标识" class="headerlink" title="1、代码增减标识"></a>1、代码增减标识</h2><p>代码块中有代码增减替换时，着色标识，格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;diff</span><br><span class="line">+ 增加</span><br><span class="line">- 删减</span><br><span class="line">&#96;&#96;&#39;</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+ 增加</span></span><br><span class="line"><span class="deletion">- 删减</span></span><br></pre></td></tr></table></figure>
<h2 id="2、引用居中显示（适用于Next主题）"><a href="#2、引用居中显示（适用于Next主题）" class="headerlink" title="2、引用居中显示（适用于Next主题）"></a>2、引用居中显示（适用于Next主题）</h2><p>格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125; </span><br><span class="line">引用内容</span><br><span class="line">&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<blockquote class="blockquote-center">
<p>故乡啊，挨着碰着，都是带刺的花。<br>——小林一茶</p>

</blockquote>

<h2 id="3、区块"><a href="#3、区块" class="headerlink" title="3、区块"></a>3、区块</h2><p>效果：</p>
<blockquote>
<p>区块引用<br>菜鸟教程<br>学的不仅是技术更是梦想</p>
</blockquote>
<p>参考：<a href="https://www.runoob.com/markdown/md-block.html">Markdown区块语法</a></p>
<hr>
<h2 id="4、字体大小、颜色、居中"><a href="#4、字体大小、颜色、居中" class="headerlink" title="4、字体大小、颜色、居中"></a>4、字体大小、颜色、居中</h2><p>格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;font face&#x3D;&quot;黑体&quot;&gt;我是黑体&lt;&#x2F;font&gt;</span><br><span class="line">&lt;font face&#x3D;&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;&#x2F;font&gt;</span><br><span class="line">&lt;font face&#x3D;&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;&#x2F;font&gt;</span><br><span class="line">&lt;center&gt;需要居中的字体&lt;&#x2F;center&gt;</span><br><span class="line">&lt;center&gt;&lt;font color&#x3D;red size&#x3D;7 face&#x3D;&quot;微软雅黑&quot;&gt;我是居中的7号红色微软雅黑&lt;&#x2F;font&gt;&lt;&#x2F;center&gt;</span><br></pre></td></tr></table></figure>
<p>Size：规定文本的尺寸大小。值：从 1 到 7 的数字。</p>
<p>效果：</p>
<ul>
<li><font face="黑体">我是黑体字</font></li>
<li><font face="微软雅黑">我是微软雅黑</font></li>
<li><font face="STCAIYUN">我是华文彩云</font></li>
<li><center><font color=red size=7 face="微软雅黑">我是居中的7号红色微软雅黑</font></center></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>AD快捷键</title>
    <url>/archives/2020/05/AD%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>走线状态，+tab，改变线宽；<br>2d线状态，+shift+tab ，切换倒角方式；<br>crtl+左键 ：高亮选中网络；</p>
<p>左下角双击，层管理，显示或隐藏某一层；</p>
<a id="more"></a>

<p>旋转：Space；</p>
<p>X轴镜像：X；<br>Y轴镜像：Y；<br>板层管理：L；<br>栅格设置：G；<br>单位进制切换：Q；</p>
<p>对齐-水平：A，D；<br>对齐-垂直：A，I，I，Enter；<br>对齐-顶部：A，T；<br>对齐-底部：A，B；<br>对齐-左侧：A，L；<br>对齐-右侧：A，R；</p>
<p>设计-类设置：D，C;<br>设计-板层管理：D，K；<br>设计-规则：D，R；<br>设计-规则向导：D，W；<br>设计-拷贝ROOM格式：D，M，C；<br>设计-放置ROOM：D，M，R；<br>设计-根据选择对象定义板子形状：D，S，D；<br>设计-编辑网络：D，N，N；</p>
<p>编辑-删除：E，D；<br>编辑-切断轨迹：E，K；<br>编辑-设定原点：E，O，S；<br>编辑-复位原点：E，O，R；</p>
<p>移动-移动：M，M；<br>移动-拖拽：M，D；<br>移动-器件：M，C；<br>移动-打断走线：M，B；<br>移动-器件翻转板层：M，I；</p>
<p>网络-显示网络：N，S，N；<br>网络-显示器件：N，S，O；<br>网络-显示全部：N，S，A；<br>网络-隐藏网络：N，H，N；<br>网络-隐藏器件：N，H，O；<br>网络-隐藏全部：N，H，A；</p>
<p>放置-坐标：P，O；<br>放置-焊盘：P，P；<br>放置-字符：P，S；<br>放置-过孔：P，V；  走线快速添加过孔：ctrl+shift+滚轮；<br>放置-多边形：P，R；<br>放置-填充：P，F；<br>放置-敷铜：P，G；<br>放置-线性尺寸：P，D，L；<br>放置-走线：P，T；<br>放置-差分对布线：P，I；<br>放置-多根布线：P，M，Enter；</p>
<p>选择-全选：S，A；<br>选择-线选：S，L；<br>选择-区域（内部）：S，I；</p>
<p>选择-区域（外部）：S，O；</p>
<p>选择网络：S,P;</p>
<p>工具-交叉探测对象：T，C；(+Ctrl:跳转到目标文件)            <br>工具-泪滴选项：T，E；<br>工具-设计规则检查：T，D；<br>工具-复位错误标志：T，M；<br>工具-从选择元素创建板剪切：T，V，B<br>工具-网络等长调节：T，R；</p>
<p>取消布线-全部：U，A；<br>取消布线-网络：U，N；<br>取消布线-连接：U，C；<br>取消布线-器件：U，O；<br>取消布线-ROOM：U，R；</p>
<p>查看-合适区域：V，A；<br>查看-翻转板子：V，B；<br>查看-适合文件：V，D；<br>查看-合适板子：V，F；<br>查看-合适图纸：V，H；</p>
<p>测距：Ctrl + M；</p>
<p>清除蒙板：  Shift + Ｃ；<br>查找相似对象： Shift + F;<br>显示走线长度：  Shift + G；<br>单层显示：  Shift + S；<br>改变走线模式：Shift + Space；</p>
<p>切换二维显示：2(主键盘)；<br>切换三维显示：3(主键盘)；<br>顶层底层切换：*(小键盘 )；<br>板层切换： +/-(小键盘)；<br>智能走线：在放置走线状态，+ Ctrl；</p>
<p>移动多边形顶点：右键，Y，V；<br>器件联合：右键，U；</p>
<p>增大弧度：长按 &gt;；<br>减小弧度：长按 &lt;；<br>减小多根交互式布线间距：长按Shift + B；<br>增加多根交互式布线间距：长按Shift + B；</p>
<p>3D模式下：<br>0°旋转：0（主键盘）；<br>90°旋转：9（主键盘）；</p>
<p>布等长线状态下：<br>增加蛇形线拐角弧度：1；<br>减少蛇形线拐角弧度：2；<br>增加蛇形线宽度：3；<br>减少蛇形线宽度：4；<br>增加蛇形线拐角振幅：。；<br>减少蛇形线拐角振幅：，；</p>
<p>从原理图选择PCB器件： T，S；</p>
<p>封装管理器：T，G；<br>强制标注所有器件：T，N；</p>
<p>查看-合适区域：V，A；<br>查看-适合文件：V，D；<br>查看-合适板子：V，F；</p>
<p>清除蒙板：  Shift + Ｃ；</p>
<p>改变走线模式：Shift + Space</p>
<p>Altium Designer14 SCH快捷键：</p>
<p>对齐-水平：A，D；<br>对齐-垂直：A，I；<br>对齐-顶部：A，T；<br>对齐-底部：A，B；<br>对齐-左侧：A，L；<br>对齐-右侧：A，R；</p>
<p>打破线：E，W；</p>
<p>放置总线：P，B；<br>放置总线入库：P，U；<br>放置节点：P，J；<br>放置网络标号：P，N；<br>放置端口：P，R；<br>放置字符串：P，T；<br>放置走线：P，W；<br>放置线：P，D，L；<br>放置差分对标示：P，V，F；<br>放置Blanket：P，V，L；<br>放置网络类：P，V，C；</p>
<p>————————————————<br>原文链接：<a href="https://blog.csdn.net/RootCode/java/article/details/81910519">https://blog.csdn.net/RootCode/java/article/details/81910519</a></p>
]]></content>
      <categories>
        <category>Altium Designer</category>
      </categories>
      <tags>
        <tag>Altium Designer</tag>
        <tag>PCB</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 数学公式语法(转载)</title>
    <url>/archives/2020/04/Markdown-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%AF%AD%E6%B3%95(%E8%BD%AC%E8%BD%BD)/</url>
    <content><![CDATA[<h4 id="上标、下标与组合"><a href="#上标、下标与组合" class="headerlink" title="上标、下标与组合"></a>上标、下标与组合</h4><ol>
<li>上标符号，符号：<code>^</code>，如：$x^4$</li>
<li>下标符号，符号：<code>_</code>，如：$x_1$</li>
<li>组合符号，符号：<code>&#123;&#125;</code>，如：${16}<em>{8}O{2+}</em>{2}$</li>
</ol>
<h4 id="汉字、字体与格式"><a href="#汉字、字体与格式" class="headerlink" title="汉字、字体与格式"></a>汉字、字体与格式</h4><ol>
<li>汉字形式，符号：<code>\mbox&#123;&#125;</code>，如：$V_{\mbox{初始}}$</li>
<li>字体控制，符号：<code>\displaystyle</code>，如：$\displaystyle \frac{x+y}{y+z}$</li>
<li>下划线符号，符号：<code>\underline</code>，如：$\underline{x+y}$</li>
<li>标签，符号<code>\tag&#123;数字&#125;</code>，如：$\tag{11}$</li>
<li>上大括号，符号：<code>\overbrace&#123;算式&#125;</code>，如：$\overbrace{a+b+c+d}^{2.0}$</li>
<li>下大括号，符号：<code>\underbrace&#123;算式&#125;</code>，如：$a+\underbrace{b+c}_{1.0}+d$</li>
<li>上位符号，符号：<code>\stacrel&#123;上位符号&#125;&#123;基位符号&#125;</code>，如：$\vec{x}\stackrel{\mathrm{def}}{=}{x_1,\dots,x_n}$</li>
</ol>
<h4 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h4><ol>
<li>两个quad空格，符号：<code>\qquad</code>，如：$x \qquad y$</li>
<li>quad空格，符号：<code>\quad</code>，如：$x \quad y$</li>
<li>大空格，符号<code>\</code>，如：$x \  y$</li>
<li>中空格，符号<code>\:</code>，如：$x : y$</li>
<li>小空格，符号<code>\,</code>，如：$x , y$</li>
<li>没有空格，符号<code> </code>，如：$xy$</li>
<li>紧贴，符号<code>\!</code>，如：$x ! y$</li>
</ol>
<h4 id="定界符与组合"><a href="#定界符与组合" class="headerlink" title="定界符与组合"></a>定界符与组合</h4><ol>
<li>括号，符号：<code>（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)</code>，如：$（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)$</li>
<li>中括号，符号：<code>[]</code>，如：$[x+y]$</li>
<li>大括号，符号：<code>\&#123; \&#125;</code>，如：${x+y}$</li>
<li>自适应括号，符号：<code>\left \right</code>，如：$\left(x\right)$，$\left(x{yz}\right)$</li>
<li>组合公式，符号：<code>&#123;上位公式 \choose 下位公式&#125;</code>，如：${n+1 \choose k}={n \choose k}+{n \choose k-1}$</li>
<li>组合公式，符号：<code>&#123;上位公式 \atop 下位公式&#125;</code>，如：$\sum_{k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots=n}A_{k_0}A_{k_1}\cdots$</li>
</ol>
<h4 id="行内与独行"><a href="#行内与独行" class="headerlink" title="行内与独行"></a>行内与独行</h4><ol>
<li>行内公式：将公式插入到本行内，符号：<code>$公式内容$</code>，如：$xyz$</li>
<li>独行公式：将公式插入到新的一行内，并且居中，符号：<code>$$公式内容$$</code>，如：$$xyz$$</li>
</ol>
<h4 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h4><ol>
<li>加法运算，符号：<code>+</code>，如：$x+y=z$</li>
<li>减法运算，符号：<code>-</code>，如：$x-y=z$</li>
<li>加减运算，符号：<code>\pm</code>，如：$x \pm y=z$</li>
<li>减加运算，符号：<code>\mp</code>，如：$x \mp y=z$</li>
<li>乘法运算，符号：<code>\times</code>，如：$x \times y=z$</li>
<li>点乘运算，符号：<code>\cdot</code>，如：$x \cdot y=z$</li>
<li>星乘运算，符号：<code>\ast</code>，如：$x \ast y=z$</li>
<li>除法运算，符号：<code>\div</code>，如：$x \div y=z$</li>
<li>斜法运算，符号：<code>/</code>，如：$x/y=z$</li>
<li>分式表示，符号：<code>\frac&#123;分子&#125;&#123;分母&#125;</code>，如：$\frac{x+y}{y+z}$</li>
<li>分式表示，符号：<code>&#123;分子&#125; \voer &#123;分母&#125;</code>，如：${x+y} \over {y+z}$</li>
<li>绝对值表示，符号：<code>||</code>，如：$|x+y|$</li>
</ol>
<h4 id="高级运算"><a href="#高级运算" class="headerlink" title="高级运算"></a>高级运算</h4><ol>
<li>平均数运算，符号：<code>\overline&#123;算式&#125;</code>，如：$\overline{xyz}$</li>
<li>开二次方运算，符号：<code>\sqrt</code>，如：$\sqrt x$</li>
<li>开方运算，符号：<code>\sqrt[开方数]&#123;被开方数&#125;</code>，如：$\sqrt[3]{x+y}$</li>
<li>对数运算，符号：<code>\log</code>，如：$\log(x)$</li>
<li>极限运算，符号：<code>\lim</code>，如：$\lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li>
<li>极限运算，符号：<code>\displaystyle \lim</code>，如：$\displaystyle \lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li>
<li>求和运算，符号：<code>\sum</code>，如：$\sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li>
<li>求和运算，符号：<code>\displaystyle \sum</code>，如：$\displaystyle \sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li>
<li>积分运算，符号：<code>\int</code>，如：$\int^{\infty}_{0}{xdx}$</li>
<li>积分运算，符号：<code>\displaystyle \int</code>，如：$\displaystyle \int^{\infty}_{0}{xdx}$</li>
<li>微分运算，符号：<code>\partial</code>，如：$\frac{\partial x}{\partial y}$</li>
<li>矩阵表示，符号：<code>\begin&#123;matrix&#125; \end&#123;matrix&#125;</code>，如：$\left[ \begin{matrix} 1 &amp;2 &amp;\cdots &amp;4\5 &amp;6 &amp;\cdots &amp;8\vdots &amp;\vdots &amp;\ddots &amp;\vdots\13 &amp;14 &amp;\cdots &amp;16\end{matrix} \right]$</li>
</ol>
<h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><ol>
<li>等于运算，符号：<code>=</code>，如：$x+y=z$</li>
<li>大于运算，符号：<code>&gt;</code>，如：$x+y&gt;z$</li>
<li>小于运算，符号：<code>&lt;</code>，如：$x+y&lt;z$</li>
<li>大于等于运算，符号：<code>\geq</code>，如：$x+y \geq z$</li>
<li>小于等于运算，符号：<code>\leq</code>，如：$x+y \leq z$</li>
<li>不等于运算，符号：<code>\neq</code>，如：$x+y \neq z$</li>
<li>不大于等于运算，符号：<code>\ngeq</code>，如：$x+y \ngeq z$</li>
<li>不大于等于运算，符号：<code>\not\geq</code>，如：$x+y \not\geq z$</li>
<li>不小于等于运算，符号：<code>\nleq</code>，如：$x+y \nleq z$</li>
<li>不小于等于运算，符号：<code>\not\leq</code>，如：$x+y \not\leq z$</li>
<li>约等于运算，符号：<code>\approx</code>，如：$x+y \approx z$</li>
<li>恒定等于运算，符号：<code>\equiv</code>，如：$x+y \equiv z$</li>
</ol>
<h4 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h4><ol>
<li>属于运算，符号：<code>\in</code>，如：$x \in y$</li>
<li>不属于运算，符号：<code>\notin</code>，如：$x \notin y$</li>
<li>不属于运算，符号：<code>\not\in</code>，如：$x \not\in y$</li>
<li>子集运算，符号：<code>\subset</code>，如：$x \subset y$</li>
<li>子集运算，符号：<code>\supset</code>，如：$x \supset y$</li>
<li>真子集运算，符号：<code>\subseteq</code>，如：$x \subseteq y$</li>
<li>非真子集运算，符号：<code>\subsetneq</code>，如：$x \subsetneq y$</li>
<li>真子集运算，符号：<code>\supseteq</code>，如：$x \supseteq y$</li>
<li>非真子集运算，符号：<code>\supsetneq</code>，如：$x \supsetneq y$</li>
<li>非子集运算，符号：<code>\not\subset</code>，如：$x \not\subset y$</li>
<li>非子集运算，符号：<code>\not\supset</code>，如：$x \not\supset y$</li>
<li>并集运算，符号：<code>\cup</code>，如：$x \cup y$</li>
<li>交集运算，符号：<code>\cap</code>，如：$x \cap y$</li>
<li>差集运算，符号：<code>\setminus</code>，如：$x \setminus y$</li>
<li>同或运算，符号：<code>\bigodot</code>，如：$x \bigodot y$</li>
<li>同与运算，符号：<code>\bigotimes</code>，如：$x \bigotimes y$</li>
<li>实数集合，符号：<code>\mathbb&#123;R&#125;</code>，如：<code>\mathbb&#123;R&#125;</code></li>
<li>自然数集合，符号：<code>\mathbb&#123;Z&#125;</code>，如：<code>\mathbb&#123;Z&#125;</code></li>
<li>空集，符号：<code>\emptyset</code>，如：$\emptyset$</li>
</ol>
<h4 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h4><ol>
<li>无穷，符号：<code>\infty</code>，如：$\infty$</li>
<li>虚数，符号：<code>\imath</code>，如：$\imath$</li>
<li>虚数，符号：<code>\jmath</code>，如：$\jmath$</li>
<li>数学符号，符号<code>\hat&#123;a&#125;</code>，如：$\hat{a}$</li>
<li>数学符号，符号<code>\check&#123;a&#125;</code>，如：$\check{a}$</li>
<li>数学符号，符号<code>\breve&#123;a&#125;</code>，如：$\breve{a}$</li>
<li>数学符号，符号<code>\tilde&#123;a&#125;</code>，如：$\tilde{a}$</li>
<li>数学符号，符号<code>\bar&#123;a&#125;</code>，如：$\bar{a}$</li>
<li>矢量符号，符号<code>\vec&#123;a&#125;</code>，如：$\vec{a}$</li>
<li>数学符号，符号<code>\acute&#123;a&#125;</code>，如：$\acute{a}$</li>
<li>数学符号，符号<code>\grave&#123;a&#125;</code>，如：$\grave{a}$</li>
<li>数学符号，符号<code>\mathring&#123;a&#125;</code>，如：$\mathring{a}$</li>
<li>一阶导数符号，符号<code>\dot&#123;a&#125;</code>，如：$\dot{a}$</li>
<li>二阶导数符号，符号<code>\ddot&#123;a&#125;</code>，如：$\ddot{a}$</li>
<li>上箭头，符号：<code>\uparrow</code>，如：$\uparrow$</li>
<li>上箭头，符号：<code>\Uparrow</code>，如：$\Uparrow$</li>
<li>下箭头，符号：<code>\downarrow</code>，如：$\downarrow$</li>
<li>下箭头，符号：<code>\Downarrow</code>，如：$\Downarrow$</li>
<li>左箭头，符号：<code>\leftarrow</code>，如：$\leftarrow$</li>
<li>左箭头，符号：<code>\Leftarrow</code>，如：$\Leftarrow$</li>
<li>右箭头，符号：<code>\rightarrow</code>，如：$\rightarrow$</li>
<li>右箭头，符号：<code>\Rightarrow</code>，如：$\Rightarrow$</li>
<li>底端对齐的省略号，符号：<code>\ldots</code>，如：$1,2,\ldots,n$</li>
<li>中线对齐的省略号，符号：<code>\cdots</code>，如：$x_1^2 + x_2^2 + \cdots + x_n^2$</li>
<li>竖直对齐的省略号，符号：<code>\vdots</code>，如：$\vdots$</li>
<li>斜对齐的省略号，符号：<code>\ddots</code>，如：$\ddots$</li>
</ol>
<h4 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h4><table>
<thead>
<tr>
<th>字母</th>
<th>实现</th>
<th>字母</th>
<th>实现</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td><code>A</code></td>
<td>α</td>
<td><code>\alhpa</code></td>
</tr>
<tr>
<td>B</td>
<td><code>B</code></td>
<td>β</td>
<td><code>\beta</code></td>
</tr>
<tr>
<td>Γ</td>
<td><code>\Gamma</code></td>
<td>γ</td>
<td><code>\gamma</code></td>
</tr>
<tr>
<td>Δ</td>
<td><code>\Delta</code></td>
<td>δ</td>
<td><code>\delta</code></td>
</tr>
<tr>
<td>E</td>
<td><code>E</code></td>
<td>ϵ</td>
<td><code>\epsilon</code></td>
</tr>
<tr>
<td>Z</td>
<td><code>Z</code></td>
<td>ζ</td>
<td><code>\zeta</code></td>
</tr>
<tr>
<td>H</td>
<td><code>H</code></td>
<td>η</td>
<td><code>\eta</code></td>
</tr>
<tr>
<td>Θ</td>
<td><code>\Theta</code></td>
<td>θ</td>
<td><code>\theta</code></td>
</tr>
<tr>
<td>I</td>
<td><code>I</code></td>
<td>ι</td>
<td><code>\iota</code></td>
</tr>
<tr>
<td>K</td>
<td><code>K</code></td>
<td>κ</td>
<td><code>\kappa</code></td>
</tr>
<tr>
<td>Λ</td>
<td><code>\Lambda</code></td>
<td>λ</td>
<td><code>\lambda</code></td>
</tr>
<tr>
<td>M</td>
<td><code>M</code></td>
<td>μ</td>
<td><code>\mu</code></td>
</tr>
<tr>
<td>N</td>
<td><code>N</code></td>
<td>ν</td>
<td><code>\nu</code></td>
</tr>
<tr>
<td>Ξ</td>
<td><code>\Xi</code></td>
<td>ξ</td>
<td><code>\xi</code></td>
</tr>
<tr>
<td>O</td>
<td><code>O</code></td>
<td>ο</td>
<td><code>\omicron</code></td>
</tr>
<tr>
<td>Π</td>
<td><code>\Pi</code></td>
<td>π</td>
<td><code>\pi</code></td>
</tr>
<tr>
<td>P</td>
<td><code>P</code></td>
<td>ρ</td>
<td><code>\rho</code></td>
</tr>
<tr>
<td>Σ</td>
<td><code>\Sigma</code></td>
<td>σ</td>
<td><code>\sigma</code></td>
</tr>
<tr>
<td>T</td>
<td><code>T</code></td>
<td>τ</td>
<td><code>\tau</code></td>
</tr>
<tr>
<td>Υ</td>
<td><code>\Upsilon</code></td>
<td>υ</td>
<td><code>\upsilon</code></td>
</tr>
<tr>
<td>Φ</td>
<td><code>\Phi</code></td>
<td>ϕ</td>
<td><code>\phi</code></td>
</tr>
<tr>
<td>X</td>
<td><code>X</code></td>
<td>χ</td>
<td><code>\chi</code></td>
</tr>
<tr>
<td>Ψ</td>
<td><code>\Psi</code></td>
<td>ψ</td>
<td><code>\psi</code></td>
</tr>
<tr>
<td>Ω</td>
<td><code>\v</code></td>
<td>ω</td>
<td><code>\omega</code></td>
</tr>
</tbody></table>
<p>原文链接：<a href="https://www.jianshu.com/p/e74eb43960a1">https://www.jianshu.com/p/e74eb43960a1</a></p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin + Python编译环境搭建</title>
    <url>/archives/2020/04/Deepin-Python%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h5 id="一、Linux使用"><a href="#一、Linux使用" class="headerlink" title="一、Linux使用"></a>一、Linux使用</h5><p>1、安装软件：sudo apt-get install 软件名  <br>2、卸载软件：sudo apt autoremove 软件名        同时删除无用依赖<br>3、启动器重启：sudo service lightdm restart<br>4、dpkg：<br> &emsp;&emsp;&emsp;&emsp;-i：安装软件包；  <br> &emsp;&emsp;&emsp;&emsp;-r：删除软件包；<br> &emsp;&emsp;&emsp;&emsp;-P：删除软件包的同时删除其配置文件；<br> &emsp;&emsp;&emsp;&emsp;-L：显示于软件包关联的文件；<br> &emsp;&emsp;&emsp;&emsp;-l：显示已安装软件包列表；<br> &emsp;&emsp;&emsp;&emsp;–unpack：解开软件包；<br> &emsp;&emsp;&emsp;&emsp;-c：显示软件包内文件列表；<br> &emsp;&emsp;&emsp;&emsp;–confiugre：配置软件包。<br>5、sudo apt-get update &amp;&amp; sudo apt-get dist-upgrade -y<br>6、<a href="https://www.cnblogs.com/xuxinstyle/p/9609551.html">linux常用命令（50个）</a><br>7、<a href="https://qv2ray.github.io/">VPN工具：Qv2ray</a></p>
<h5 id="二、Python开发环境搭建"><a href="#二、Python开发环境搭建" class="headerlink" title="二、Python开发环境搭建"></a>二、Python开发环境搭建</h5><p>1、<a href="https://jingyan.baidu.com/article/ff42efa97dc89c809f22023f.html">Deepin V20 升级python版本</a><br>2、<a href="https://blog.csdn.net/zhangziju/article/details/80398908">Deepin之anaconda和pycharm的安装</a><br>3、<a href="https://blog.csdn.net/wanttifa/article/details/83995460">Deepin(linux)下安装anaconda3</a><br>4、<a href="https://blog.csdn.net/Just_youHG/article/details/104686642">解决激活anaconda Linux终端出现”(base)”问题</a></p>
]]></content>
      <categories>
        <category>Deepin</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Python</tag>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划—背包问题（Python）</title>
    <url>/archives/2020/03/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%88Python%EF%BC%89/</url>
    <content><![CDATA[<h4 id="一、什么是动态规划（Dynamic-Programming，DP）"><a href="#一、什么是动态规划（Dynamic-Programming，DP）" class="headerlink" title="一、什么是动态规划（Dynamic Programming，DP）"></a>一、什么是动态规划（Dynamic Programming，DP）</h4><ul>
<li>1.动态规划是通过组合子问题的解来解决原问题</li>
<li>2.动态规划应用于子问题重叠的情况，即不同的子问题具有公共的子子问题</li>
<li>3.动态规划算法对每个子子问题只求解一次</li>
<li>4.动态规划通常用来求解最优化问题<br>注：每个子问题必须是离散的，没有依赖关系，比如要解决<code>子问题1</code> 必须通过解决<code>子问题2</code> 才可以解决。</li>
</ul>
<h4 id="二、背包问题"><a href="#二、背包问题" class="headerlink" title="二、背包问题"></a>二、背包问题</h4><p>&emsp;&emsp;问题描述：将四个不同重量不同价值的物品放入一个背包，使得背包中的物品价值总和最大。例如，</p>
<table>
<thead>
<tr>
<th align="center">物品</th>
<th align="center">重量</th>
<th align="center">价值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">音响</td>
<td align="center">4</td>
<td align="center">3000</td>
</tr>
<tr>
<td align="center">电脑</td>
<td align="center">3</td>
<td align="center">2000</td>
</tr>
<tr>
<td align="center">吉他</td>
<td align="center">1</td>
<td align="center">1500</td>
</tr>
<tr>
<td align="center">手机</td>
<td align="center">1</td>
<td align="center">2000</td>
</tr>
<tr>
<td align="center">将以上物品怎样放入一个载重为4的背包可以获得最大价值，求最优解。</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h4 id="三、DP算法思路"><a href="#三、DP算法思路" class="headerlink" title="三、DP算法思路"></a>三、DP算法思路</h4><h5 id="1、传统思路"><a href="#1、传统思路" class="headerlink" title="1、传统思路"></a>1、传统思路</h5><p>&emsp;&emsp;传统思路是将不同物品进行排列组合放入背包，通过比较全部的组合形式以获得最优解，而这种算法是时间复杂度是指数级别，后果就是当子问题越多时计算量将会急剧增长。</p>
<h5 id="2、DP算法思路"><a href="#2、DP算法思路" class="headerlink" title="2、DP算法思路"></a>2、DP算法思路</h5><p>&emsp;&emsp;DP算法是将主问题分解成若干小问题，自下而上求解子问题。<br>在这里通过将背包容量分割以及不同物品组成网格，每一行物品将对应的网格填充并比较上一行的价值大小。如下：<br><img src="/image/2020-3-27/image-0.png"><br>具体思路看参考链接。</p>
<h4 id="四、代码例程"><a href="#四、代码例程" class="headerlink" title="四、代码例程"></a>四、代码例程</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里使用了图解中的吉他，音箱，电脑，手机做的测试，数据保持一致</span></span><br><span class="line">w = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>]   <span class="comment">#n个物体的重量(w[0]无用)</span></span><br><span class="line">p = [<span class="number">0</span>, <span class="number">1500</span>, <span class="number">3000</span>, <span class="number">2000</span>, <span class="number">2000</span>]   <span class="comment">#n个物体的价值(p[0]无用)</span></span><br><span class="line">n = <span class="built_in">len</span>(w) - <span class="number">1</span>   <span class="comment">#计算n的个数</span></span><br><span class="line">m = <span class="number">4</span>   <span class="comment">#背包的载重量</span></span><br><span class="line"></span><br><span class="line">x = []   <span class="comment">#装入背包的物体，元素为True时，对应物体被装入(x[0]无用)</span></span><br><span class="line">v = <span class="number">0</span></span><br><span class="line"><span class="comment">#optp[i][j]表示在前i个物体中，能够装入载重量为j的背包中的物体的最大价值</span></span><br><span class="line">optp = [[<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)] <span class="keyword">for</span> raw <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line"><span class="comment">#optp 相当于做了一个n*m的全零矩阵的赶脚，n行为物件，m列为自背包载重量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">knapsack_dynamic</span>(<span class="params">w, p, n, m, x</span>):</span></span><br><span class="line">    <span class="comment">#计算optp[i][j]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):       <span class="comment"># 物品一件件来</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):   <span class="comment"># j为子背包的载重量，寻找能够承载物品的子背包</span></span><br><span class="line">            <span class="keyword">if</span> (j &gt;= w[i]):         <span class="comment"># 当物品的重量小于背包能够承受的载重量的时候，才考虑能不能放进去</span></span><br><span class="line">                optp[i][j] = <span class="built_in">max</span>(optp[i - <span class="number">1</span>][j], optp[i - <span class="number">1</span>][j - w[i]] + p[i])    <span class="comment"># optp[i - 1][j]是上一个单元的值， optp[i - 1][j - w[i]]为剩余空间的价值</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                optp[i][j] = optp[i - <span class="number">1</span>][j]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#递推装入背包的物体,寻找跳变的地方，从最后结果开始逆推</span></span><br><span class="line">    j = m</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> optp[i][j] &gt; optp[i - <span class="number">1</span>][j]:</span><br><span class="line">            x.append(i)</span><br><span class="line">            j = j - w[i]  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#返回最大价值，即表格中最后一行最后一列的值</span></span><br><span class="line">    v = optp[n][m]</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;最大值为：&#x27;</span> + <span class="built_in">str</span>(knapsack_dynamic(w, p, n, m, x))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;物品的索引：&#x27;</span>,x</span><br><span class="line"></span><br><span class="line"><span class="comment">#最大值为：4000</span></span><br><span class="line"><span class="comment">#物品的索引： [4, 3]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://blog.csdn.net/MrLevo520/article/details/75676160">动态规划(DP)的整理-Python描述</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Dynamic Programming</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>Next主题美化</title>
    <url>/archives/2020/03/Hexo%E5%8D%9A%E5%AE%A2/Next%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<p>Next主题设置及美化，打造自己的个性化主题。</p>
<p><img src="/image/2020-3-21/image-1.png"></p>
<h2 id="1、代码块折叠"><a href="#1、代码块折叠" class="headerlink" title="1、代码块折叠"></a>1、代码块折叠</h2><p>当文章中添加代码过长时，会对文章的阅读和显示造成不好的体验，折叠代码块是一种很好的解决方式<br>书写格式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">summary</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">	详细内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>原理：采用 HTML5 中的新标签，因此这不能算是对 Next 主题的美化。<br><code>summary</code> 标签作为 <code>details</code> 元素的标题，<code>details</code> 元素用于描述有关文档或文档片段的详细信息。<br>与 <code>details</code> 一起使用,标题是可见的，当用户点击标题时会显示出详细信息。</p>
<p>缺点：兼容性不好，只有 Chrome 以及 Safari 6 支持 <code>summary</code> 标签。</p>
<p>效果如下：</p>
<details>
  <summary>点击显/隐代码</summary>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;site-author site-overview-item animated&quot; itemprop=&quot;author&quot; itemscope itemtype=&quot;http://schema.org/Person&quot;&gt;</span><br><span class="line">  &#123;%- if theme.avatar.url %&#125;</span><br><span class="line"><span class="addition">+    &lt;a href=&quot;/&quot;&gt;</span></span><br><span class="line">      &lt;img class=&quot;site-author-image&quot; itemprop=&quot;image&quot; alt=&quot;&#123;&#123; author &#125;&#125;&quot;</span><br><span class="line">        src=&quot;&#123;&#123; url_for(theme.avatar.url or theme.images + &#x27;/avatar.gif&#x27;) &#125;&#125;&quot;&gt;</span><br><span class="line"><span class="addition">+    &lt;/a&gt;</span></span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line">  &lt;p class=&quot;site-author-name&quot; itemprop=&quot;name&quot;&gt;&#123;&#123; author &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;div class=&quot;site-description&quot; itemprop=&quot;description&quot;&gt;&#123;&#123; description &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="2、文章永久链接"><a href="#2、文章永久链接" class="headerlink" title="2、文章永久链接"></a>2、文章永久链接</h2><p>Hexo 默认生成的文章地址路径是 【网站名称／年／月／日／文章名称】。</p>
<p>这种链接对搜索爬虫很不友好，它的 url 结构超过三层，太深。<br>安装 hexo-abbrlink</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
<p> 然后配置站点配置文件 <code>_config.yml</code> ：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://blog.juanertu.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:categories/:abbrlink.html</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#添加</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span> <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span> <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure>
<h2 id="3、鼠标点击特效"><a href="#3、鼠标点击特效" class="headerlink" title="3、鼠标点击特效"></a>3、鼠标点击特效</h2><p>新建特效脚本文件，将其放在站点的 source 目录下（即 <code>hexo/source/js/cursor</code>）而不是主题目录下，如果没有 js 目录，则新建一个。</p>
<ul>
<li><p>礼花特效（fireworks.js）</p>
<details>
<summary>点击显/隐代码</summary>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">&#123; origin, speed, color, angle, context &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.origin = origin</span><br><span class="line">    <span class="built_in">this</span>.position = &#123; ...this.origin &#125;</span><br><span class="line">    <span class="built_in">this</span>.color = color</span><br><span class="line">    <span class="built_in">this</span>.speed = speed</span><br><span class="line">    <span class="built_in">this</span>.angle = angle</span><br><span class="line">    <span class="built_in">this</span>.context = context</span><br><span class="line">    <span class="built_in">this</span>.renderCount = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">draw</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.context.fillStyle = <span class="built_in">this</span>.color</span><br><span class="line">    <span class="built_in">this</span>.context.beginPath()</span><br><span class="line">    <span class="built_in">this</span>.context.arc(<span class="built_in">this</span>.position.x, <span class="built_in">this</span>.position.y, <span class="number">2</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">this</span>.context.fill()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">move</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.position.x = (<span class="built_in">Math</span>.sin(<span class="built_in">this</span>.angle) * <span class="built_in">this</span>.speed) + <span class="built_in">this</span>.position.x</span><br><span class="line">    <span class="built_in">this</span>.position.y = (<span class="built_in">Math</span>.cos(<span class="built_in">this</span>.angle) * <span class="built_in">this</span>.speed) + <span class="built_in">this</span>.position.y + (<span class="built_in">this</span>.renderCount * <span class="number">0.3</span>)</span><br><span class="line">    <span class="built_in">this</span>.renderCount++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boom</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">&#123; origin, context, circleCount = <span class="number">16</span>, area &#125;</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.origin = origin</span><br><span class="line">    <span class="built_in">this</span>.context = context</span><br><span class="line">    <span class="built_in">this</span>.circleCount = circleCount</span><br><span class="line">    <span class="built_in">this</span>.area = area</span><br><span class="line">    <span class="built_in">this</span>.stop = <span class="literal">false</span></span><br><span class="line">    <span class="built_in">this</span>.circles = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">randomArray</span>(<span class="params">range</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> length = range.length</span><br><span class="line">    <span class="keyword">const</span> randomIndex = <span class="built_in">Math</span>.floor(length * <span class="built_in">Math</span>.random())</span><br><span class="line">    <span class="keyword">return</span> range[randomIndex]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">randomColor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> range = [<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span> + <span class="built_in">this</span>.randomArray(range) + <span class="built_in">this</span>.randomArray(range) + <span class="built_in">this</span>.randomArray(range) + <span class="built_in">this</span>.randomArray(range) + <span class="built_in">this</span>.randomArray(range) + <span class="built_in">this</span>.randomArray(range)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">randomRange</span>(<span class="params">start, end</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (end - start) * <span class="built_in">Math</span>.random() + start</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.circleCount; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> circle = <span class="keyword">new</span> Circle(&#123;</span><br><span class="line">        context: <span class="built_in">this</span>.context,</span><br><span class="line">        origin: <span class="built_in">this</span>.origin,</span><br><span class="line">        color: <span class="built_in">this</span>.randomColor(),</span><br><span class="line">        angle: <span class="built_in">this</span>.randomRange(<span class="built_in">Math</span>.PI - <span class="number">1</span>, <span class="built_in">Math</span>.PI + <span class="number">1</span>),</span><br><span class="line">        speed: <span class="built_in">this</span>.randomRange(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">this</span>.circles.push(circle)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">move</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.circles.forEach(<span class="function">(<span class="params">circle, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (circle.position.x &gt; <span class="built_in">this</span>.area.width || circle.position.y &gt; <span class="built_in">this</span>.area.height) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.circles.splice(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      circle.move()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.circles.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.stop = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">draw</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.circles.forEach(<span class="function"><span class="params">circle</span> =&gt;</span> circle.draw())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CursorSpecialEffects</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.computerCanvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line">    <span class="built_in">this</span>.renderCanvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.computerContext = <span class="built_in">this</span>.computerCanvas.getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">    <span class="built_in">this</span>.renderContext = <span class="built_in">this</span>.renderCanvas.getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.globalWidth = <span class="built_in">window</span>.innerWidth</span><br><span class="line">    <span class="built_in">this</span>.globalHeight = <span class="built_in">window</span>.innerHeight</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.booms = []</span><br><span class="line">    <span class="built_in">this</span>.running = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">handleMouseDown</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> boom = <span class="keyword">new</span> Boom(&#123;</span><br><span class="line">      origin: &#123; <span class="attr">x</span>: e.clientX, <span class="attr">y</span>: e.clientY &#125;,</span><br><span class="line">      context: <span class="built_in">this</span>.computerContext,</span><br><span class="line">      area: &#123;</span><br><span class="line">        width: <span class="built_in">this</span>.globalWidth,</span><br><span class="line">        height: <span class="built_in">this</span>.globalHeight</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    boom.init()</span><br><span class="line">    <span class="built_in">this</span>.booms.push(boom)</span><br><span class="line">    <span class="built_in">this</span>.running || <span class="built_in">this</span>.run()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">handlePageHide</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.booms = []</span><br><span class="line">    <span class="built_in">this</span>.running = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> style = <span class="built_in">this</span>.renderCanvas.style</span><br><span class="line">    style.position = <span class="string">&#x27;fixed&#x27;</span></span><br><span class="line">    style.top = style.left = <span class="number">0</span></span><br><span class="line">    style.zIndex = <span class="string">&#x27;999999999999999999999999999999999999999999&#x27;</span></span><br><span class="line">    style.pointerEvents = <span class="string">&#x27;none&#x27;</span></span><br><span class="line"></span><br><span class="line">    style.width = <span class="built_in">this</span>.renderCanvas.width = <span class="built_in">this</span>.computerCanvas.width = <span class="built_in">this</span>.globalWidth</span><br><span class="line">    style.height = <span class="built_in">this</span>.renderCanvas.height = <span class="built_in">this</span>.computerCanvas.height = <span class="built_in">this</span>.globalHeight</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.body.append(<span class="built_in">this</span>.renderCanvas)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, <span class="built_in">this</span>.handleMouseDown.bind(<span class="built_in">this</span>))</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;pagehide&#x27;</span>, <span class="built_in">this</span>.handlePageHide.bind(<span class="built_in">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.running = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.booms.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.running = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    requestAnimationFrame(<span class="built_in">this</span>.run.bind(<span class="built_in">this</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.computerContext.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.globalWidth, <span class="built_in">this</span>.globalHeight)</span><br><span class="line">    <span class="built_in">this</span>.renderContext.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.globalWidth, <span class="built_in">this</span>.globalHeight)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.booms.forEach(<span class="function">(<span class="params">boom, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (boom.stop) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.booms.splice(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      boom.move()</span><br><span class="line">      boom.draw()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.renderContext.drawImage(<span class="built_in">this</span>.computerCanvas, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.globalWidth, <span class="built_in">this</span>.globalHeight)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cursorSpecialEffects = <span class="keyword">new</span> CursorSpecialEffects()</span><br><span class="line">cursorSpecialEffects.init()</span><br></pre></td></tr></table></figure>
</details>
</li>
<li><p>爆炸特效（explosion.js）</p>
<details>
<summary>点击显/隐代码</summary>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[-<span class="number">1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length-<span class="number">1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">&quot;#F00&quot;</span>,a.radius=<span class="number">.1</span>,a.alpha=<span class="number">.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)e.animatables[t].target.draw()&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)n.push(createParticule(e,t));anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">&quot;linear&quot;</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="built_in">this</span>,i=<span class="built_in">arguments</span>;<span class="built_in">clearTimeout</span>(a),a=<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">&quot;.fireworks&quot;</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">&quot;2d&quot;</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">&quot;mousedown&quot;</span>,colors=[<span class="string">&quot;#FF1461&quot;</span>,<span class="string">&quot;#18FF92&quot;</span>,<span class="string">&quot;#5A87FF&quot;</span>,<span class="string">&quot;#FBF38C&quot;</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">&quot;px&quot;</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">&quot;px&quot;</span>,canvasEl.getContext(<span class="string">&quot;2d&quot;</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">&quot;sidebar&quot;</span>!==e.target.id&amp;&amp;<span class="string">&quot;toggle-sidebar&quot;</span>!==e.target.id&amp;&amp;<span class="string">&quot;A&quot;</span>!==e.target.nodeName&amp;&amp;<span class="string">&quot;IMG&quot;</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>,setCanvasSize,!<span class="number">1</span>)&#125;</span><br></pre></td></tr></table></figure>
</details>
</li>
<li><p>爱心（love.js）</p>
<details>
<summary>点击显/隐代码</summary>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!(<span class="function"><span class="keyword">function</span> (<span class="params">e, t, a</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    c(</span><br><span class="line">      <span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span></span><br><span class="line">    ),</span><br><span class="line">      o(),</span><br><span class="line">      r()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; d.length; e++)</span><br><span class="line">      d[e].alpha &lt;= <span class="number">0</span></span><br><span class="line">        ? (t.body.removeChild(d[e].el), d.splice(e, <span class="number">1</span>))</span><br><span class="line">        : (d[e].y--,</span><br><span class="line">          (d[e].scale += <span class="number">0.004</span>),</span><br><span class="line">          (d[e].alpha -= <span class="number">0.013</span>),</span><br><span class="line">          (d[e].el.style.cssText =</span><br><span class="line">            <span class="string">&#x27;left:&#x27;</span> +</span><br><span class="line">            d[e].x +</span><br><span class="line">            <span class="string">&#x27;px;top:&#x27;</span> +</span><br><span class="line">            d[e].y +</span><br><span class="line">            <span class="string">&#x27;px;opacity:&#x27;</span> +</span><br><span class="line">            d[e].alpha +</span><br><span class="line">            <span class="string">&#x27;;transform:scale(&#x27;</span> +</span><br><span class="line">            d[e].scale +</span><br><span class="line">            <span class="string">&#x27;,&#x27;</span> +</span><br><span class="line">            d[e].scale +</span><br><span class="line">            <span class="string">&#x27;) rotate(45deg);background:&#x27;</span> +</span><br><span class="line">            d[e].color +</span><br><span class="line">            <span class="string">&#x27;;z-index:99999&#x27;</span>))</span><br><span class="line">    requestAnimationFrame(r)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="string">&#x27;function&#x27;</span> == <span class="keyword">typeof</span> e.onclick &amp;&amp; e.onclick</span><br><span class="line">    e.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      t &amp;&amp; t(), i(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = t.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    ;(a.className = <span class="string">&#x27;heart&#x27;</span>),</span><br><span class="line">      d.push(&#123;</span><br><span class="line">        el: a,</span><br><span class="line">        x: e.clientX - <span class="number">5</span>,</span><br><span class="line">        y: e.clientY - <span class="number">5</span>,</span><br><span class="line">        scale: <span class="number">1</span>,</span><br><span class="line">        alpha: <span class="number">1</span>,</span><br><span class="line">        color: s(),</span><br><span class="line">      &#125;),</span><br><span class="line">      t.body.appendChild(a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = t.createElement(<span class="string">&#x27;style&#x27;</span>)</span><br><span class="line">    a.type = <span class="string">&#x27;text/css&#x27;</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      a.appendChild(t.createTextNode(e))</span><br><span class="line">    &#125; <span class="keyword">catch</span> (t) &#123;</span><br><span class="line">      a.styleSheet.cssText = e</span><br><span class="line">    &#125;</span><br><span class="line">    t.getElementsByTagName(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>].appendChild(a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="string">&#x27;rgb(&#x27;</span> +</span><br><span class="line">      ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) +</span><br><span class="line">      <span class="string">&#x27;,&#x27;</span> +</span><br><span class="line">      ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) +</span><br><span class="line">      <span class="string">&#x27;,&#x27;</span> +</span><br><span class="line">      ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) +</span><br><span class="line">      <span class="string">&#x27;)&#x27;</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> d = []</span><br><span class="line">  ;(e.requestAnimationFrame = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      e.requestAnimationFrame ||</span><br><span class="line">      e.webkitRequestAnimationFrame ||</span><br><span class="line">      e.mozRequestAnimationFrame ||</span><br><span class="line">      e.oRequestAnimationFrame ||</span><br><span class="line">      e.msRequestAnimationFrame ||</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(e, <span class="number">1e3</span> / <span class="number">60</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;)()),</span><br><span class="line">    n()</span><br><span class="line">&#125;)(<span class="built_in">window</span>, <span class="built_in">document</span>)</span><br></pre></td></tr></table></figure>
</details>
</li>
<li><p>浮现文字（text.js）</p>
<details>
<summary>点击显/隐代码</summary>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a_idx = <span class="number">0</span>;</span><br><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&quot;body&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&quot;喜欢我&quot;</span>, <span class="string">&quot;不喜欢我&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> $i = $(<span class="string">&quot;&lt;span/&gt;&quot;</span>).text(a[a_idx]);</span><br><span class="line">    <span class="keyword">var</span> x = e.pageX,</span><br><span class="line">    y = e.pageY;</span><br><span class="line">    $i.css(&#123;</span><br><span class="line">      <span class="string">&quot;z-index&quot;</span>: <span class="number">99999</span>,</span><br><span class="line">      <span class="string">&quot;top&quot;</span>: y - <span class="number">28</span>,</span><br><span class="line">      <span class="string">&quot;left&quot;</span>: x - a[a_idx].length * <span class="number">8</span>,</span><br><span class="line">      <span class="string">&quot;position&quot;</span>: <span class="string">&quot;absolute&quot;</span>,</span><br><span class="line">      <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ff7a45&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&quot;body&quot;</span>).append($i);</span><br><span class="line">    $i.animate(&#123;</span><br><span class="line">      <span class="string">&quot;top&quot;</span>: y - <span class="number">180</span>,</span><br><span class="line">      <span class="string">&quot;opacity&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;, <span class="number">1500</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $i.remove();</span><br><span class="line">    &#125;);</span><br><span class="line">    a_idx = (a_idx + <span class="number">1</span>) % a.length;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</details>

</li>
</ul>
<p>在 <code>hexo/source/_data/body-end.njk</code> 文件中添加如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;# 鼠标点击特效 #&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.cursor_effect == <span class="string">&quot;fireworks&quot;</span> %&#125;</span><br><span class="line">  &lt;script <span class="keyword">async</span> src=<span class="string">&quot;/js/cursor/fireworks.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% elseif theme.cursor_effect == <span class="string">&quot;explosion&quot;</span> %&#125;</span><br><span class="line">  &lt;canvas <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;fireworks&quot;</span> style=<span class="string">&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot;</span> &gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=<span class="string">&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script <span class="keyword">async</span> src=<span class="string">&quot;/js/cursor/explosion.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% elseif theme.cursor_effect == <span class="string">&quot;love&quot;</span> %&#125;</span><br><span class="line">  &lt;script <span class="keyword">async</span> src=<span class="string">&quot;/js/cursor/love.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% elseif theme.cursor_effect == <span class="string">&quot;text&quot;</span> %&#125;</span><br><span class="line">  &lt;script <span class="keyword">async</span> src=<span class="string">&quot;/js/cursor/text.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>然后在Next的配置文件 <code>_config.next.yml</code> 中取消 <code>bodyEnd: source/_data/body-end.njk</code> 的注释。<br>添加如下配置项：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 鼠标点击特效</span></span><br><span class="line"><span class="comment"># mouse click effect: fireworks | explosion | love </span></span><br><span class="line"><span class="attr">cursor_effect:</span> <span class="string">fireworks</span></span><br></pre></td></tr></table></figure>
<h2 id="4、近期文章"><a href="#4、近期文章" class="headerlink" title="4、近期文章"></a>4、近期文章</h2><p> 在 <code>hexo/source/_data/sidebar.njk</code> 文件中添加如下代码：</p>
<details>
  <summary>点击显/隐代码</summary>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.recent_posts %&#125;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;links-of-blogroll motion-element &#123;&#123; &quot;</span>links-<span class="keyword">of</span>-blogroll-<span class="string">&quot; + theme.recent_posts_layout  &#125;&#125;&quot;</span>&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;links-of-blogroll-title&quot;</span>&gt;</span><br><span class="line">        &lt;!-- modify icon to fire by szw --&gt;</span><br><span class="line">        &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;&quot;</span> aria-hidden=<span class="string">&quot;true&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">        &#123;&#123; theme.recent_posts_title &#125;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;links-of-blogroll-list&quot;</span>&gt;</span><br><span class="line">        &#123;% set posts = site.posts.sort(<span class="string">&#x27;-date&#x27;</span>).toArray() %&#125;</span><br><span class="line">        &#123;% <span class="keyword">for</span> post <span class="keyword">in</span> posts.slice(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;5&#x27;</span>) %&#125;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;</span> title=<span class="string">&quot;&#123;&#123; post.title &#125;&#125;&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
</details>
 
然后在Next的配置文件 `_config.next.yml` 中取消 `sidebar:source/_data/sidebar.njk` 的注释。
添加如下配置项：

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">recent_posts_title:</span> <span class="string">近期文章</span></span><br><span class="line"><span class="attr">recent_posts_layout:</span> <span class="string">block</span></span><br><span class="line"><span class="attr">recent_posts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="5、Live2D模型"><a href="#5、Live2D模型" class="headerlink" title="5、Live2D模型"></a>5、Live2D模型</h2><p>参考链接：<a href="https://www.cnblogs.com/Friends-A/p/11054968.html">Hexo添加Live2D看板娘+模型预览</a></p>
<h2 id="6、文字背景色块"><a href="#6、文字背景色块" class="headerlink" title="6、文字背景色块"></a>6、文字背景色块</h2><p>效果如下：<br><span id="inline-blue"> 站点配置文件 </span><br><span id="inline-purple"> 主题配置文件 </span><br><span id="inline-yellow"> 站点配置文件 </span><br><span id="inline-green"> 主题配置文件 </span><br> 在 <code>hexo/source/_data/styles.styl</code> 文件中添加如下代码：</p>
 <details>
  <summary>点击显/隐代码</summary>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> // 颜色块<span class="selector-tag">-</span>黄</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-yellow</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line"><span class="attribute">font-weight</span>:bold;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#f0ad4e</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 颜色块<span class="selector-tag">-</span>绿</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-green</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line"><span class="attribute">font-weight</span>:bold;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#5cb85c</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 颜色块<span class="selector-tag">-</span>蓝</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-blue</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line"><span class="attribute">font-weight</span>:bold;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#2780e3</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 颜色块<span class="selector-tag">-</span>紫</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-purple</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line"><span class="attribute">font-weight</span>:bold;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#9954bb</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
然后在Next的配置文件 `_config.next.yml` 中取消 `style: source/_data/styles.styl` 的注释。
书写格式如下：
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;inline-blue&quot;</span>&gt;</span> 站点配置文件 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;inline-purple&quot;</span>&gt;</span> 主题配置文件 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;inline-yellow&quot;</span>&gt;</span> 站点配置文件 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;inline-green&quot;</span>&gt;</span> 主题配置文件 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>

<h2 id="7、点击头像跳转首页"><a href="#7、点击头像跳转首页" class="headerlink" title="7、点击头像跳转首页"></a>7、点击头像跳转首页</h2><p>打开 <code>themes\next\layout\_partials\sidebar</code> 目录下 <code>site-overview.njk</code> 文件<br>将第一个 div 替换为以下内容：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;site-author site-overview-item animated&quot; itemprop=&quot;author&quot; itemscope itemtype=&quot;http://schema.org/Person&quot;&gt;</span><br><span class="line">  &#123;%- if theme.avatar.url %&#125;</span><br><span class="line"><span class="addition">+    &lt;a href=&quot;/&quot;&gt;</span></span><br><span class="line">      &lt;img class=&quot;site-author-image&quot; itemprop=&quot;image&quot; alt=&quot;&#123;&#123; author &#125;&#125;&quot;</span><br><span class="line">        src=&quot;&#123;&#123; url_for(theme.avatar.url or theme.images + &#x27;/avatar.gif&#x27;) &#125;&#125;&quot;&gt;</span><br><span class="line"><span class="addition">+    &lt;/a&gt;</span></span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line">  &lt;p class=&quot;site-author-name&quot; itemprop=&quot;name&quot;&gt;&#123;&#123; author &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;div class=&quot;site-description&quot; itemprop=&quot;description&quot;&gt;&#123;&#123; description &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<div class="link-grid"><div class="link-grid-container">
<div class="link-grid-image" style="background-image: url(/images/apple-touch-icon-next.png);"></div>
<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>
<a href="https://theme-next.js.org/"></a>
</div><div class="link-grid-container">
<div class="link-grid-image" style="background-image: url(/images/apple-touch-icon-next.png);"></div>
<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>
<a href="https://theme-next.js.org/"></a>
</div><div class="link-grid-container">
<div class="link-grid-image" style="background-image: url(/images/apple-touch-icon-next.png);"></div>
<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>
<a href="https://theme-next.js.org/"></a>
</div><div class="link-grid-container">
<div class="link-grid-image" style="background-image: url(/images/apple-touch-icon-next.png);"></div>
<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>
<a href="https://theme-next.js.org/"></a>
</div><div class="link-grid-container">
<div class="link-grid-image" style="background-image: url(/images/apple-touch-icon-next.png);"></div>
<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>
<a href="https://theme-next.js.org/"></a>
</div></div>



<hr>
<p>参考：<br><a href="https://theme-next.js.org//">Next官方文档</a><br><a href="https://github.com/next-theme/hexo-theme-next">Next主题仓库</a></p>
<p>1、<a href="https://www.dazhuanlan.com/2019/10/28/5db601ba91d49/">Next 主题美化</a><br>2、<a href="https://tding.top/archives/aad98408.html">Hexo 搭建个人博客文章汇总（next 8.0）</a><br>3、<a href="https://blog.juanertu.com/archives/5b20fbd0.html">Hexo框架(十三)：关于博客主题持续更新的问题和我的新配置方式（next 8.0）</a><br>4、<a href="https://blog.csdn.net/jankingmeaning/article/details/88783308">Hexo+NexT搭建博客笔记</a>（较全)<br>5、<a href="https://www.jianshu.com/p/f054333ac9e6">hexo的next主题个性化教程:打造炫酷网站</a><br>6、<a href="https://www.jianshu.com/p/b5f509f25872">为 Hexo 的 Next 主题添加 Gitalk 评论</a><br>7、<a href="https://www.cnblogs.com/Friends-A/p/11054968.html">Hexo添加Live2D看板娘+模型预览</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Admin后台管理</title>
    <url>/archives/2020/03/Hexo%E5%8D%9A%E5%AE%A2/Hexo-Admin%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h4 id="1-安装-hexo-admin-插件"><a href="#1-安装-hexo-admin-插件" class="headerlink" title="1. 安装 hexo-admin 插件"></a>1. 安装 hexo-admin 插件</h4><p>首先，在创建Blog的根目录下安装插件，打开Git Bash输入如下命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>安装过程中可能会有许多错误提示，绝大多数情况下没有影响可以忽略。<br>输入命令，启动服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>在浏览器中打开localhost:4000/admin/即可编辑文章内容,界面如下。<br><img src="/image/2020-3-20/image-1.png"></p>
<h4 id="2-安全与配置"><a href="#2-安全与配置" class="headerlink" title="2. 安全与配置"></a>2. 安全与配置</h4><p>此时，访问后台不需要账号密码即可进入，为安全起见设置账号密码。<br>在主页面上方选在 “ Setting ”，然后点击“ Setup authentification here ”。<br><img src="/image/2020-3-20/image-2.png"><br>填写username,password,seret等信息，获得password_hash。</p>
<p><img src="/image/2020-3-20/image-3.png"><br>将页面下方获取的内容复制。<br><img src="/image/2020-3-20/image-4.png"><br>粘贴到 _config.yml 文件中。注意此文件非主题中的配置文件，目录结构如下。</p>
<p><img src="/image/2020-3-20/image-5.png"></p>
<h4 id="3-文章编写"><a href="#3-文章编写" class="headerlink" title="3. 文章编写"></a>3. 文章编写</h4><p>在 admin 主页面 “Posts” 下方点击 New Post 输入文章名称即可进入编辑界面。<br><img src="/image/2020-3-20/image-12.png"><br><img src="/image/2020-3-20/image-13.png"><br>点击右上角的 齿轮 标识可以设置文章的 Date、Author、Tags、Categories等信息。<br><img src="/image/2020-3-20/image-14.png"><br>此插件支持图片的直接粘贴，并可以将图片保存到指定位置。<br>在 Setting 中最下方有 “Image Pasting Settings” 设置项。<br><img src="/image/2020-3-20/image-15.png"><br><strong>Image directory</strong>： 图片存放位置<br><strong>Image filename prefix</strong>：图片保存名称格式<br>将复制的图片粘贴在文档中即可，可以看到插件已自动按照MD语法将图片添加到文章中，并按照设置好的路径和命名方式保存。<br><img src="/image/2020-3-20/image-16.png"><br><img src="/image/2020-3-20/image-17.png"><br>编辑时，文章作为草稿保存在 _drafts 文件夹中。<br><img src="/image/2020-3-20/image-18.png"><br>文章编写完成后，点击右上角  ‘Publish’ ，文章会被转存到 _posts 文件夹中。<br>此后进行下一步操作。</p>
<h4 id="4-文章-Deploy"><a href="#4-文章-Deploy" class="headerlink" title="4. 文章 Deploy"></a>4. 文章 Deploy</h4><p>如要 Deploy ，需要在标题 2 中的 _config.yml 文件同级目录下编写一个脚本。<br>脚本名为“ hexo-deploy，文件内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>
<p>配置 _config.yml 文件，在 admin 处添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deployCommand:<span class="string">&#x27;hexo-deploy.bat&#x27;</span></span><br></pre></td></tr></table></figure>
<p>操作完成后点击Deploy，即可将文章部署到 GitHub 上。</p>
<hr>
<h5 id="Hexo-Admin地址"><a href="#Hexo-Admin地址" class="headerlink" title="Hexo-Admin地址"></a><a href="https://github.com/jaredly/hexo-admin">Hexo-Admin地址</a></h5>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>hexo-admin</tag>
      </tags>
  </entry>
  <entry>
    <title>东软冬训营 HTML篇</title>
    <url>/archives/2019/01/%E4%B8%9C%E8%BD%AF%E5%86%AC%E8%AE%AD%E8%90%A5/003.%E4%B8%9C%E8%BD%AF%E5%86%AC%E8%AE%AD%E8%90%A5%20HTML%E7%AF%87/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(1.19)</span><br><span class="line">1.页面内容</span><br><span class="line">	a.静态文本 直接写</span><br><span class="line">	b.用户输入，输入 按固定格式写</span><br><span class="line">2.常用标签</span><br><span class="line">	</span><br><span class="line">	注意： 标签必须符合HTML规范</span><br><span class="line">	a.form：表单标签，用于提交数据</span><br><span class="line">		action 表示提交数据位置</span><br><span class="line">		method 表示提交数据的方式</span><br><span class="line">			post 隐含</span><br><span class="line">	b.table: 表格</span><br><span class="line">		&lt;table&gt;</span><br><span class="line">			&lt;tr&gt;                &lt;!-- 第一行 --&gt;</span><br><span class="line">				&lt;td&gt;列一&lt;/td&gt;</span><br><span class="line">				&lt;td&gt;列二&lt;/td&gt;</span><br><span class="line">			&lt;/tr&gt;</span><br><span class="line">		&lt;/table&gt;</span><br><span class="line">	c.输入类：</span><br><span class="line">	&lt;input <span class="built_in">type</span>=<span class="string">&quot;&quot;</span> name=<span class="string">&quot;&quot;</span> id=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">		<span class="built_in">type</span>类型：</span><br><span class="line">			text	输入文本</span><br><span class="line">			radio	单选 需提供 value 属性</span><br><span class="line">	d.下拉列表：</span><br><span class="line">	&lt;select name=<span class="string">&quot;&quot;</span> id=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">		&lt;option value=<span class="string">&quot;xxx&quot;</span>&gt;xxx&lt;/option&gt;</span><br><span class="line">	&lt;/select&gt;</span><br><span class="line">	e.文本域：</span><br><span class="line">	&lt;textarea name=<span class="string">&quot;&quot;</span> rows=<span class="string">&quot;&quot;</span> clos=<span class="string">&quot;&quot;</span>&gt;&lt;/textarea&gt;</span><br><span class="line">	f.按钮：</span><br><span class="line">	&lt;button <span class="built_in">type</span>=<span class="string">&quot;&quot;</span>&gt;xxx&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">3.控件属性设置</span><br><span class="line">	语言结构</span><br><span class="line">	a.样式 必须放在 head 标签内</span><br><span class="line">	b.必须放在 &lt;style&gt; &lt;/style&gt; 标签内</span><br><span class="line">	c.格式</span><br><span class="line">		选择器&#123;</span><br><span class="line">			样式的属性：值 ;</span><br><span class="line">		&#125;</span><br><span class="line">4.选择器分类</span><br><span class="line">	a.标签选择器 </span><br><span class="line">		以标签名 命名，只对同名的标签起作用</span><br><span class="line">		//对所有标签起作用</span><br><span class="line">		*&#123;</span><br><span class="line">		&#125;</span><br><span class="line">	b.类选择器</span><br><span class="line">		不同名称的标签，具有相同的样式</span><br><span class="line">		.名称&#123;</span><br><span class="line">		&#125;</span><br><span class="line">		通过标签的 class 属性进行引入</span><br><span class="line">			class = <span class="string">&quot;名称&quot;</span></span><br><span class="line">	c.id选择器</span><br><span class="line">		仅对与 id 同名的标签起作用，只作用一个</span><br><span class="line">		<span class="comment">#名称&#123;</span></span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line">		(1.20)</span><br><span class="line">1.div：</span><br><span class="line">	块 级容器，独立成行</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>东软冬训营 SQL篇</title>
    <url>/archives/2019/01/%E4%B8%9C%E8%BD%AF%E5%86%AC%E8%AE%AD%E8%90%A5/002.%E4%B8%9C%E8%BD%AF%E5%86%AC%E8%AE%AD%E8%90%A5%20SQL%E7%AF%87/</url>
    <content><![CDATA[<pre><code>(1.16)
</code></pre>
<p>1.常见数据库<br>    oracle：免费，服务收费<br>    DB2      ：金融，证券，稳定性强<br>    mysql ：<br>2.数据类型<br>    varchar()： 可变长度，占用设定长度内的最小值<br>    char()     :    固定长度，数据占用长度固定不变<br>    decimal(,): 小数，需指定长度和小数位数<br>3.常用 SQL 命令<br>    a)添加数据<br>        insert into 表名(栏位,…)<br>            values(值,…)<br>        注意：<br>            i)  个数对应<br>            ii) 类型对应<br>            iii)非空列必须给值<br>    b)查询<br>        select * from 表名       //全部<br>        select *from 表名<br>            where 栏位名 &gt; xxx</p>
<pre><code>    //包含元素查询
    select *from 表名
        where 栏位名 like &#39;%str&#39; //以str开头
    注：
        &#39;%X%&#39;    ：包含X
        &#39;%X &#39;    ：以 X 开头
        &#39; X%&#39;    ：以 X 结尾
        &#39; X &#39;    ：与 X 相同
    //去除重复数据
    select distinct 列名 from 表名
    
c)删除
     //删除表中所有行数据
    delete from 表 -- 
    //删除满足条件的数据
    delete from 表 where 条件 --  
d)修改
    update 表 set 列名 = 改后值,列名 = 改后值 ...
        where 条件
e)排序
    desc 降序
    asc  升序
    select *from tbl
        where 条件
        order by 列名 desc
f)表链接
    select b.* from 表名 b
    inner join (子查询)a
    on b.列名 = a.列名
CRUD
    C: create
    R: read
    U: update
    D: delete

(1.17)
</code></pre>
<ol start="4">
<li><p>Java 操作数据库<br> a)设置链接数据库参数</p>
<pre><code> 在 src 下创建名为 c3p0-config.xml 文件
 1)登录数据库的用户名 + 密码
 2)设置数据库位置：链接的电脑及数据库名称
 3）链接数据库
 
 c3p0-config.xml文件
 &lt;?xml version=&quot;1.0&quot;?&gt;
 &lt;c3p0-config&gt;
     &lt;default-config&gt;
         &lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;
         &lt;property name=&quot;password&quot;&gt;&lt;/property&gt;
         &lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql://localhost:3306/stus&lt;/property&gt;
         &lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;
     &lt;/default-config&gt;
 &lt;/c3p0-config&gt;
 
</code></pre>
<p> b)传建数据库链接工具，根据配置链接数据库<br> c)创建 SQL 语句<br> d)执行 SQL 语句<br> e)关闭</p>
<p> 查询操作<br> public void myQuery() {</p>
<pre><code> //链接数据库
 ComboPooledDataSource ds = new ComboPooledDataSource();
 //定义 SQL 语句
 String sql = &quot;select * from tbl_book_info&quot;;
 //创建操作数据库的对象
 QueryRunner qr = new QueryRunner(ds);
 try &#123;
     // MapListHandler()： 结果集 使用 Map、 List 的格式存放
     List&lt;Map&lt;String, Object&gt;&gt; list = qr.query(sql, new MapListHandler());
     if (list != null &amp;&amp; list.size() &gt; 0) &#123;
         System.out.println(&quot;所有图书信息如下：&quot;);
         for (int i = 0; i &lt; list.size(); i++) &#123;
             Map&lt;String, Object&gt; map = list.get(i);
             System.out.println(map.get(&quot;b_id&quot;) + &quot;\t&quot; + map.get(&quot;b_name&quot;) + &quot;\t&quot; + map.get(&quot;b_auth&quot;) + &quot;\t&quot;
                     + map.get(&quot;b_price&quot;) + &quot;\t&quot; + map.get(&quot;b_num&quot;));
         &#125;
     &#125;
 &#125; catch (SQLException e) &#123;
     // TODO Auto-generated catch block
     e.printStackTrace();
 &#125;
</code></pre>
<p> }</p>
<p> Basedao.class    </p>
<p> package book;<br> import java.sql.SQLException;<br> import java.util.List;<br> import java.util.Map;<br> import org.apache.commons.dbutils.QueryRunner;<br> import org.apache.commons.dbutils.handlers.MapListHandler;<br> import com.mchange.v2.c3p0.ComboPooledDataSource;</p>
<p> //操作数据库的类。对数据库的操作有几种<br> public class BaseDao {</p>
<pre><code> private ComboPooledDataSource ds=
     new ComboPooledDataSource();  
 //新特性，可变参数个数的方法
 public int update(String sql,Object... params) &#123;
     int row=0;
     QueryRunner qr=new QueryRunner(ds);
     try &#123;
         row=qr.update(sql,params);
     &#125; catch (SQLException e) &#123;
         e.printStackTrace();
     &#125;
     return row;
 &#125;
 public List&lt;Map&lt;String, Object&gt;&gt; query(String sql,Object...params)&#123;
     List&lt;Map&lt;String, Object&gt;&gt; list=null;
     QueryRunner qr=new QueryRunner(ds);
     try &#123;
         list=qr.query(sql, new MapListHandler(),params);
     &#125; catch (SQLException e) &#123;
         // TODO Auto-generated catch block
         e.printStackTrace();
     &#125;
     return list;
 &#125;    
</code></pre>
<p> }</p>
</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>东软冬训营 Java篇</title>
    <url>/archives/2019/01/%E4%B8%9C%E8%BD%AF%E5%86%AC%E8%AE%AD%E8%90%A5/001.%E4%B8%9C%E8%BD%AF%E5%86%AC%E8%AE%AD%E8%90%A5%20Java%E7%AF%87/</url>
    <content><![CDATA[<p>1.整数与小数<br>小数 除以 0 = 无穷 (小数中没有绝对的零)<br>整数 除以 0  无意义<br>2.字符串<br>a)获取字符串长度<br>    String str = “123456789”;<br>    int size = str.length();<br>b)字符串截取<br>    //截取从a位置到b位置的字符串，a，b为字符串位置下标<br>    String str1 = str.substring(a,b+1); //前包含，后不包含<br>c)判断字符串是否相等<br>    str1.equals(str2);<br>d)获取字符串 下标对应的字符<br>    str1.charAt(下标)；<br>3.强制类型转换<br>Integer.parseInt(str); //字符串型强制转换为整型<br>Integer.toString(n);   //整型强制转换为字符串型<br>4.输出打印<br>println 输出换行<br>print   输出不换行<br>5.获取用户输入数据<br>Scanner sc=new Scanner(System.in);<br>int a=sc.nextInt(); //获取输入数据</p>
<p>String str=sc.next();<br>//next()以空格为结束符，不能获取带有空格的字符串<br>String str=sc.nextLine();<br>//nextLoine()以 Enter 键为结束符，获得的字符串为 Enter 前的所有内容<br>6.获取随机数<br>a)<br>    Math.random() //获取0<del>1之间的随机数<br>    //获取0</del>a之间的整数，需强制类型转换<br>    int n = (int)(Math.random()*a)<br>b)<br>    Random rand = new Random；<br>    int n = rand.nextInt(a)<br>    //获取0~a之间的整数，包含0,但不包含a<br>（1.14）<br>1.数字格式化<br>DecimalFormat df = new DecimalFormat(“0,000.00”);//数字格式化<br>String n = df.format(rst);   //rst 传入待处理数值，转化为字符串<br>2.Java 方法定义及调用<br>a)定义<br>    public 返回值类型 方法名(参数类型 参数名){<br>        //功能<br>        return 值；<br>    }<br>b)调用<br>    类名 对象名 = new 类名();<br>    返回值类型 变量 = 对象名.方法名(参数);<br>3.<br>double n = math.ceil(r); //获取大于等于 r 的最小整数<br>double n = math.floor(r);//获取小于等于 r 的最大整数<br>4.集合<br>a)线性集合<br>    List&lt;类型&gt; list = new Arraylist&lt;&gt;();     //(整型：Integer类)<br>    list.add()          //将数据添加到集合<br>    list.contains()      //内容查重，返回boolean值<br>    list.size()            //获取集合元素个数<br>    list.get(数据下标)； //获取集合中相应下标对应的数据<br>b)键值对集合<br>    Map&lt;key类型，value类型&gt; map = new HashMap&lt;&gt;(); //构建集合<br>    map.put(key,value);  //放入键值对，key 重复，value 值覆盖<br>    map.get(key);        //获取 key 对应的 value</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌入式实训 Day6 驱动编写</title>
    <url>/archives/2018/07/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%9E%E8%AE%AD/Day6/</url>
    <content><![CDATA[<p>【3】字符设备驱动框架<br> 内核：内存管理、进程管理、网络协议、驱动、虚拟文件系统</p>
<p> 1）需要申请注册设备号（设备号用来区分不同的设备）–设备号给驱动使用<br> 2）完成对设备的控制（完成与应用层的交互）<br> 3）驱动自行创建设备节点（不用手动自行创建  mknod）–节点给应用层使用，在应用层中视字符设备为文件<br>                                                     应用层代码通过操作文件，实现对设备的控制</p>
<p> 驱动三要素：<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static 静态，修饰函数，表示该函数只应用于本文件（作用域只适用本文件）</span><br><span class="line">1）入口函数</span><br><span class="line">    驱动在内核生效，自动执行入口函数，在入口函数完成资源申请，初始化工作</span><br><span class="line">	  6 static int __init driver_test_init(void)&#123;</span><br><span class="line">      7 </span><br><span class="line">      8     return 0;</span><br><span class="line">      9 &#125;</span><br><span class="line">	  14 module_init(driver_test_init);      </span><br><span class="line">2）卸载函数</span><br><span class="line">    驱动在内核失效，自动执行卸载函数，在卸载函数资源释放，注销工作</span><br><span class="line"></span><br><span class="line">	  11 static void __exit driver_test_exit(void)&#123;</span><br><span class="line">      12 </span><br><span class="line">      13 &#125;</span><br><span class="line">      15 module_exit(driver_test_exit);</span><br><span class="line"> 3）模块申明（驱动）</span><br><span class="line">    开发许可证申明</span><br><span class="line">	MODULE_LICENSE(&quot;GPL&quot;);</span><br></pre></td></tr></table></figure><br>【2】申请注册设备号<br> 设备号（32bit） = 主设备号（高12bit）  +  次设备号（低20bit）</p>
<p> #define MINORBITS    20<br> #define MINORMASK    ((1U &lt;&lt; MINORBITS) - 1)</p>
<p> #define MAJOR(dev)    ((unsigned int) ((dev) &gt;&gt; MINORBITS))  根据设备号，得到主设备号<br> #define MINOR(dev)    ((unsigned int) ((dev) &amp; MINORMASK)) 根据设备号，得到次设备号<br> #define MKDEV(ma,mi)    (((ma) &lt;&lt; MINORBITS) | (mi))    根据主次设备号，生成设备号<br>  主： 11010010       —》 1101001000000000000000000000<br>  次： 100010111001   —》                 100010111001<br>                            1101001000000000100010111001<br> 申请注册设备号：<br>     1）静态注册<br>        （驱动中设定设备号，向内核注册）–用户自定义不能与内核中已注册的设备号重复<br>         int register_chrdev_region(dev_t from, unsigned count, const char *name)<br>         功能：向内核注册设备号<br>         参数：from  设备号<br>               count 注册设备号的数量<br>               name  名字 用户自定义<br>         返回值：成功 0<br>                 失败 负数<br>     2）动态注册<br>        （驱动向内核申请设备号，由内核自动分配，再注册）<br>        int alloc_chrdev_region(dev_t *dev, unsigned baseminor, unsigned count,<br>            const char *name)</p>
<pre><code>    功能：自动分配设备号，并完成注册
    参数：dev  保存内核自动分配的设备号
          baseminor  次设备号
          count  注册设备号的数量
          name   用户自定义
    返回值：成功   0
            失败   负数
            
 3）注销设备号
    void unregister_chrdev_region(dev_t from, unsigned count)
    功能：注销设备号
    参数：from  设备号
          count  数量
</code></pre>
<p>【2】设备号与设备建立关系，实现对设备的控制<br> 在内核中，由内核定义结构体cdev，用结构体描述具体的设备<br> struct cdev {<br>    struct module *owner;     THIS_MODULE<br>    const struct file_operations *ops;    定义对具体的硬件设备操作的方法<br>    dev_t dev;        设备号<br> };</p>
<p> 1）初始化cdev结构体<br>    void cdev_init(struct cdev *cdev, const struct file_operations *fops)<br>    功能：初始化cdev结构体中的成员<br>    参数：cdev  cdev结构体指针<br>          fops  file_operations结构体的指针</p>
<p> 2）将cdev结构体添加到内核的链表<br>    int cdev_add(struct cdev *p, dev_t dev, unsigned count)<br>    功能：将已经初始化的cdev结构体添加到内核链表中<br>    参数：p   cdev结构体的指针<br>          dev  设备号<br>          count 添加到内核链表中cdev结构体的数量<br>    返回值：成功  0<br>            失败 负数 </p>
<p> 3）void cdev_del(struct cdev *p)<br>    功能：从链表中移除cdev结构体<br>    参数：p   cdev结构体    </p>
<p>【3】实现设备的打开、关闭<br> 应用层： fd  = open(“/dev/test”, O_RDWR);<br>          close(fd);</p>
<p> 驱动： int test_open(struct inode *, struct file *){<br>            //用户实现设备的打开操作<br>        }<br>        int test_close(struct inode *, struct file *){<br>            //实现设备的关闭<br>        }</p>
<p> struct file_operations fops = {<br>    .open = test_open,<br>    .release = test_close,<br> };        </p>
<p> 当用户创建设备节点，内核同时初始化inode和file结构体，与设备节点所对应，保存该设备节点的属性</p>
<p> 当应用程序执行对设备节点的操作时（open close），内核自动找到该设备节点所对应的inode结构体以及file结构体<br> 从inode结构体中获的设备节点所对应的设备号，内核根据设备号找到从内核链表中找到对应的cdev结构体，<br> 得到cdev结构体中对设备操作的方法集合，进而调用操作集合中对应的函数实现对设备的控制</p>
<p>【4】实现对设备的读写操作<br> 应用层实现读写操作：<br> ssize_t write(int fd, const void *buf, size_t count);<br> 功能：<br> 参数：<br> 返回值：</p>
<p> ssize_t read(int fd, void *buf, size_t count);<br> 功能：<br> 参数：<br> 返回值：</p>
<p> day7<br> 【1】系统调用<br> func（功能函数）—-》系统调用接口层（异常-中断）——》SYSCALL（系统调用的服务例程）—–》sys_func—-》test_func<br> 应用层（文件系统）        虚拟文件系统层                  内核层</p>
<p> 每一次系统调用的函数接口对应一个系统调用编号，给服务例程使用<br> 每一次系统调用，处理器的状态发生改变，用户态—》内核态   内核态—》用户态</p>
<p>【2】驱动实现控制设备<br> 应用层：int ioctl(int d, int request, …);<br>         功能：控制设备<br>         参数： fd   文件描述符<br>                request  命令码<br>                         生成命令码<br>                         #define _IO(type,nr)<br>                         生成命令码，实现数据的传输<br>                         #define _IOR(type,nr,size)<br>                         #define _IOW(type,nr,size)<br>                         #define _IOWR(type,nr,size)<br>                         参数1：传字符<br>                         参数2：编号<br>                         参数3：传递的数据的大小（直接给数据）<br>                …      附件参数，不可被忽略，传递一个地址<br>                         如果ioctl需要传递数据，必须有第三个参数，该参数表示的是需要传递的数据（数据的地址）<br>                         如果不传数据，该参数赋值为NULL</p>
<pre><code>    返回值：成功  0
            失败  -1
</code></pre>
<p> 驱动：    long test_ioctl(struct file *, unsigned int, unsigned long){</p>
<pre><code>    &#125;
 
    struct file_operations fops = &#123;
        .unlocked_ioctl = test_ioctl,
    &#125;
</code></pre>
<p>【3】地址转换<br> 对于Linux系统来说，不论应用层或内核层，所有的进程，对地址进行操作，都采用操作虚拟地址</p>
<p> 对于CPU，一切皆内存，32处理器，取值范围 0x0  ~ 0xffffffff  （0 ~ 2^32 -1 –4G）</p>
<p> 对于系统，从软件角度来看，系统中所有的进程在发访问设备的时候，只能操作虚拟地址</p>
<p> 虚拟地址通过映射物理地址得来</p>
<p> void * ioremap(unsigned long paddr, unsigned long size)<br> 功能：实现物理地址到虚拟地址的转换<br> 参数：addr  物理地址<br>       size  映射实际地址区域的大小<br> 返回值：  虚拟地址值</p>
<p> void iounmap(void  *addr)<br> 功能：将物理地址和虚拟地址的映射关系断开<br> 参数：虚拟地址值</p>
<p> 通过地址转换，得到寄存器所在的虚拟地址</p>
<p>【4】实现对寄存器的值修改<br> int readl(const void *addr)<br> 功能：读取寄存器中保存的值<br> 参数：寄存器的地址（虚拟地址）<br> 返回值：寄存器中保存的值</p>
<p> 修改寄存器中的值：<br>     通过位操作  （  &lt;&lt;   &gt;&gt;  |  &amp;   ~）</p>
<p> void writel(unsigned int l, volatile void __iomem *addr)<br> 功能：将值写入到寄存器中<br> 参数：l   需要写入的值<br>       addr  寄存器的地址（虚拟地址）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌入式实训 Day5 第三方驱动移植</title>
    <url>/archives/2018/07/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%9E%E8%AE%AD/Day5/</url>
    <content><![CDATA[<h5 id="【1】第三方驱动移植"><a href="#【1】第三方驱动移植" class="headerlink" title="【1】第三方驱动移植"></a>【1】第三方驱动移植</h5><p> 1）Kconfig  生成图形界面中的选项<br>      由顶层目录下的Kconfig逐级调用各个子目录中的Kconfig，共同生成整体的图形界面</p>
<pre><code>  5 menu &quot;Character devices&quot;       图形界面中生成菜单
  7 config  FS4412_LED             config-生成选项
  8     tristate &quot;FS4412 LED Driver Support&quot;-图形界面中的选项名
        bool： *（y）  （n）
        tristate： *（y）  （n）  （M）
  9     depends on ARCH_EXYNOS4       依赖
        default  y                    默认选中
  10     help                         帮助，申明
  11         support led device on FS4412 develop board
  source  引用下一级Kconfig
  endmenu
</code></pre>
<p> 2） 64 obj-$(CONFIG_FS4412_LED)    += fs4412_led_drv.o       </p>
<pre><code> obj-y  += fs4412_led_drv.o  表示编译此代码
</code></pre>
<p> 3）$ make menuconfig      </p>
<pre><code>  Device Drivers  ---&gt;  
  Character devices  ---&gt;  
        &lt;*&gt; FS4412  LED  Device Support  静态编译
        编译此文件，并将其编译到内核镜像中
        &lt;M&gt; FS4412  LED  Device Support  动态编译
        编译此文件，将该文件编译为模块，不会添加到内核镜像中，便于调试
</code></pre>
<p>4）make  modules<br>    将图形界面中所有选择为M的选项所对应的文件，全部编译为模块（xxx.ko）</p>
<h5 id="【2】字符设备"><a href="#【2】字符设备" class="headerlink" title="【2】字符设备"></a>【2】字符设备</h5><p> 应用层实现对字符设备的控制，采用文件IO（文件的读写）<br> 文件IO定义：采用系统调用的方式实现对文件的读写操作</p>
<p> 打开文件（普通文件，硬件设备（字符设备节点 mknod /dev/led c 500 0））<br> int open(const char *pathname, int flags);<br> int open(const char *pathname, int flags, mode_t mode);<br> 功能： 打开一个文件<br> 参数: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pathname -路径名</span><br><span class="line">flags -标志位：          </span><br><span class="line">O_RDONLY   以只读的方式打开文件 </span><br><span class="line">O_WRONLY   以只写的方式打开文件</span><br><span class="line">O_RDWR     以读写的方式打开文件</span><br><span class="line">O_APPEND   以追加的方式打开文件（从文件的数据的末尾处开始读写）</span><br><span class="line">O_CREAT    如果打开的文件不存在，自动创建</span><br><span class="line">O_TRUNC    清空文件中原有的数据</span><br><span class="line">   O_WRONLY|O_CREAT|O_TRUNC 以只写的方式打开文件，如果文件不存在，自动创建，如果文件存在，清空数据</span><br><span class="line">O_RDWR|O_CREAT|O_TRUNC   以读写的方式打开文件，如果文件不存在，自动创建，如果文件存在，清空数据</span><br><span class="line">O_WRONLY|O_CREAT|O_APPEND 以只写的方式打开文件，如果文件不存在，自动创建，如果文件存在，写入到数据的末尾</span><br><span class="line">O_RDWR|O_CREAT|O_APPEND  以读写的方式打开文件，如果文件不存在，自动创建，如果文件存在，从文件末尾处读写</span><br><span class="line">mode   用户对该文件的执行权限   </span><br><span class="line">       如果第二个参数中指定O_CREAT，必须指定该参数</span><br><span class="line">	返回值: 成功  文件描述符（非负数）</span><br><span class="line">          失败  -1</span><br></pre></td></tr></table></figure>
<p>【3】字符设备驱动框架<br> 1）需要申请注册设备号（设备号用来区分不同的设备）<br> 2）完成对设备的控制（完成与应用层的交互）<br> 3）驱动自行创建设备节点（不用手动自行创建  mknod）</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌入式实训 Day3 Linux内核编译与服务器配置</title>
    <url>/archives/2018/07/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%9E%E8%AE%AD/Day3/</url>
    <content><![CDATA[<h5 id="【1】uboot烧写原理"><a href="#【1】uboot烧写原理" class="headerlink" title="【1】uboot烧写原理"></a>【1】uboot烧写原理</h5><p> SD卡制作启动盘：<br>     cd  sdfuse_q<br>     ./mkuboot.sh /dev/sdb    SD卡的设备文件名    /dev 保存设备节点（文件名）<br>     ./sd_fusing_exynos4x12.sh /dev/sdb u-boot-fs4412.bin</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$2</span> fusing...&quot;</span></span><br><span class="line">dd iflag=dsync oflag=dsync <span class="keyword">if</span>=<span class="variable">$2</span> of=<span class="variable">$1</span> seek=1 &amp;&amp; \</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$2</span> image has been fused successfully.&quot;</span>   </span><br></pre></td></tr></table></figure>
<p>if(inputfile)–输入文件—u-boot-fs4412.bin（2010）<br>of(outputfile)–输出文件— /dev/sdb<br>dd 将输入文件的内容复制给输出文件（复制的同时进行了格式转换）<br>本质：将uboot镜像固化到SD卡，SD卡成为启动盘</p>
<pre><code>Linux文件类型：
b  （block 块设备文件）  具体表示是一种设备
c  （char 字符设备文件） 具体表示是一种设备
d  （目录）
-  （普通文件） .txt .dat
l  （链接文件）
s  （套接字文件）
p  （管道文件）
</code></pre>
<h5 id="【2】重启网卡"><a href="#【2】重启网卡" class="headerlink" title="【2】重启网卡"></a>【2】重启网卡</h5><pre><code>sudo /etc/init.d/networking restart
</code></pre>
<h5 id="【3】Linux内核配置编译"><a href="#【3】Linux内核配置编译" class="headerlink" title="【3】Linux内核配置编译"></a>【3】Linux内核配置编译</h5><p> 1）Makefile<br>    198 ARCH        ?= arm     默认X86<br>    199 CROSS_COMPILE   ?= arm-none-linux-gnueabi-    申明交叉编译工具链的前缀</p>
<p> 2）导入默认配置<br>    确保Linux内核镜像可以运行在当前产品中，支持当前的SOC<br>    make  exynos_defconfig<br>          描述的是与SOC有关的代码对应的选项<br>          cp arch/arm/configs/exynos_defconfig .config</p>
<p>  .config 配置文件通知Makefile在编译内核镜像的时候，用来确定编译哪些文件</p>
<p>  由顶层目录下的Makefile，调用子目录的中的Makefile协同完成源码的编译</p>
<p>  .config保存的都是选项，每一个选项都会对应源码中的一个文件或者多个文件</p>
<p> 3）make menuconfig  图形界面的选配<br>    对上一步的完善，用户可以自定义选择选项，选项被选择，该选项所对应的文件被编译到内核镜像中‘<br>    选项未选中，该选项所对应的文件肯定不会被编译到内核镜像中</p>
<p> 4）make uImage  编译内核镜像</p>
<p> 5）make dtbs  编译设备树文件</p>
<h5 id="【4】tftp服务器"><a href="#【4】tftp服务器" class="headerlink" title="【4】tftp服务器"></a>【4】tftp服务器</h5><p> tftp远程传输协议<br> 服务器端配置： sudo vi /etc/default/tftpd-hpa</p>
<p>  3 TFTP_USERNAME=”tftp”<br>  4 TFTP_DIRECTORY=”/tftpboot”   传输目录<br>                                 sudo mkdir /tftpboot<br>                                 sudo chmod  777 /tftpboot<br>  5 TFTP_ADDRESS=”0.0.0.0:69”<br>  6 TFTP_OPTIONS=”-c -s -l”    </p>
<p>  启动服务器：<br>  sudo service tftpd-hpa restart</p>
<h5 id="【5】配置nfs服务器"><a href="#【5】配置nfs服务器" class="headerlink" title="【5】配置nfs服务器"></a>【5】配置nfs服务器</h5><p> 配置server端：<br>     sudo vi /etc/exports</p>
<pre><code> /source/rootfs/ *(rw,sync,no_subtree_check,no_root_squash)

 /source  共享目录
          sudo mkdir /source
          sudo chmod 777 /source
 rootfs   开发板需要访问的文件系统
 
</code></pre>
<p> 启动nfs服务器：<br>    sudo /etc/init.d/nfs-kernel-server restart</p>
<h5 id="【6】bootloader"><a href="#【6】bootloader" class="headerlink" title="【6】bootloader"></a>【6】bootloader</h5><p> bootloader的操作的方式：自启动、交互</p>
<p> setenv  设置新的环境变量<br> saveenv  保存设置的环境变量<br> printenv 显示保存的环境变量</p>
<p> serverip  主机IP<br> ipaddr    目标机<br> bootcmd   bootcmd  自启动命令（当uboot自启动时，默认操作该命令后的所有指令）<br> tftp addr uImage/exynos4412-fs4412.dtb   传输指令<br> bootm  addr  启动地址上的镜像</p>
<p> bootargs  uboot不执行该命令，uboot将该命令在启动内核之后，传递给内核，<br>           内核会读取检验该命令，进而完成对文件系统的访问</p>
<h5 id="【7】网卡驱动"><a href="#【7】网卡驱动" class="headerlink" title="【7】网卡驱动"></a>【7】网卡驱动</h5><p> 1）设备树（网卡的信息）<br>    设备树功能：描述硬件信息，内核在启动时，会解析设备树文件，将设备树中保存的硬件信息读取，保存<br>    内核中的驱动可以通过读取的硬件信息，进而完成对硬件设备的控制<br>    Linux3.0提供设备树的机制（结合数据结构中的树为思想）<br>    设备树本质是文本文件，Linux内核中把该文件抽象为树型结构</p>
<pre><code>/&#123;
    testnode1&#123;
       a = x;
    &#125;;
    testnode2&#123;
        testnode3&#123;
           b = y;
        &#125;;
    
    &#125;;

&#125;;
</code></pre>
<p> 2）make menuconfig图形界面<br>    选配选项 [*]  </p>
<pre><code>[*] Networking support  ---&gt;
Networking options  ---&gt;     网络配置 网络协议
    &lt;*&gt; Packet socket
    &lt;*&gt; Unix domain sockets 
    [*] TCP/IP networking
    [*]   IP: kernel level autoconfiguration
</code></pre>
<hr>
<pre><code>device Drivers  ---&gt;       设备驱动
[*] Network device support  ---&gt;
    [*]   Ethernet driver support   ---&gt;
        &lt;*&gt;   DM9000 support
</code></pre>
<hr>
<pre><code>File systems  ---&gt;          文件系统支持（支持nfs服务器的客户端）
[*] Network File Systems   ---&gt;
    &lt;*&gt;   NFS client support
    [*]   NFS client support for NFS version 3 (NEW)
    [*]   NFS client support for the NFSv3 ACL protocol extension (NEW)
    [*]   Root file system on NFS (NEW)
</code></pre>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌入式实训 Day2 u-boot的烧写及使用</title>
    <url>/archives/2018/07/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%9E%E8%AE%AD/Day2/</url>
    <content><![CDATA[<h5 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h5><p>1、    ubuntu 12.04发行版<br>2、    u-boot-2010.03<br>3、    FS4412平台</p>
<h5 id="【1】Linux系统移植"><a href="#【1】Linux系统移植" class="headerlink" title="【1】Linux系统移植"></a>【1】Linux系统移植</h5><p>引导启动界面 –&gt; Linux镜像 –&gt; 加载Linux文件系统</p>
<p>引导程序：bootloder<br>uboot    Linux 3.14</p>
<h5 id="【2】SD启动盘制作"><a href="#【2】SD启动盘制作" class="headerlink" title="【2】SD启动盘制作"></a>【2】SD启动盘制作</h5><p>　　a)    将 sdfuse_q拷贝到Linux家目录下<br>　　b)    将SD卡插入电脑并在ubuntu中识别<br>　　c)    进入sdfuse_q目录并执行如下操作将SD卡制作成uboot 2010启动盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo  ./mkuboot.sh  /dev/sdb</span><br></pre></td></tr></table></figure>
<p>　　d)    在SD卡中创建目录sdupdate并把学生资料中的实验代码/第一天/镜像中的u-boot-fs4412.bin(uboot 2013)拷贝到这个目录下</p>
<h5 id="【3】u-boot的烧写"><a href="#【3】u-boot的烧写" class="headerlink" title="【3】u-boot的烧写"></a>【3】u-boot的烧写</h5><p>a)    使用串口线连接板子与电脑，运行串口通信程序putty(实验代码/第一天/工具)<br><img src="/image/2018-7-3/01.png"><br>选择右上角的”Serial”，然后点击左下角的”Serial”<br><img src="/image/2018-7-3/02.png"><br>按照自己的主机的情况（设备管理器中）选择COM口，其他信息必须一直，然后点击open打开串口<br><img src="/image/2018-7-3/03.png"><br>b)    关闭开发板电源，将拨码开关SW1调至(1000)(SD启动模式)<br>c)    将刚才做好的SD启动盘插入开发板SD卡插槽<br>d)    重新打开开发板电源能够看到如下界面<br><img src="/image/2018-7-3/04.png"><br>在倒计时时按任意键让uboot停留在交互模式<br>e)    烧写<br>在终端上执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sdfuse flashall</span></span><br></pre></td></tr></table></figure>
<p>等待终端无输出是表示烧写结束<br>f)    关闭开发板电源，将拨码开关SW1调至0110(EMMC启动模式)后打开电源可以看到如下界面表示烧写成功<br><img src="/image/2018-7-3/05.png"><br>在倒计时时按任意键让uboot停留在交互模式</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>　　整个嵌入式开发大体分为三层，自上而下依次为应用层、驱动层和硬件层，而我们主要做的是应用层。Linux系统的启动需要引导程序的引导，所以在移植系统之前需要对开发板烧写uboot引导程序。对开发板烧写系统与安装Windows系统类似，首先需要制作SD启动盘，在制作好SD启动盘后，将uboot烧写到flash中。这样，开发板在每次上电以后就会自行将uboot从flash中复制到DRAM中，并通过一系列命令引导Linux镜像启动。接下来就是通过tftp传输内核镜像，nfs远程访问文件系统，此为后话。<br><img src="/image/2018-7-3/06.png"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌入式实训 Day1 Linux基础篇</title>
    <url>/archives/2018/07/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%9E%E8%AE%AD/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%9E%E8%AE%AD%20Day1%20Linux%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    <content><![CDATA[<h5 id="【1】linux命令"><a href="#【1】linux命令" class="headerlink" title="【1】linux命令"></a>【1】linux命令</h5><p>   linux@ubuntu:~$  家目录   /home/linux<br>   linux@ubuntu:/$  根目录   </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl+alt+t		<span class="comment">#打开终端</span></span><br><span class="line"><span class="built_in">cd</span>			<span class="comment">#切换到家目录</span></span><br><span class="line"><span class="built_in">cd</span> /			<span class="comment">#切换到根目录（系统文件）</span></span><br><span class="line"><span class="built_in">cd</span> ..			<span class="comment">#切换到上一级</span></span><br><span class="line"><span class="built_in">cd</span> -			<span class="comment">#返回上一级</span></span><br><span class="line">ls  			<span class="comment">#查看当前目录下的所有文件目录  （-list）</span></span><br></pre></td></tr></table></figure>
<p>   目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir + 目录名  					<span class="comment">#创建目录	</span></span><br><span class="line">rmdir + 目录名 （只能删除空目录）			<span class="comment">#删除目录	</span></span><br><span class="line">touch + 文件名 （普通文本，C源码）			<span class="comment">#创建新文件  </span></span><br><span class="line">rm + 文件名 					<span class="comment">#删除文件	</span></span><br><span class="line">cp + 被复制 + 新文件名/目录名（拷贝到此目录）	<span class="comment">#复制文件	</span></span><br><span class="line">mv + 被剪切 + 新文件名/目录名（剪切到此目录）	<span class="comment">#剪切		</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="【2】vim编辑器"><a href="#【2】vim编辑器" class="headerlink" title="【2】vim编辑器"></a>【2】vim编辑器</h5><p>vim编辑器模式：<br>    1.输入模式<br>    2.底行模式<br>在底行模式下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shift + : wq		#保存退出</span><br><span class="line">	  q!		#不保存退出</span><br><span class="line">	  w		#只保存</span><br><span class="line">	  行号 		#光标跳转到某一行</span><br><span class="line">	  &#x2F; + 关键字 #查找关键字  N</span><br><span class="line">yy 	#复制一行</span><br><span class="line">dd	#剪切一行</span><br><span class="line">p  	#粘贴</span><br></pre></td></tr></table></figure>
<p>底行模式 ——&gt; 输入模式  i<br>输入模式 ——&gt; 底行模式  Esc</p>
<h5 id="【3】gcc编译器"><a href="#【3】gcc编译器" class="headerlink" title="【3】gcc编译器"></a>【3】gcc编译器</h5><pre><code>gcc + xxx.c   #生成a.out(elf格式)
执行 ./a.out 
自定义生成的文件名：  gcc  xxx.c  -o（生成新文件） xxx
gcc -o2 -Wall xxx.c -o xxx   #打开全部警告
</code></pre>
<p>gcc编译流程： 预处理、编译、汇编、链接<br>预处理：xxx.c —&gt; xxx.i(预处理文件)<br>编译：    xxx.i —&gt; xxx.s(汇编文件)<br>汇编：    xxx.s —&gt; xxx.o(可重定向文件、执行文件的依赖文件)<br>链接：    xxx.o —&gt; xxx(可执行文件,elf格式)</p>
<p>单步编译处理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">预处理:  gcc -E xxx.c -o xxx.i</span><br><span class="line">编译：	gcc -S xxx.c -o xxx.s</span><br><span class="line">汇编：	gcc -c xxx.s -o xxx.o</span><br><span class="line">链接：	gcc xxx.o -o xxx</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>NIOS II 定时器的使用</title>
    <url>/archives/2018/05/NIOS-II-%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h5 id="初始化，即对定时器进行清零"><a href="#初始化，即对定时器进行清零" class="headerlink" title="初始化，即对定时器进行清零"></a>初始化，即对定时器进行清零</h5><p>清零的方式有两种，一种是用定时器清零，另外一种是使用库函数，主要是io.h这个库里面的。<br>这里主要讲一下使用库函数，主要原因是使用库函数使得程序的可读性更强。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER1_BASE,0x00);  //清除timer1中断标志位</span><br></pre></td></tr></table></figure>
<p>其中TIMER1_BASE是定时器1的基地址，在system.h这个头文件中。</p>
<h5 id="设置定时周期"><a href="#设置定时周期" class="headerlink" title="设置定时周期"></a>设置定时周期</h5><p>同样建议使用库函数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER1_BASE,timer_prd[j]);      //低16位</span><br><span class="line">IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER1_BASE,timer_prd[j]&gt;&gt;16);  //高16位</span><br></pre></td></tr></table></figure>
<p>其中XXX_PERIODL和XXX_PERIODH分别为定时器的周期的低十六位和高十六位。这里需要提醒大家的一点是，主要不要超出16位，否则会丢失高位。</p>
<h5 id="启动定时器"><a href="#启动定时器" class="headerlink" title="启动定时器"></a>启动定时器</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER1_BASE,0X07);  //启动timer1 </span><br></pre></td></tr></table></figure>
<p>这里0x07主要是对某一些特定的标志位进行操作，主要起启动定时器。</p>
<h5 id="注册定时器。"><a href="#注册定时器。" class="headerlink" title="注册定时器。"></a>注册定时器。</h5><p>这里的注册需要解释一下，这个可能和os有点联系，nios后台有个操作系统，当定时器中断产生以后，后台就会响应这个中断，也就是执行这个中断对应的中断函数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alt_irq_register(TIMER1_IRQ,NULL,ISR_timer1);   //注册timer1</span><br></pre></td></tr></table></figure>
<p>这里的ISR_timer1就是定时器1对应的中断函数，ISR_timer1是这个中断函数对应的函数名称。（函数名实质就是一个指针，只不过这个指针是函数指针）。<br>我们可以中断函数中进行一些短时的操作，不宜进行复杂超过，主要是考虑到时间过长会引起定时器溢出。</p>
<h5 id="设置定时器中断函数"><a href="#设置定时器中断函数" class="headerlink" title="设置定时器中断函数"></a>设置定时器中断函数</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">static void ISR_timer1(void) </span><br><span class="line">&#123;</span><br><span class="line">	XXX;</span><br><span class="line">	XXXXX;</span><br><span class="line">	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER1_BASE,0x00);  //清除timer1中断标志位</span><br><span class="line">	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE,0x05);  //启动定时器</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在中断响应函数中，不要忘记在执行结束前，添加定时器清零以及启动定时器。便于定时器下一次响应，否则定时器就仅仅执行一次。</p>
<h5 id="简单定时器中断示例："><a href="#简单定时器中断示例：" class="headerlink" title="简单定时器中断示例："></a>简单定时器中断示例：</h5><p><em>用定时器控制的流水灯</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;system.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;altera_avalon_pio_regs.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;altera_avalon_timer_regs.h&gt;</span></span><br><span class="line"></span><br><span class="line">static void Timer_ISR_Init(void);</span><br><span class="line">static void Timer_Irq_Handler(void);</span><br><span class="line">int count=0;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Hello from Nios II!\n&quot;</span>);</span><br><span class="line">	int LED_code=0x00;</span><br><span class="line">	Timer_ISR_Init();</span><br><span class="line">	<span class="keyword">while</span>(1)</span><br><span class="line">	&#123;</span><br><span class="line">		switch(count)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> 0: LED_code=0X01; <span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 1: LED_code=0X02; <span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 2: LED_code=0X04; <span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 3: LED_code=0X08; <span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 4: LED_code=0X10; <span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 5: LED_code=0X20; <span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 6: LED_code=0X40; <span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 7: LED_code=0X80; <span class="built_in">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, LED_code);</span><br><span class="line">		<span class="keyword">if</span>(count == 7) count=0;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void Timer_ISR_Init(void)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n  Timer Initial! \n&quot;</span>);</span><br><span class="line">	// 清除定时器中断标志寄存器</span><br><span class="line">	IOWR_ALTERA_AVALON_TIMER_STATUS( TIMER_BASE,0x00);</span><br><span class="line">	//设置定时周期</span><br><span class="line">	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE,50000);</span><br><span class="line">	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE,100);</span><br><span class="line">	//启动定时器</span><br><span class="line">	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE,0x05);</span><br><span class="line">	//注册中断</span><br><span class="line">	alt_irq_register(TIMER_IRQ,NULL,Timer_Irq_Handler);</span><br><span class="line">&#125;</span><br><span class="line">static void Timer_Irq_Handler(void)</span><br><span class="line">&#123;</span><br><span class="line">	count++;</span><br><span class="line">	// 清除定时器中断标志寄存器</span><br><span class="line">	IOWR_ALTERA_AVALON_TIMER_STATUS( TIMER_BASE,0x00);</span><br><span class="line">	//启动定时器</span><br><span class="line">	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE,0x05);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h5 id="友情链接："><a href="#友情链接：" class="headerlink" title="友情链接："></a>友情链接：</h5><p>1、<a href="https://www.cnblogs.com/logic3/">大西瓜FPGA</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>NIOS-II</tag>
        <tag>定时器</tag>
      </tags>
  </entry>
  <entry>
    <title>NIOS II中PIO有关寄存器</title>
    <url>/archives/2018/05/NIOS-II%E4%B8%ADPIO%E6%9C%89%E5%85%B3%E5%AF%84%E5%AD%98%E5%99%A8/</url>
    <content><![CDATA[<h5 id="寄存器映射"><a href="#寄存器映射" class="headerlink" title="寄存器映射"></a>寄存器映射</h5><p>Avalon-MM主外设，例如CPU，通过4个32位寄存器控制并与PIO核通信，假定PIO核的I/O端口被配置为n位宽度。如下图：</p>
<p> <img src="/image/2018-5-25/01.png" alt="PIO核的寄存器映射"><br>(1) 该寄存器是否存在取决于硬件配置，如果寄存器不存在，读寄存器返回一个未定义的值，写寄存器无影响。<br>(2) 写任何值到edgecapture，会清0所有位。</p>
<h5 id="数据寄存器"><a href="#数据寄存器" class="headerlink" title="数据寄存器"></a>数据寄存器</h5><p>读从Data寄存器返回的呈现在输入端口的值。如果PIO核硬件被配置为output-only（只输出）模式，读data寄存器将返回一个未定义的值。<br>写data寄存器将存储值到寄存器中以驱动输出端口。如果PIO核硬件被配置为input-only（只输入）模式，写data寄存器无影响。如果PIO核硬件被配置为双向模式，则仅当在  direction（方向）寄存器中相应的位被置1（输出）时，被寄存的值才会出现在输出端口上。</p>
<h5 id="方向寄存器"><a href="#方向寄存器" class="headerlink" title="方向寄存器"></a>方向寄存器</h5><p>direction（方向）寄存器控制每个PIO端口的数据方向，假定端口是双向的，当位n在方向寄存器中被置1时，端口n在data（数据）寄存器的相应位驱动输出值。<br>仅当PIO核硬件被配置为双向模式时，direction寄存器才存在。模式（输入、输出或双向）在系统创建时指定，并且在运行时不能修改。在输入或输出模式中，direction寄存器不存在，在这种情况下，读direction返回一个未定义的值，写direction无影响。<br>       在复位后，方向寄存器的所有位都是0，所以所有双向I/O端口都被配置为输入。如果那些PIO端口被连接到FPGA器件的引脚，则这些引脚保持高阻状态。在双向模式，为了改变PIO端口的方向，要重新编程direction寄存器。</p>
<h5 id="中断屏蔽寄存器"><a href="#中断屏蔽寄存器" class="headerlink" title="中断屏蔽寄存器"></a>中断屏蔽寄存器</h5><p>设置interruptmask Register（中断屏蔽寄存器）中的位为1允许相应PIO输入端口中断。中断行为取决于PIO核的硬件配置。见“中断行为”。<br>       interruptmask寄存器仅当硬件被配置为能产生IRQ时才存在。如果PIO核不能产生IRQ，读interruptmask返回一个未定义的值，写interruptmask无影响。<br>       在复位后，所有interruptmask寄存器的位都是0，所以所有的PIO端口中断都被禁用。</p>
<h5 id="边沿捕获寄存器"><a href="#边沿捕获寄存器" class="headerlink" title="边沿捕获寄存器"></a>边沿捕获寄存器</h5><p>如果edgecapture（边沿捕获）寄存器中的位n被设置位1，在输入端口n上的边沿将会被探测到。Avalon-MM主外设能够读edgecapture寄存器以确定是否有一个边沿出现在任何PIO输入端口。写任何值到edgecapture将清除寄存器中的所有位。<br>要探测的边沿的类型在系统创建时就已经选定在硬件中。edgecapture寄存器只能在硬件被配置位捕获边沿时存在。如果PIO核没有被配置成捕获边沿，读edgecapture将返回一个未定义的值，写edgecapture无影响。</p>
<h5 id="输出置位和输出清零寄存器"><a href="#输出置位和输出清零寄存器" class="headerlink" title="输出置位和输出清零寄存器"></a>输出置位和输出清零寄存器</h5><p>你可以使用输出置位和输出清零（outset和outclear）寄存器置1或清0指定的输出端口的位。例如，要设置输出端口的第六位，可以写0x40（0100 0000）到outset寄存器。写0x08（0000 1000）到outclear寄存器可清0输出端口的第3位。<br>这些寄存器只有在选择Enable individual bit set/clear output register寄存器为开启时才可用。</p>
<h5 id="中断行为"><a href="#中断行为" class="headerlink" title="中断行为"></a>中断行为</h5><p>PIO核输出一个能够连接到任意在系统中的主外设的单个IRQ信号。主外设既能够读dagta寄存器，也能够edgecapture寄存器以确定那一个输入端口引发了中断。<br>当硬件被配置为电平敏感中断时，当data和interruptmask寄存器中相应的位是1时，IRQ被确定。当硬件被配置为边沿敏感中断时，当edgecapture和interruptmask寄存器中相应的位是1时，IRQ被确定。IRQ保持确定直到禁用interruptmask中相应的位或者写edgecapture相应的位以明确地确认为止。</p>
<p>参考：<br>Chentuo’s<a href="http://www.cnblogs.com/chentuo/articles/1427283.html">《PIO Core》</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>NIOS-II</tag>
        <tag>寄存器</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客编写与部署</title>
    <url>/archives/2018/05/Hexo%E5%8D%9A%E5%AE%A2/Hexo%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99%E4%B8%8E%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>通过前面<a href="https://ljone.top/2018/05/19/%E5%88%A9%E7%94%A8Hexo%E5%85%8D%E8%B4%B9%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B(1)/">《利用Hexo免费创建个人博客》</a>的步骤，已经完成了基础环境的搭建以及 Hexo 的安装，那么接下来就跟大家说一说怎样利用 Hexo 编写博客然后将其部署到云端。</p>
<h4 id="一、博客编写"><a href="#一、博客编写" class="headerlink" title="一、博客编写"></a>一、博客编写</h4><p>在命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;file_name&quot;</span></span><br></pre></td></tr></table></figure>
<p>打开 Hexo 目录下的 source 文件夹，所有的文章都会以md形式保存在 _post 文件夹中，刚刚新建的文件也在其中。<br>也可以直接在 _post 文件夹中新建md类型的文档，便可以生成新的文章。<br>新建的文章头需要添加一些yml信息，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: hello-world         <span class="comment">#在此处添加文章标题</span></span><br><span class="line">date: 2018-05-21 17:55:53  <span class="comment">#在此处添加编辑文章时间</span></span><br><span class="line">categories: Exercise       <span class="comment">#在此处添加文章分类</span></span><br><span class="line">tags:                      <span class="comment">#在此处添加文章标签</span></span><br></pre></td></tr></table></figure>
<p>在.md文件的开头添加上面代码，是为了让 Hexo 框架在生成网页的时候，设置相应的参数。</p>
<p>如果你使用过<code>MarkDown </code>来写博客文章的话，接下来就简单多了，没使用过也没关系，推荐大家一个编辑工具<a href="https://maxiang.io/">马克飞象</a>，具体语法推荐参考： <a href="https://www.appinn.com/markdown/">https://www.appinn.com/markdown/</a> </p>
<p>在编辑器里面写好文章后，复制或另存为.md文件,将其存放在 _post 文件夹中。在 Hexo 文件夹中点击鼠标右键选择 Git Bash 再次输入以下内容便可重新在本地启动项目，在浏览器访问就可以看到之前添加的文章。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo sever  <span class="comment">#可简写为 hexo s</span></span><br></pre></td></tr></table></figure>
<p>也可以输入下面的指令进行调试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure>
<h4 id="二、部署到云端"><a href="#二、部署到云端" class="headerlink" title="二、部署到云端"></a>二、部署到云端</h4><h5 id="1、账号准备"><a href="#1、账号准备" class="headerlink" title="1、账号准备"></a>1、账号准备</h5><p>发布到云端之前需要有一个 <a href="https://github.com/">GitHub</a> 账号或者 <a href="https://gitee.com/">Gitee</a>（码云）账号，没有的话到官网申请一个便是，二者并没有太大的区别。<br>主要区别在于 GitHub 服务器在国外因为众所周知的原因在国内访问速度相对较慢，而且不支持免费创建私人仓库，而码云原依托于开源中国访问速度快而且可以免费创建私人仓库，最重要的一点是它还支持中文（坏笑）。二者在使用上基本一致，到底使用哪一个，请自行斟酌。</p>
<h5 id="2、创建仓库"><a href="#2、创建仓库" class="headerlink" title="2、创建仓库"></a>2、创建仓库</h5><p>编者在这以码云为例，注册好账号以后点击创建项目，新建一个项目如下图所示<br><img src="/image/2018-5-21/01.jpg"><br>填写与你账号名称相同的项目名，然后点击<code>创建</code>，然后会看到以下界面<br><img src="/image/2018-5-21/02.jpg"><br>接着点击上图中出现的 <code>克隆/下载</code>,选中 HTTPS 点击右侧的 <code>复制</code>按钮，将地址复制下来，后续会使用到。</p>
<h5 id="3、本地配置及部署"><a href="#3、本地配置及部署" class="headerlink" title="3、本地配置及部署"></a>3、本地配置及部署</h5><p>配置项目根目录_config.yml 文件，修改<code>Deloyment</code>的值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git   </span><br><span class="line">  repo:  <span class="comment">#此处改为之前复制的地址</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>注意： repo  后的地址是之前在码云上面创建项目后获取的地址</p>
<p>尤其要注意的是<code>在每一个冒号的后面都必须要有一个空格</code>，此警告适用于此文件的每一处，一定要谨记！！！否则会出现一些莫名其妙的报错。<br>修改后如下图所示：<br><img src="/image/2018-5-21/03.jpg"><br>具体配置可参考<a href="https://hexo.io/docs/configuration.html"> Hexo 官方文档</a>。</p>
<p>修改完成后，使用git将项目中public 文件夹下的文件管理起来，并推送到码云上。<br>这里借用一个插件来帮助我们完成，在 Hexo 文件夹下安装 hexo-deployer-git。安装代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>安装完成后，继续在命令行窗口执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate    <span class="comment">#生成静态 HTML 文件</span></span><br><span class="line">hexo deploy      <span class="comment">#部署到云端</span></span><br></pre></td></tr></table></figure>
<p>命令也可以合成一步进行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>
<p>第一次执行上述命令会有如下提示：<br><img src="/image/2018-5-21/07.jpg"><br>在命令行执行以下命令，按要求填写自己的邮箱和姓名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;you@example.com&quot;</span>  <span class="comment">#你的邮箱</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span>         <span class="comment">#你的姓名</span></span><br></pre></td></tr></table></figure>
<p>然后在弹出的对话框中填写自己的Gitee或GitHub账号和密码即可<br><img src="/image/2018-5-21/08.jpg"><br>在首次执行 <code>deploy</code>时会弹出一个对话框，输入你码云对应的账号和密码即可。<br>部署好后，登录码云会看到之前创建的项目中出现了本地 Public 文件夹中的内容，这时表明部署成功。</p>
<h5 id="4、启动-Pages-功能"><a href="#4、启动-Pages-功能" class="headerlink" title="4、启动 Pages 功能"></a>4、启动 Pages 功能</h5><p>接下来点击<code>服务</code><br><img src="/image/2018-5-21/04.jpg"><br>然后再点击<code>Gitee Pages</code><br><img src="/image/2018-5-21/05.jpg"><br>接着点击<code>启动服务</code>，便会看到以下画面：<br><img src="/image/2018-5-21/06.jpg"><br>到此就可以通过图中红圈部分的地址访问博客的主页了，效果和在本地启动时一样。以后只要将写好的文章放入Hexo项目的source 目录下的_posts 文件夹中，再按照之前步骤就可以更新博客了，行动起来吧！</p>
<p>后续还会有进阶内容如：更换主题、绑定独立域名等<br>敬请期待！</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10+Ubuntu 双系统安装教程</title>
    <url>/archives/2018/05/Win10+Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>最近上课要用Linux，准备从头记录一次Ubuntu的安装过程。如果有刚学的可以看看..同时接受大佬建议和指出错误…</p>
<h3 id="一-安装ubuntu之前"><a href="#一-安装ubuntu之前" class="headerlink" title="一.安装ubuntu之前"></a>一.安装ubuntu之前</h3><p>1.你需要下载UtralISO<br><img src="/image/2018-5-20/01.jpg"><br>下载试用版即可<br>2.下载Ubuntu桌面版，推荐下载此18.04LTS版本，能从新的上手就尽量从新的上手使用。<br><img src="/image/2018-5-20/02.jpg"><br>下载ubuntu-18.04-desktop-amd64.iso版本。<br>下面的ubuntu-18.04-live-server-amd64.iso是服务器版本的。<br>等待下载完成之后，你会看到如下一个文件。<br><img src="/image/2018-5-20/03.jpg"></p>
<h3 id="二．通过UtralISO制作启动盘"><a href="#二．通过UtralISO制作启动盘" class="headerlink" title="二．通过UtralISO制作启动盘"></a>二．通过UtralISO制作启动盘</h3><p>1.打开UtralISO点击试用即可。<br>在UtralISO主界面中点击文件—打开—选择你之前下载的ubuntu镜像文件。选中红框区域。<br><img src="/image/2018-5-20/04.jpg"><br>点击启动—写入硬盘映像<br>默认即可，无需设置<br><img src="/image/2018-5-20/05.jpg"><br>点击写入，等待写入完成。</p>
<h3 id="三．分区"><a href="#三．分区" class="headerlink" title="三．分区"></a>三．分区</h3><p>假设你的电脑和我一样是windows10那么可以打开磁盘管理<br><img src="/image/2018-5-20/06.jpg"><br>从你的机械硬盘或者固态硬盘中分配一块区域（最好大于40G）出来。让这块区域显示为未分配状态即可。具体ubuntu系统分区会在安装ubuntu系统的时候在这块windows10未分配区域操作。所以你在windows里面是无法访问你的ubuntu系统磁盘的。</p>
<h3 id="四．安装Ubuntu"><a href="#四．安装Ubuntu" class="headerlink" title="四．安装Ubuntu"></a>四．安装Ubuntu</h3><p>1.重启电脑进入BIOS我的电脑是F2进入<br>2.把你的U盘设置成第一启动盘<br>3.移动到sava and restar回车点击YES<br>4.等待自动重启<br>5.在选项里面选择Install Ubuntu<br>6.进入安装引导界面：<br><img src="/image/2018-5-20/07.jpg"><br>选择中文吧，虽然选择英文比较好,但是初期使用还是使用中文吧…<br>2.选择安装方式：<br><img src="/image/2018-5-20/08.jpg"><br>这个应该很好看懂…装双系统的话就选择其他选项<br>3.分区（最重要的一步）在ubuntu安装界面中，有一个磁盘管理的界面<br>选择你之前在windows下未分配的磁盘分区<br>点击左下角的+号<br>先创建主分区 /分区<br>我的是创建20G 主分区 空间起始位置 Ext4日志文件系统 /<br><img src="/image/2018-5-20/09.jpg"><br>创建swap分区 8000M 主分区 空间起始位置 用于交换空间 ok<br>创建boot分区 2048M 逻辑分区 空间起始位置 Ext4日志文件 系统挂载点 /boot<br>创建home分区 未分配的区域全部分区至home分区 逻辑分区 空间起始位置 Ext4日志文件 系统挂载点 /home<br>接下来就简单了，安装即可 设置用户名密码登陆系统<br><img src="/image/2018-5-20/10.jpg"></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Hexo免费创建个人博客</title>
    <url>/archives/2018/05/Hexo%E5%8D%9A%E5%AE%A2/%E5%88%A9%E7%94%A8Hexo%E5%85%8D%E8%B4%B9%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>相信很多朋友正在为了不知道怎么创建私人博客而苦恼、不知所措，那么读完这篇文章你会发现新天地。本篇文章将带领你基于码云利用HEXO创建个人博客，让我们一起来学习吧！<br><img src="/image/05.gif"></p>
<h4 id="什么是-Hexo-？"><a href="#什么是-Hexo-？" class="headerlink" title="什么是 Hexo ？"></a>什么是 Hexo ？</h4><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<p>安装之前需要准备以下文件：<br><a href="http://nodejs.cn/download/">Node.js环境</a><br><a href="https://git-scm.com/downloads">Git</a><br>准备好后，接下来就可以进行安装</p>
<h4 id="一、配置环境"><a href="#一、配置环境" class="headerlink" title="一、配置环境"></a>一、配置环境</h4><h5 id="1、安装Node-js环境"><a href="#1、安装Node-js环境" class="headerlink" title="1、安装Node.js环境"></a>1、安装Node.js环境</h5><p>因为博主使用的 Windows 系统，在这就以 Windows 系统举例。</p>
<p>Windows 用户可以到官网根据自己的系统版本下载  <a href="http://nodejs.cn/download/">.msi包</a>  进行程序自动安装。下载好后打开界面如下 ：<br><img src="/image/2018-5-19/01.jpg"><br>保持默认设置即可，一路点击Next，安装很快就结束了。 然后我们检查一下是不是要求的组件都安装好了，同时按下Win和R，打开运行窗口：<br><img src="/image/2018-5-19/02.jpg"><br>在新打开的窗口中输入 cmd，敲击回车，打开命令行界面，并输入以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>结果如下图所示，则说明安装正确，可以进行下一步了；如不正确，则需要回头检查自己的安装过程是否有错误。<br><img src="/image/2018-5-19/03.jpg"></p>
<h5 id="2、安装Git"><a href="#2、安装Git" class="headerlink" title="2、安装Git"></a>2、安装Git</h5><p>下载 Git 根据自己的系统版本选择下载 <a href="https://git-scm.com/download/win">Git for Windows Setup </a>  下载好后进入安装界面，如下图<br><img src="/image/2018-5-19/04.jpg"><br>和Node.js一样，大部分设置都只需要保持默认，但是出于我们操作方便考虑，建议 PATH 选项按照下图选择。按照图中进行选择，将会使得Git安装程序在系统 PATH 中加入 Git 的相关路径，使得你可以在 CMD 界面下调用Git，不用打开 Git Bash。否则只有在Git Bash中才能进行Git的相关操作。<br><img src="/image/2018-5-19/05.jpg"><br>安装完成后，在命令行中输入一下内容，检验安装是否完成。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>
<p>结果如下：<br><img src="/image/2018-5-19/06.jpg"><br>注：有的同学可能遇到（1）CMD中提示“‘git’不是内部或外部命令，也不是可运行的程序”或（2）Git Bash 中提示”bash: npm: command not found“的情况，这时就需要自己配置系统环境变量了，步骤如下<br>1.找到你电脑上的git安装中bin的路径，如：E:\安装\Git\Git\bin；同时，找到git安装路径中git-core的位置，如：E:\安装\Git\Git\mingw64\libexec\git-core；<br>2.配置系统变量。右键“计算机”-&gt;“属性”-&gt;“高级系统设置”-&gt;“环境变量”-&gt;在下方的“系统变量”中找到“path”-&gt;选中“path”并选择“编辑”-&gt;然后新建分别将1中找到的bin和git-core路径复制到其中-&gt;保存并退出。<br>3.设置完成之后，重新执行git命令，如果还是报错，重启一下电脑就OK啦</p>
<h4 id="二、配置-Hexo"><a href="#二、配置-Hexo" class="headerlink" title="二、配置 Hexo"></a>二、配置 Hexo</h4><h5 id="1、安装-Hexo"><a href="#1、安装-Hexo" class="headerlink" title="1、安装 Hexo"></a>1、安装 Hexo</h5><p>在自己认为合适的地方创建一个文件夹，然后在文件夹空白处按住 Shift + 鼠标右键，然后点击在此处打开命令行窗口（如果在安装 Git 时 PATH 选择没有按照图示操作，那么需要在文件夹空白处点击右键，选择 Git Bash 代替命令行进行如下操作），并输入以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli g</span><br><span class="line">npm i -g hexo //上一条命令失败的情况下，执行这条命令代替</span><br></pre></td></tr></table></figure>
<p>然后你会看到如下画面<br><img src="/image/2018-5-19/07.jpg"><br>稍等片刻，等待安装完成。如果出现 WARN ，不用担心，一般不会影响使用。然后再依次输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo --save</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure>
<p>如果看到如图所示内容说明安装成功。<br><img src="/image/2018-5-19/08.jpg"></p>
<h5 id="2、初始化Hexo"><a href="#2、初始化Hexo" class="headerlink" title="2、初始化Hexo"></a>2、初始化Hexo</h5><p>Hexo 安装完成后，请依次输入下列命令，Hexo 将会在指定文件夹中新建所需要的文件夹。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br></pre></td></tr></table></figure>
<p>然后再输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>npm将会自动安装你需要的组件，只需要等待npm操作完成即可。当前文件夹内生成的目录如下<br><img src="/image/2018-5-19/09.jpg"></p>
<h5 id="3、体验-Hexo-魅力（本地运行）"><a href="#3、体验-Hexo-魅力（本地运行）" class="headerlink" title="3、体验 Hexo 魅力（本地运行）"></a>3、体验 Hexo 魅力（本地运行）</h5><p>上面的步骤执行完后，在 folder 目录下打开命令行执行以下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server         <span class="comment">#运行本地服务,简写为，hexo s</span></span><br></pre></td></tr></table></figure>
<p>命令行会提示以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<p>最后在浏览器中打开 <a href="http://localhost:4000/">http://localhost:4000/</a> 你将会看到期待已久的画面：<br><img src="/image/2018-5-19/10.jpg"><br>到此为止 Hexo 的安装就算完美结束了，尽情的享用吧！</p>
<p>接下来就是如何部署到云端以及文章的编写，如果您还想继续学习请看 <a href="https://ljone.top/2018/05/21/Hexo%E5%8D%9A%E5%AE%A2/Hexo%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99%E4%B8%8E%E9%83%A8%E7%BD%B2/">《Hexo博客编写与部署》</a></p>
<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><h6 id="Hexo官方网站"><a href="#Hexo官方网站" class="headerlink" title="Hexo官方网站"></a><a href="https://hexo.io/">Hexo官方网站</a></h6>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Sunrise</title>
    <url>/archives/2018/05/Sunrise/</url>
    <content><![CDATA[<p><img src="/image/00.gif">  </p>
<blockquote class="blockquote-center">
<p>欢迎来到我的博客<br>这是我的第一条博客！</p>

</blockquote>

]]></content>
  </entry>
  <entry>
    <title>hello-world</title>
    <url>/archives/2018/05/Hello_world/</url>
    <content><![CDATA[<p> <img src="/image/03.jpg"></p>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>示例</category>
      </categories>
      <tags>
        <tag>示例</tag>
      </tags>
  </entry>
</search>
