<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Deepin + Python 编译环境搭建</title>
    <url>/archives/2020/04/Deepin-Python%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h5 id="一、Linux使用"><a href="#一、Linux使用" class="headerlink" title="一、Linux使用"></a>一、Linux使用</h5><p>1、安装软件：sudo apt-get install 软件名  <br>2、卸载软件：sudo apt autoremove 软件名        同时删除无用依赖<br>3、启动器重启：sudo service lightdm restart<br>4、dpkg：<br> &emsp;&emsp;&emsp;&emsp;-i：安装软件包；  <br> &emsp;&emsp;&emsp;&emsp;-r：删除软件包；<br> &emsp;&emsp;&emsp;&emsp;-P：删除软件包的同时删除其配置文件；<br> &emsp;&emsp;&emsp;&emsp;-L：显示于软件包关联的文件；<br> &emsp;&emsp;&emsp;&emsp;-l：显示已安装软件包列表；<br> &emsp;&emsp;&emsp;&emsp;–unpack：解开软件包；<br> &emsp;&emsp;&emsp;&emsp;-c：显示软件包内文件列表；<br> &emsp;&emsp;&emsp;&emsp;–confiugre：配置软件包。<br>5、sudo apt-get update &amp;&amp; sudo apt-get dist-upgrade -y<br>6、<a href="https://www.cnblogs.com/xuxinstyle/p/9609551.html">linux常用命令（50个）</a><br>7、<a href="https://qv2ray.github.io/">VPN工具：Qv2ray</a></p>
<h5 id="二、Python开发环境搭建"><a href="#二、Python开发环境搭建" class="headerlink" title="二、Python开发环境搭建"></a>二、Python开发环境搭建</h5><p>1、<a href="https://jingyan.baidu.com/article/ff42efa97dc89c809f22023f.html">Deepin V20 升级python版本</a><br>2、<a href="https://blog.csdn.net/zhangziju/article/details/80398908">Deepin之anaconda和pycharm的安装</a><br>3、<a href="https://blog.csdn.net/wanttifa/article/details/83995460">Deepin(linux)下安装anaconda3</a><br>4、<a href="https://blog.csdn.net/Just_youHG/article/details/104686642">解决激活anaconda Linux终端出现”(base)”问题</a></p>
]]></content>
      <categories>
        <category>Deepin</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Python</tag>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 连接 MySQL 数据库</title>
    <url>/archives/2021/11/Cpp%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h1 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h1><p><strong>环境：</strong>VS2019、MySQL8.0.26 x86_64</p>
<p>通过 MySQL 官方 API 连接数据库。</p>
<h1 id="2、添加-MySQL-连接器头文件"><a href="#2、添加-MySQL-连接器头文件" class="headerlink" title="2、添加 MySQL 连接器头文件"></a>2、添加 MySQL 连接器头文件</h1><p>新建 C++ 项目，将项目平台改为 <strong>x64</strong></p>
<p><img src="/image/2021-11/C%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/image-1.jpg"></p>
<p>在项目名称处点击右键，选择 <code>属性</code> -&gt; <code>C/C++</code> -&gt; <code>常规</code>，在附加包含目录处添加连接器头文件路径：</p>
<p><code>C:\Program Files\MySQL\MySQL Server 8.0\include</code>，路径根据自己安装目录进行调整。</p>
<p><img src="/image/2021-11/C%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/image-2.jpg"></p>
<h1 id="3、添加静态和动态库依赖"><a href="#3、添加静态和动态库依赖" class="headerlink" title="3、添加静态和动态库依赖"></a>3、添加静态和动态库依赖</h1><p>在路径<code>C:\Program Files\MySQL\MySQL Server 8.0\lib</code>下找到 <code>libmysql.lib</code> 和 <code>libmysql.dll</code>文件，将其复制到新建项目的根目录中。</p>
<p>在项目中添加以下代码，使项目链接到<code>libmysql.lib</code>库</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;libmysql.lib&quot;</span>)</span></span><br></pre></td></tr></table></figure>

<h1 id="4、利用官方-API-连接数据库"><a href="#4、利用官方-API-连接数据库" class="headerlink" title="4、利用官方 API 连接数据库"></a>4、利用官方 API 连接数据库</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mysql.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;libmysql.lib&quot;</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建mysql实例</span></span><br><span class="line">    MYSQL mysql;</span><br><span class="line">    <span class="built_in">mysql_init</span>(&amp;mysql);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">mysql_real_connect</span>(&amp;mysql, <span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>, <span class="string">&quot;itcast&quot;</span>, <span class="number">3306</span>, <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;数据库连接失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;数据库连接成功&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止中文乱码,设置读取格式为 GBK</span></span><br><span class="line">    <span class="built_in">mysql_query</span>(&amp;mysql, <span class="string">&quot;set names gbk&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入数据</span></span><br><span class="line">    string insertStr = <span class="string">&quot;INSERT INTO people(name,age) VALUES(&#x27;测试1&#x27;, 12)&quot;</span>;</span><br><span class="line">    <span class="comment">// 执行SQL语句</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_query</span>(&amp;mysql, insertStr.<span class="built_in">c_str</span>()))</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;插入失败：&quot;</span> &lt;&lt; <span class="built_in">mysql_error</span>(&amp;mysql) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;插入成功...&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询数据</span></span><br><span class="line">    string sql = <span class="string">&quot;select * from people&quot;</span>;</span><br><span class="line">    <span class="comment">// 执行SQL语句</span></span><br><span class="line">    <span class="built_in">mysql_query</span>(&amp;mysql, sql.<span class="built_in">c_str</span>()); </span><br><span class="line">    <span class="comment">// 获取查询内容</span></span><br><span class="line">    MYSQL_RES* result = <span class="built_in">mysql_store_result</span>(&amp;mysql); </span><br><span class="line">    <span class="comment">// 打印查询行数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;数据行数：&quot;</span> &lt;&lt; result-&gt;row_count &lt;&lt; endl; </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;数据行数：&quot;</span> &lt;&lt; <span class="built_in">mysql_affected_rows</span>(&amp;mysql) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 遍历数据</span></span><br><span class="line">    <span class="keyword">while</span> (MYSQL_ROW row = <span class="built_in">mysql_fetch_row</span>(result)) <span class="comment">//获取整条数据内容</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; result-&gt;field_count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">NULL</span> == row[i])</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot; NULL&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; row[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="5、MySQL-常用-API-函数"><a href="#5、MySQL-常用-API-函数" class="headerlink" title="5、MySQL 常用 API 函数"></a>5、MySQL 常用 API 函数</h1><table>
<thead>
<tr>
<th>函数名</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>mysql_affected_rows()</td>
<td>返回被最新的UPDATE, DELETE或INSERT查询影响的行数。</td>
</tr>
<tr>
<td>mysql_close()</td>
<td>关闭一个服务器连接。</td>
</tr>
<tr>
<td>mysql_connect()</td>
<td>连接一个MySQL服务器。该函数不推荐；使用mysql_real_connect()代替。</td>
</tr>
<tr>
<td>mysql_change_user()</td>
<td>改变在一个打开的连接上的用户和数据库。</td>
</tr>
<tr>
<td>mysql_create_db()</td>
<td>创建一个数据库。该函数不推荐；而使用SQL命令CREATE DATABASE。</td>
</tr>
<tr>
<td>mysql_data_seek()</td>
<td>在一个查询结果集合中搜寻一任意行。</td>
</tr>
<tr>
<td>mysql_debug()</td>
<td>用给定字符串做一个DBUG_PUSH。</td>
</tr>
<tr>
<td>mysql_drop_db()</td>
<td>抛弃一个数据库。该函数不推荐；而使用SQL命令DROP DATABASE。</td>
</tr>
<tr>
<td>mysql_dump_debug_info()</td>
<td>让服务器将调试信息写入日志文件。</td>
</tr>
<tr>
<td>mysql_eof()</td>
<td>确定是否已经读到一个结果集合的最后一行。这功能被反对; mysql_errno()或mysql_error()可以相反被使用。</td>
</tr>
<tr>
<td>mysql_errno()</td>
<td>返回最近被调用的MySQL函数的出错编号。</td>
</tr>
<tr>
<td>mysql_error()</td>
<td>返回最近被调用的MySQL函数的出错消息。</td>
</tr>
<tr>
<td>mysql_escape_string()</td>
<td>用在SQL语句中的字符串的转义特殊字符。</td>
</tr>
<tr>
<td>mysql_fetch_field()</td>
<td>返回下一个表字段的类型。</td>
</tr>
<tr>
<td>mysql_fetch_field_direct ()</td>
<td>返回一个表字段的类型，给出一个字段编号。</td>
</tr>
<tr>
<td>mysql_fetch_fields()</td>
<td>返回一个所有字段结构的数组。</td>
</tr>
<tr>
<td>mysql_fetch_lengths()</td>
<td>返回当前行中所有列的长度。</td>
</tr>
<tr>
<td>mysql_fetch_row()</td>
<td>从结果集合中取得下一行。</td>
</tr>
<tr>
<td>mysql_field_seek()</td>
<td>把列光标放在一个指定的列上。</td>
</tr>
<tr>
<td>mysql_field_count()</td>
<td>返回最近查询的结果列的数量。</td>
</tr>
<tr>
<td>mysql_field_tell()</td>
<td>返回用于最后一个mysql_fetch_field()的字段光标的位置。</td>
</tr>
<tr>
<td>mysql_free_result()</td>
<td>释放一个结果集合使用的内存。</td>
</tr>
<tr>
<td>mysql_get_client_info()</td>
<td>返回客户版本信息。</td>
</tr>
<tr>
<td>mysql_get_host_info()</td>
<td>返回一个描述连接的字符串。</td>
</tr>
<tr>
<td>mysql_get_proto_info()</td>
<td>返回连接使用的协议版本。</td>
</tr>
<tr>
<td>mysql_get_server_info()</td>
<td>返回服务器版本号。</td>
</tr>
<tr>
<td>mysql_info()</td>
<td>返回关于最近执行得查询的信息。</td>
</tr>
<tr>
<td>mysql_init()</td>
<td>获得或初始化一个MYSQL结构。</td>
</tr>
<tr>
<td>mysql_insert_id()</td>
<td>返回有前一个查询为一个AUTO_INCREMENT列生成的ID。</td>
</tr>
<tr>
<td>mysql_kill()</td>
<td>杀死一个给定的线程。</td>
</tr>
<tr>
<td>mysql_list_dbs()</td>
<td>返回匹配一个简单的正则表达式的数据库名。</td>
</tr>
<tr>
<td>mysql_list_fields()</td>
<td>返回匹配一个简单的正则表达式的列名。</td>
</tr>
<tr>
<td>mysql_list_processes()</td>
<td>返回当前服务器线程的一张表。</td>
</tr>
<tr>
<td>mysql_list_tables()</td>
<td>返回匹配一个简单的正则表达式的表名。</td>
</tr>
<tr>
<td>mysql_num_fields()</td>
<td>返回一个结果集合重的列的数量。</td>
</tr>
<tr>
<td>mysql_num_rows()</td>
<td>返回一个结果集合中的行的数量。</td>
</tr>
<tr>
<td>mysql_options()</td>
<td>设置对mysql_connect()的连接选项。</td>
</tr>
<tr>
<td>mysql_ping()</td>
<td>检查对服务器的连接是否正在工作，必要时重新连接。</td>
</tr>
<tr>
<td>mysql_query()</td>
<td>执行指定为一个空结尾的字符串的SQL查询。</td>
</tr>
<tr>
<td>mysql_real_connect()</td>
<td>连接一个MySQL服务器。</td>
</tr>
<tr>
<td>mysql_real_query()</td>
<td>执行指定为带计数的字符串的SQL查询。</td>
</tr>
<tr>
<td>mysql_reload()</td>
<td>告诉服务器重装授权表。</td>
</tr>
<tr>
<td>mysql_row_seek()</td>
<td>搜索在结果集合中的行，使用从mysql_row_tell()返回的值。</td>
</tr>
<tr>
<td>mysql_row_tell()</td>
<td>返回行光标位置。</td>
</tr>
<tr>
<td>mysql_select_db()</td>
<td>连接一个数据库。</td>
</tr>
<tr>
<td>mysql_shutdown()</td>
<td>关掉数据库服务器。</td>
</tr>
<tr>
<td>mysql_stat()</td>
<td>返回作为字符串的服务器状态。</td>
</tr>
<tr>
<td>mysql_store_result()</td>
<td>检索一个完整的结果集合给客户。</td>
</tr>
<tr>
<td>mysql_thread_id()</td>
<td>返回当前线程的ID。</td>
</tr>
<tr>
<td>mysql_use_result()</td>
<td>初始化一个一行一行地结果集合的检索。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 部署至 Vercel(Zeit)</title>
    <url>/archives/2021/02/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3Vercel-Zeit/</url>
    <content><![CDATA[<p>近日由于更换电脑便把博客迁移到了新电脑，同时想将博客提交到百度进行收录。由于不可知的原因 2015 年 GitHub 禁止了百度的爬虫，搜了搜没找到什么好方案，发现大多都是 GitHub 和 Coding 双部署。新版Coding与腾讯云融合可以实现自动部署、自定义域名和 CDN 加速，但由于没有进行域名备案，Coding 会将资源部署在国外再由CDN加速回国，这样速度反而更慢了（域名备案除外）。同时，由于 Coding 部署利用了腾讯的 OSS 和 CDN 资源需要收费，而我作为新版 Coding 的新用户不能向老用户一样白嫖，这显然不符合我白嫖走天下的理念。经过一番寻找最终找到了部署至 Vercel 的方案。</p>
<h2 id="Coding部署"><a href="#Coding部署" class="headerlink" title="Coding部署"></a>Coding部署</h2><p>关于Coding部署可以参考这一篇：<a href="https://asurada.zone/post/CODING-Pages-Upgrade-To-TencentCloud/">CODING Pages 静态网站升级腾讯云新版踩坑小记</a></p>
<div class="note info"><h2 id="Vercel"><a href="#Vercel" class="headerlink" title="Vercel"></a>Vercel</h2><p>原名 Zeit，服务器在美国，在港台有 CDN 节点，提供自定义 xxx.now.sh 和 xxx.vercel.app 域名，且支持免费绑定个人域名，同时可以解决百度爬虫问题。最大的好处就是可以绑定 GitHub 账号，由 GitHub 托管Hexo博客源码，Vercel 导入博客源码，当检测到仓库改动后自动进行部署。</p>
</div>
<p>下面进行 Vercel 部署的介绍。</p>
<h2 id="仓库导入与部署"><a href="#仓库导入与部署" class="headerlink" title="仓库导入与部署"></a>仓库导入与部署</h2><div class="note warning"><p>在开始之前，请准备</p>
<ul>
<li>一个 GitHub 账号（注意不能绑有 QQ 邮箱）</li>
<li>一个存储 Hexo 生成文件的 Git 仓库(不能是私人库)</li>
</ul>
</div>

<p>进入 <a href="https://vercel.com/">Vercel</a> 官网，注册账号，点击 <code>Continue with GitHub</code>。</p>
<p><img src="/image/2021-02/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3Vercel-Zeit/image-0.png"></p>
<p>过程中会弹出如下对话框,此图截取自参考链接 3 的博主文章，他给的建议是<code>All repo</code>,但我选择的<code>Only</code>,只不过再导入 GitHub 其他项目时需要重新走一遍流程，可自己根据情况选择。</p>
<p><img src="/image/2021-02/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3Vercel-Zeit/image-4.png"></p>
<p>授权完成后，选择 <code>Import Git Repository</code> ，点击 <code>Continue</code>，进入如下界面。输入你的仓库 url（https）。</p>
<p><img src="/image/2021-02/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3Vercel-Zeit/image-1.png"></p>
<p>填写仓库名，点击 <code>Continue</code>,创建Vercel仓库用于存储导入的文件。</p>
<p><img src="/image/2021-02/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3Vercel-Zeit/image-2.png"></p>
<p>填写项目名称选择框架，默认即可，点击<code>Deploy</code>。</p>
<p><img src="/image/2021-02/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3Vercel-Zeit/image-3.png"></p>
<p>等待 Vercel 部署完成，点击 <code>Visit</code>即可浏览。</p>
<p><img src="/image/2021-02/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3Vercel-Zeit/image-5.png" alt=" ">   </p>
<p>在首页可以看到 Vercel 提供的两个域名，如果没有自定义域名需求的话到这里就可以结束了。</p>
<p><img src="/image/2021-02/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3Vercel-Zeit/image-6.png" alt=" "></p>
<h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>进入项目设置，找到 <code>Domains</code>，在 <code>Add</code> 前面的输入框内输入要自定义的域名地址，再点击 <code>Add</code> 即可。</p>
<p><img src="/image/2021-02/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3Vercel-Zeit/image-7.png" alt=" "></p>
<p>在下方会显示 <code>Invalid Configuration</code> 提示，并给出两种验证方式。</p>
<p><img src="/image/2021-02/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3Vercel-Zeit/image-8.png"></p>
<p>此时，可以选择添加 DNS 解析记录</p>
<blockquote>
<p>添加 A 类型，主机记录 <code>@ </code>，记录值为 <code>76.76.21.21</code>。<br>添加 CNAME 类型，主机记录 <code>@ </code>，记录值为 <code>cname.vercel-dns.com</code>。</p>
</blockquote>
<p>添加完成后，稍等片刻便会在自定义域名下方显示通过的提示，有时解析正常 仍然显示 <code>Invalid Configuration</code>，只要可以通过自定义域名访问博客便可忽略。</p>
<p><img src="/image/2021-02/Hexo%E9%83%A8%E7%BD%B2%E8%87%B3Vercel-Zeit/image-9.png"></p>
<p>到这里，整个部署过程就结束了。</p>
<hr>
<p>参考：<br>1、<a href="http://hongwan.xyz/netlify%E5%92%8Ccloudflare%E4%B8%8Ezeit%E6%90%AD%E9%85%8Djsdelivr%E7%BB%99Hexo%E5%8D%9A%E5%AE%A2cdn%E5%8A%A0%E9%80%9F%E5%AF%B9%E6%AF%94.html">netlify和cloudflare与zeit搭配jsdelivr给Hexo博客cdn加速对比</a><br>2、<a href="https://zpjiang.me/2020/01/15/let-baidu-index-github-page">解决百度爬虫无法爬取 Github Pages 个人博客的问题</a><br>3、<a href="https://snow.js.org/hexo-vercel/">Hexo：将你的博客部署到 Vercel</a>（主题不错）</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 使用</title>
    <url>/archives/2021/02/Markdown%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="1、代码增减标识"><a href="#1、代码增减标识" class="headerlink" title="1、代码增减标识"></a>1、代码增减标识</h2><p>代码块中有代码增减替换时，着色标识，格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```diff</span><br><span class="line">+ 增加</span><br><span class="line">- 删减</span><br><span class="line">``&#x27;</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+ 增加</span></span><br><span class="line"><span class="deletion">- 删减</span></span><br></pre></td></tr></table></figure>
<h2 id="2、代码块折叠"><a href="#2、代码块折叠" class="headerlink" title="2、代码块折叠"></a>2、代码块折叠</h2><p>当文章中添加代码过长时，会对文章的阅读和显示造成不好的体验，折叠代码块是一种很好的解决方式<br>书写格式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">summary</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">	详细内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>原理：采用 HTML5 中的新标签，因此这不能算是对 Next 主题的美化。<br><code>summary</code> 标签作为 <code>details</code> 元素的标题，<code>details</code> 元素用于描述有关文档或文档片段的详细信息。<br>与 <code>details</code> 一起使用,标题是可见的，当用户点击标题时会显示出详细信息。</p>
<p>缺点：兼容性不好，只有 Chrome 以及 Safari 6 支持 <code>summary</code> 标签。</p>
<p>效果如下：</p>
<details>
  <summary>点击显/隐代码</summary>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;site-author site-overview-item animated&quot; itemprop=&quot;author&quot; itemscope itemtype=&quot;http://schema.org/Person&quot;&gt;</span><br><span class="line">  &#123;%- if theme.avatar.url %&#125;</span><br><span class="line"><span class="addition">+    &lt;a href=&quot;/&quot;&gt;</span></span><br><span class="line">      &lt;img class=&quot;site-author-image&quot; itemprop=&quot;image&quot; alt=&quot;&#123;&#123; author &#125;&#125;&quot;</span><br><span class="line">        src=&quot;&#123;&#123; url_for(theme.avatar.url or theme.images + &#x27;/avatar.gif&#x27;) &#125;&#125;&quot;&gt;</span><br><span class="line"><span class="addition">+    &lt;/a&gt;</span></span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line">  &lt;p class=&quot;site-author-name&quot; itemprop=&quot;name&quot;&gt;&#123;&#123; author &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;div class=&quot;site-description&quot; itemprop=&quot;description&quot;&gt;&#123;&#123; description &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="3、区块"><a href="#3、区块" class="headerlink" title="3、区块"></a>3、区块</h2><p>效果：</p>
<blockquote>
<p>区块引用<br>菜鸟教程<br>学的不仅是技术更是梦想</p>
</blockquote>
<p>参考：<a href="https://www.runoob.com/markdown/md-block.html">Markdown区块语法</a></p>
<hr>
<h2 id="4、字体大小、颜色、居中"><a href="#4、字体大小、颜色、居中" class="headerlink" title="4、字体大小、颜色、居中"></a>4、字体大小、颜色、居中</h2><p>格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;font face=&quot;黑体&quot;&gt;我是黑体&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt;</span><br><span class="line">&lt;center&gt;需要居中的字体&lt;/center&gt;</span><br><span class="line">&lt;center&gt;&lt;font color=red size=7 face=&quot;微软雅黑&quot;&gt;我是居中的7号红色微软雅黑&lt;/font&gt;&lt;/center&gt;</span><br></pre></td></tr></table></figure>
<p>Size：规定文本的尺寸大小。值：从 1 到 7 的数字。</p>
<p>效果：</p>
<ul>
<li><font face="黑体">我是黑体字</font></li>
<li><font face="微软雅黑">我是微软雅黑</font></li>
<li><font face="STCAIYUN">我是华文彩云</font></li>
<li><center><font color=red size=7 face="微软雅黑">我是居中的7号红色微软雅黑</font></center></li>
</ul>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>PCB 快捷键</title>
    <url>/archives/2020/05/AD%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>走线状态，+tab，改变线宽；<br>2d线状态，+shift+tab ，切换倒角方式；<br>crtl+左键 ：高亮选中网络；</p>
<p>左下角双击，层管理，显示或隐藏某一层；</p>
<span id="more"></span>

<p>旋转：Space；</p>
<p>X轴镜像：X；<br>Y轴镜像：Y；<br>板层管理：L；<br>栅格设置：G；<br>单位进制切换：Q；</p>
<p>对齐-水平：A，D；<br>对齐-垂直：A，I，I，Enter；<br>对齐-顶部：A，T；<br>对齐-底部：A，B；<br>对齐-左侧：A，L；<br>对齐-右侧：A，R；</p>
<p>设计-类设置：D，C;<br>设计-板层管理：D，K；<br>设计-规则：D，R；<br>设计-规则向导：D，W；<br>设计-拷贝ROOM格式：D，M，C；<br>设计-放置ROOM：D，M，R；<br>设计-根据选择对象定义板子形状：D，S，D；<br>设计-编辑网络：D，N，N；</p>
<p>编辑-删除：E，D；<br>编辑-切断轨迹：E，K；<br>编辑-设定原点：E，O，S；<br>编辑-复位原点：E，O，R；</p>
<p>移动-移动：M，M；<br>移动-拖拽：M，D；<br>移动-器件：M，C；<br>移动-打断走线：M，B；<br>移动-器件翻转板层：M，I；</p>
<p>网络-显示网络：N，S，N；<br>网络-显示器件：N，S，O；<br>网络-显示全部：N，S，A；<br>网络-隐藏网络：N，H，N；<br>网络-隐藏器件：N，H，O；<br>网络-隐藏全部：N，H，A；</p>
<p>放置-坐标：P，O；<br>放置-焊盘：P，P；<br>放置-字符：P，S；<br>放置-过孔：P，V；  走线快速添加过孔：ctrl+shift+滚轮；<br>放置-多边形：P，R；<br>放置-填充：P，F；<br>放置-敷铜：P，G；<br>放置-线性尺寸：P，D，L；<br>放置-走线：P，T；<br>放置-差分对布线：P，I；<br>放置-多根布线：P，M，Enter；</p>
<p>选择-全选：S，A；<br>选择-线选：S，L；<br>选择-区域（内部）：S，I；</p>
<p>选择-区域（外部）：S，O；</p>
<p>选择网络：S,P;</p>
<p>工具-交叉探测对象：T，C；(+Ctrl:跳转到目标文件)            <br>工具-泪滴选项：T，E；<br>工具-设计规则检查：T，D；<br>工具-复位错误标志：T，M；<br>工具-从选择元素创建板剪切：T，V，B<br>工具-网络等长调节：T，R；</p>
<p>取消布线-全部：U，A；<br>取消布线-网络：U，N；<br>取消布线-连接：U，C；<br>取消布线-器件：U，O；<br>取消布线-ROOM：U，R；</p>
<p>查看-合适区域：V，A；<br>查看-翻转板子：V，B；<br>查看-适合文件：V，D；<br>查看-合适板子：V，F；<br>查看-合适图纸：V，H；</p>
<p>测距：Ctrl + M；</p>
<p>清除蒙板：  Shift + Ｃ；<br>查找相似对象： Shift + F;<br>显示走线长度：  Shift + G；<br>单层显示：  Shift + S；<br>改变走线模式：Shift + Space；</p>
<p>切换二维显示：2(主键盘)；<br>切换三维显示：3(主键盘)；<br>顶层底层切换：*(小键盘 )；<br>板层切换： +/-(小键盘)；<br>智能走线：在放置走线状态，+ Ctrl；</p>
<p>移动多边形顶点：右键，Y，V；<br>器件联合：右键，U；</p>
<p>增大弧度：长按 &gt;；<br>减小弧度：长按 &lt;；<br>减小多根交互式布线间距：长按Shift + B；<br>增加多根交互式布线间距：长按Shift + B；</p>
<p>3D模式下：<br>0°旋转：0（主键盘）；<br>90°旋转：9（主键盘）；</p>
<p>布等长线状态下：<br>增加蛇形线拐角弧度：1；<br>减少蛇形线拐角弧度：2；<br>增加蛇形线宽度：3；<br>减少蛇形线宽度：4；<br>增加蛇形线拐角振幅：。；<br>减少蛇形线拐角振幅：，；</p>
<p>从原理图选择PCB器件： T，S；</p>
<p>封装管理器：T，G；<br>强制标注所有器件：T，N；</p>
<p>查看-合适区域：V，A；<br>查看-适合文件：V，D；<br>查看-合适板子：V，F；</p>
<p>清除蒙板：  Shift + Ｃ；</p>
<p>改变走线模式：Shift + Space</p>
<p>Altium Designer14 SCH快捷键：</p>
<p>对齐-水平：A，D；<br>对齐-垂直：A，I；<br>对齐-顶部：A，T；<br>对齐-底部：A，B；<br>对齐-左侧：A，L；<br>对齐-右侧：A，R；</p>
<p>打破线：E，W；</p>
<p>放置总线：P，B；<br>放置总线入库：P，U；<br>放置节点：P，J；<br>放置网络标号：P，N；<br>放置端口：P，R；<br>放置字符串：P，T；<br>放置走线：P，W；<br>放置线：P，D，L；<br>放置差分对标示：P，V，F；<br>放置Blanket：P，V，L；<br>放置网络类：P，V，C；</p>
<hr>
<p>补充：<br>1、重新定义板框：D+S+D</p>
<p>​        设置原点，在左下角：编辑-&gt;原点-&gt;设置</p>
<p>2、智能粘贴：E+A</p>
<p>3、阵列式粘贴：E+Y</p>
<p>4、1inches（英寸）=1000mil（密耳）=25.4mm</p>
<p>5、单位转换：Ctrl + Q</p>
<p>6、单层显示：Shift + S</p>
<p>7、高亮：</p>
<p>​            选中：Ctrl +  左键</p>
<p>​            取消：Shift + C</p>
<p>​            预览： Shift </p>
<p>8、隐藏显示网络：N</p>
<p>9、器件位号位置：A + P</p>
<p>10、线选：S + L</p>
<p>11、测量： Ctrl +  M</p>
<p><img src="C:\Users\92545\AppData\Roaming\Typora\typora-user-images\image-20200622090457431.png" alt="image-20200622090457431"></p>
<p>Gerber_BoardOutline.GKO：边框文件。PCB板厂根据该文件进行切割板形状<br>Gerber_TopLayer.GTL：PCB顶层。顶层铜箔层。<br>Gerber_BottomLayer.GBL：PCB底层。底层铜箔层。<br>Gerber_Inner1.G1，Gerber_Inner2.G1… ：这个Inner x是指内层铜箔层。<br>Gerber_TopSilkLayer.GTO：顶层丝印层。<br>Gerber_BottomSilkLayer.GBO：底层丝印层。<br>Gerber_TopSolderMaskLayer.GTS：顶层阻焊层。也可以称之为开窗层，默认板子盖油，在该层绘制的元素对应到顶层的区域则不盖油。<br>Gerber_BottomSolderMaskLayer.GBS：底层阻焊。也可以称之为开窗层，<br>Gerber_Drill_PTH.DRL：金属化钻孔层。这个文件显示的是内壁需要金属化的钻孔位置。<br>Gerber_Drill_NPTH.DRL：非金属化钻孔层。这个文件显示的是内壁不需要金属化的钻孔位置，比如通孔。<br>Gerber_TopPasteMaskLayer.GTP：顶层助焊层。开钢网用。<br>Gerber_BottomPasteMaskLayer.GBP：底层助焊层。开钢网用。<br>ReadOnly.TopAssembly：顶层装配层。仅做读取，不影响PCB制造。<br>ReadOnly.BottomAssembly：底层装配层。仅做读取，不影响PCB制造。<br>ReadOnly.Mechanical：机械层。记录在PCB设计里面在机械层记录的信息，仅做信息记录用。<br>————————————————<br>原文链接：<a href="https://blog.csdn.net/RootCode/java/article/details/81910519">https://blog.csdn.net/RootCode/java/article/details/81910519</a></p>
]]></content>
      <tags>
        <tag>PCB</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 数学公式语法(转载)</title>
    <url>/archives/2020/04/Markdown-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%AF%AD%E6%B3%95(%E8%BD%AC%E8%BD%BD)/</url>
    <content><![CDATA[<h4 id="上标、下标与组合"><a href="#上标、下标与组合" class="headerlink" title="上标、下标与组合"></a>上标、下标与组合</h4><ol>
<li>上标符号，符号：<code>^</code>，如：$x^4$</li>
<li>下标符号，符号：<code>_</code>，如：$x_1$</li>
<li>组合符号，符号：<code>&#123;&#125;</code>，如：${16}<em>{8}O{2+}</em>{2}$</li>
</ol>
<h4 id="汉字、字体与格式"><a href="#汉字、字体与格式" class="headerlink" title="汉字、字体与格式"></a>汉字、字体与格式</h4><ol>
<li>汉字形式，符号：<code>\mbox&#123;&#125;</code>，如：$V_{\mbox{初始}}$</li>
<li>字体控制，符号：<code>\displaystyle \frac&#123;x+y&#125;&#123;y+z&#125;</code>，如：$\displaystyle \frac{x+y}{y+z}$</li>
<li>下划线符号，符号：<code>\underline</code>，如：$\underline{x+y}$</li>
<li>标签，符号<code>\tag&#123;数字&#125;</code>，如：$\tag{11}$</li>
<li>上大括号，符号：<code>\overbrace&#123;算式&#125;</code>，如：$\overbrace{a+b+c+d}^{2.0}$</li>
<li>下大括号，符号：<code>\underbrace&#123;算式&#125;</code>，如：$a+\underbrace{b+c}_{1.0}+d$</li>
<li>上位符号，符号：<code>\stacrel&#123;上位符号&#125;&#123;基位符号&#125;</code>，如：$\vec{x}\stackrel{\mathrm{def}}{=}{x_1,\dots,x_n}$</li>
</ol>
<h4 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h4><ol>
<li>两个quad空格，符号：<code>\qquad</code>，如：$x \qquad y$</li>
<li>quad空格，符号：<code>\quad</code>，如：$x \quad y$</li>
<li>大空格，符号<code>\</code>，如：$x \  y$</li>
<li>中空格，符号<code>\:</code>，如：$x : y$</li>
<li>小空格，符号<code>\,</code>，如：$x , y$</li>
<li>没有空格，符号<code> </code>，如：$xy$</li>
<li>紧贴，符号<code>\!</code>，如：$x ! y$</li>
</ol>
<h4 id="定界符与组合"><a href="#定界符与组合" class="headerlink" title="定界符与组合"></a>定界符与组合</h4><ol>
<li>括号，符号：<code>（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)</code>，如：$（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)$</li>
<li>中括号，符号：<code>[]</code>，如：$[x+y]$</li>
<li>大括号，符号：<code>\&#123; \&#125;</code>，如：${x+y}$</li>
<li>自适应括号，符号：<code>\left \right</code>，如：$\left(x\right)$，$\left(x{yz}\right)$</li>
<li>组合公式，符号：<code>&#123;上位公式 \choose 下位公式&#125;</code>，如：${n+1 \choose k}={n \choose k}+{n \choose k-1}$</li>
<li>组合公式，符号：<code>&#123;上位公式 \atop 下位公式&#125;</code>，如：$\sum_{k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots=n}A_{k_0}A_{k_1}\cdots$</li>
</ol>
<h4 id="行内与独行"><a href="#行内与独行" class="headerlink" title="行内与独行"></a>行内与独行</h4><ol>
<li>行内公式：将公式插入到本行内，符号：<code>$公式内容$</code>，如：$xyz$</li>
<li>独行公式：将公式插入到新的一行内，并且居中，符号：<code>$$公式内容$$</code>，如：$$xyz$$</li>
</ol>
<h4 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h4><ol>
<li>加法运算，符号：<code>+</code>，如：$x+y=z$</li>
<li>减法运算，符号：<code>-</code>，如：$x-y=z$</li>
<li>加减运算，符号：<code>\pm</code>，如：$x \pm y=z$</li>
<li>减加运算，符号：<code>\mp</code>，如：$x \mp y=z$</li>
<li>乘法运算，符号：<code>\times</code>，如：$x \times y=z$</li>
<li>点乘运算，符号：<code>\cdot</code>，如：$x \cdot y=z$</li>
<li>星乘运算，符号：<code>\ast</code>，如：$x \ast y=z$</li>
<li>除法运算，符号：<code>\div</code>，如：$x \div y=z$</li>
<li>斜法运算，符号：<code>/</code>，如：$x/y=z$</li>
<li>分式表示，符号：<code>\frac&#123;分子&#125;&#123;分母&#125;</code>，如：$\frac{x+y}{y+z}$</li>
<li>分式表示，符号：<code>&#123;分子&#125; \voer &#123;分母&#125;</code>，如：${x+y} \over {y+z}$</li>
<li>绝对值表示，符号：<code>||</code>，如：$|x+y|$</li>
</ol>
<h4 id="高级运算"><a href="#高级运算" class="headerlink" title="高级运算"></a>高级运算</h4><ol>
<li>平均数运算，符号：<code>\overline&#123;算式&#125;</code>，如：$\overline{xyz}$</li>
<li>开二次方运算，符号：<code>\sqrt</code>，如：$\sqrt x$</li>
<li>开方运算，符号：<code>\sqrt[开方数]&#123;被开方数&#125;</code>，如：$\sqrt[3]{x+y}$</li>
<li>对数运算，符号：<code>\log</code>，如：$\log(x)$</li>
<li>极限运算，符号：<code>\lim</code>，如：$\lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li>
<li>极限运算，符号：<code>\displaystyle \lim</code>，如：$\displaystyle \lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li>
<li>求和运算，符号：<code>\sum</code>，如：$\sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li>
<li>求和运算，符号：<code>\displaystyle \sum</code>，如：$\displaystyle \sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li>
<li>积分运算，符号：<code>\int</code>，如：$\int^{\infty}_{0}{xdx}$</li>
<li>积分运算，符号：<code>\displaystyle \int</code>，如：$\displaystyle \int^{\infty}_{0}{xdx}$</li>
<li>微分运算，符号：<code>\partial</code>，如：$\frac{\partial x}{\partial y}$</li>
<li>矩阵表示，符号：<code>\begin&#123;matrix&#125; \end&#123;matrix&#125;</code>，如：$\left[ \begin{matrix} 1 &amp;2 &amp;\cdots &amp;4\5 &amp;6 &amp;\cdots &amp;8\vdots &amp;\vdots &amp;\ddots &amp;\vdots\13 &amp;14 &amp;\cdots &amp;16\end{matrix} \right]$</li>
</ol>
<h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><ol>
<li>等于运算，符号：<code>=</code>，如：$x+y=z$</li>
<li>大于运算，符号：<code>&gt;</code>，如：$x+y&gt;z$</li>
<li>小于运算，符号：<code>&lt;</code>，如：$x+y&lt;z$</li>
<li>大于等于运算，符号：<code>\geq</code>，如：$x+y \geq z$</li>
<li>小于等于运算，符号：<code>\leq</code>，如：$x+y \leq z$</li>
<li>不等于运算，符号：<code>\neq</code>，如：$x+y \neq z$</li>
<li>不大于等于运算，符号：<code>\ngeq</code>，如：$x+y \ngeq z$</li>
<li>不大于等于运算，符号：<code>\not\geq</code>，如：$x+y \not\geq z$</li>
<li>不小于等于运算，符号：<code>\nleq</code>，如：$x+y \nleq z$</li>
<li>不小于等于运算，符号：<code>\not\leq</code>，如：$x+y \not\leq z$</li>
<li>约等于运算，符号：<code>\approx</code>，如：$x+y \approx z$</li>
<li>恒定等于运算，符号：<code>\equiv</code>，如：$x+y \equiv z$</li>
</ol>
<h4 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h4><ol>
<li>属于运算，符号：<code>\in</code>，如：$x \in y$</li>
<li>不属于运算，符号：<code>\notin</code>，如：$x \notin y$</li>
<li>不属于运算，符号：<code>\not\in</code>，如：$x \not\in y$</li>
<li>子集运算，符号：<code>\subset</code>，如：$x \subset y$</li>
<li>子集运算，符号：<code>\supset</code>，如：$x \supset y$</li>
<li>真子集运算，符号：<code>\subseteq</code>，如：$x \subseteq y$</li>
<li>非真子集运算，符号：<code>\subsetneq</code>，如：$x \subsetneq y$</li>
<li>真子集运算，符号：<code>\supseteq</code>，如：$x \supseteq y$</li>
<li>非真子集运算，符号：<code>\supsetneq</code>，如：$x \supsetneq y$</li>
<li>非子集运算，符号：<code>\not\subset</code>，如：$x \not\subset y$</li>
<li>非子集运算，符号：<code>\not\supset</code>，如：$x \not\supset y$</li>
<li>并集运算，符号：<code>\cup</code>，如：$x \cup y$</li>
<li>交集运算，符号：<code>\cap</code>，如：$x \cap y$</li>
<li>差集运算，符号：<code>\setminus</code>，如：$x \setminus y$</li>
<li>同或运算，符号：<code>\bigodot</code>，如：$x \bigodot y$</li>
<li>同与运算，符号：<code>\bigotimes</code>，如：$x \bigotimes y$</li>
<li>实数集合，符号：<code>\mathbb&#123;R&#125;</code>，如：<code>\mathbb&#123;R&#125;</code></li>
<li>自然数集合，符号：<code>\mathbb&#123;Z&#125;</code>，如：<code>\mathbb&#123;Z&#125;</code></li>
<li>空集，符号：<code>\emptyset</code>，如：$\emptyset$</li>
</ol>
<h4 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h4><ol>
<li>无穷，符号：<code>\infty</code>，如：$\infty$</li>
<li>虚数，符号：<code>\imath</code>，如：$\imath$</li>
<li>虚数，符号：<code>\jmath</code>，如：$\jmath$</li>
<li>数学符号，符号<code>\hat&#123;a&#125;</code>，如：$\hat{a}$</li>
<li>数学符号，符号<code>\check&#123;a&#125;</code>，如：$\check{a}$</li>
<li>数学符号，符号<code>\breve&#123;a&#125;</code>，如：$\breve{a}$</li>
<li>数学符号，符号<code>\tilde&#123;a&#125;</code>，如：$\tilde{a}$</li>
<li>数学符号，符号<code>\bar&#123;a&#125;</code>，如：$\bar{a}$</li>
<li>矢量符号，符号<code>\vec&#123;a&#125;</code>，如：$\vec{a}$</li>
<li>数学符号，符号<code>\acute&#123;a&#125;</code>，如：$\acute{a}$</li>
<li>数学符号，符号<code>\grave&#123;a&#125;</code>，如：$\grave{a}$</li>
<li>数学符号，符号<code>\mathring&#123;a&#125;</code>，如：$\mathring{a}$</li>
<li>一阶导数符号，符号<code>\dot&#123;a&#125;</code>，如：$\dot{a}$</li>
<li>二阶导数符号，符号<code>\ddot&#123;a&#125;</code>，如：$\ddot{a}$</li>
<li>上箭头，符号：<code>\uparrow</code>，如：$\uparrow$</li>
<li>上箭头，符号：<code>\Uparrow</code>，如：$\Uparrow$</li>
<li>下箭头，符号：<code>\downarrow</code>，如：$\downarrow$</li>
<li>下箭头，符号：<code>\Downarrow</code>，如：$\Downarrow$</li>
<li>左箭头，符号：<code>\leftarrow</code>，如：$\leftarrow$</li>
<li>左箭头，符号：<code>\Leftarrow</code>，如：$\Leftarrow$</li>
<li>右箭头，符号：<code>\rightarrow</code>，如：$\rightarrow$</li>
<li>右箭头，符号：<code>\Rightarrow</code>，如：$\Rightarrow$</li>
<li>底端对齐的省略号，符号：<code>\ldots</code>，如：$1,2,\ldots,n$</li>
<li>中线对齐的省略号，符号：<code>\cdots</code>，如：$x_1^2 + x_2^2 + \cdots + x_n^2$</li>
<li>竖直对齐的省略号，符号：<code>\vdots</code>，如：$\vdots$</li>
<li>斜对齐的省略号，符号：<code>\ddots</code>，如：$\ddots$</li>
</ol>
<h4 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h4><table>
<thead>
<tr>
<th>字母</th>
<th>实现</th>
<th>字母</th>
<th>实现</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td><code>A</code></td>
<td>α</td>
<td><code>\alhpa</code></td>
</tr>
<tr>
<td>B</td>
<td><code>B</code></td>
<td>β</td>
<td><code>\beta</code></td>
</tr>
<tr>
<td>Γ</td>
<td><code>\Gamma</code></td>
<td>γ</td>
<td><code>\gamma</code></td>
</tr>
<tr>
<td>Δ</td>
<td><code>\Delta</code></td>
<td>δ</td>
<td><code>\delta</code></td>
</tr>
<tr>
<td>E</td>
<td><code>E</code></td>
<td>ϵ</td>
<td><code>\epsilon</code></td>
</tr>
<tr>
<td>Z</td>
<td><code>Z</code></td>
<td>ζ</td>
<td><code>\zeta</code></td>
</tr>
<tr>
<td>H</td>
<td><code>H</code></td>
<td>η</td>
<td><code>\eta</code></td>
</tr>
<tr>
<td>Θ</td>
<td><code>\Theta</code></td>
<td>θ</td>
<td><code>\theta</code></td>
</tr>
<tr>
<td>I</td>
<td><code>I</code></td>
<td>ι</td>
<td><code>\iota</code></td>
</tr>
<tr>
<td>K</td>
<td><code>K</code></td>
<td>κ</td>
<td><code>\kappa</code></td>
</tr>
<tr>
<td>Λ</td>
<td><code>\Lambda</code></td>
<td>λ</td>
<td><code>\lambda</code></td>
</tr>
<tr>
<td>M</td>
<td><code>M</code></td>
<td>μ</td>
<td><code>\mu</code></td>
</tr>
<tr>
<td>N</td>
<td><code>N</code></td>
<td>ν</td>
<td><code>\nu</code></td>
</tr>
<tr>
<td>Ξ</td>
<td><code>\Xi</code></td>
<td>ξ</td>
<td><code>\xi</code></td>
</tr>
<tr>
<td>O</td>
<td><code>O</code></td>
<td>ο</td>
<td><code>\omicron</code></td>
</tr>
<tr>
<td>Π</td>
<td><code>\Pi</code></td>
<td>π</td>
<td><code>\pi</code></td>
</tr>
<tr>
<td>P</td>
<td><code>P</code></td>
<td>ρ</td>
<td><code>\rho</code></td>
</tr>
<tr>
<td>Σ</td>
<td><code>\Sigma</code></td>
<td>σ</td>
<td><code>\sigma</code></td>
</tr>
<tr>
<td>T</td>
<td><code>T</code></td>
<td>τ</td>
<td><code>\tau</code></td>
</tr>
<tr>
<td>Υ</td>
<td><code>\Upsilon</code></td>
<td>υ</td>
<td><code>\upsilon</code></td>
</tr>
<tr>
<td>Φ</td>
<td><code>\Phi</code></td>
<td>ϕ</td>
<td><code>\phi</code></td>
</tr>
<tr>
<td>X</td>
<td><code>X</code></td>
<td>χ</td>
<td><code>\chi</code></td>
</tr>
<tr>
<td>Ψ</td>
<td><code>\Psi</code></td>
<td>ψ</td>
<td><code>\psi</code></td>
</tr>
<tr>
<td>Ω</td>
<td><code>\v</code></td>
<td>ω</td>
<td><code>\omega</code></td>
</tr>
</tbody></table>
<p>原文链接：<a href="https://www.jianshu.com/p/e74eb43960a1">https://www.jianshu.com/p/e74eb43960a1</a></p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>NIOS II中PIO有关寄存器</title>
    <url>/archives/2018/05/NIOS-II%E4%B8%ADPIO%E6%9C%89%E5%85%B3%E5%AF%84%E5%AD%98%E5%99%A8/</url>
    <content><![CDATA[<h5 id="寄存器映射"><a href="#寄存器映射" class="headerlink" title="寄存器映射"></a>寄存器映射</h5><p>Avalon-MM主外设，例如CPU，通过4个32位寄存器控制并与PIO核通信，假定PIO核的I/O端口被配置为n位宽度。如下图：</p>
<p> <img src="/image/2018-5-25/01.png" alt="PIO核的寄存器映射"><br>(1) 该寄存器是否存在取决于硬件配置，如果寄存器不存在，读寄存器返回一个未定义的值，写寄存器无影响。<br>(2) 写任何值到edgecapture，会清0所有位。</p>
<h5 id="数据寄存器"><a href="#数据寄存器" class="headerlink" title="数据寄存器"></a>数据寄存器</h5><p>读从Data寄存器返回的呈现在输入端口的值。如果PIO核硬件被配置为output-only（只输出）模式，读data寄存器将返回一个未定义的值。<br>写data寄存器将存储值到寄存器中以驱动输出端口。如果PIO核硬件被配置为input-only（只输入）模式，写data寄存器无影响。如果PIO核硬件被配置为双向模式，则仅当在  direction（方向）寄存器中相应的位被置1（输出）时，被寄存的值才会出现在输出端口上。</p>
<h5 id="方向寄存器"><a href="#方向寄存器" class="headerlink" title="方向寄存器"></a>方向寄存器</h5><p>direction（方向）寄存器控制每个PIO端口的数据方向，假定端口是双向的，当位n在方向寄存器中被置1时，端口n在data（数据）寄存器的相应位驱动输出值。<br>仅当PIO核硬件被配置为双向模式时，direction寄存器才存在。模式（输入、输出或双向）在系统创建时指定，并且在运行时不能修改。在输入或输出模式中，direction寄存器不存在，在这种情况下，读direction返回一个未定义的值，写direction无影响。<br>       在复位后，方向寄存器的所有位都是0，所以所有双向I/O端口都被配置为输入。如果那些PIO端口被连接到FPGA器件的引脚，则这些引脚保持高阻状态。在双向模式，为了改变PIO端口的方向，要重新编程direction寄存器。</p>
<h5 id="中断屏蔽寄存器"><a href="#中断屏蔽寄存器" class="headerlink" title="中断屏蔽寄存器"></a>中断屏蔽寄存器</h5><p>设置interruptmask Register（中断屏蔽寄存器）中的位为1允许相应PIO输入端口中断。中断行为取决于PIO核的硬件配置。见“中断行为”。<br>       interruptmask寄存器仅当硬件被配置为能产生IRQ时才存在。如果PIO核不能产生IRQ，读interruptmask返回一个未定义的值，写interruptmask无影响。<br>       在复位后，所有interruptmask寄存器的位都是0，所以所有的PIO端口中断都被禁用。</p>
<h5 id="边沿捕获寄存器"><a href="#边沿捕获寄存器" class="headerlink" title="边沿捕获寄存器"></a>边沿捕获寄存器</h5><p>如果edgecapture（边沿捕获）寄存器中的位n被设置位1，在输入端口n上的边沿将会被探测到。Avalon-MM主外设能够读edgecapture寄存器以确定是否有一个边沿出现在任何PIO输入端口。写任何值到edgecapture将清除寄存器中的所有位。<br>要探测的边沿的类型在系统创建时就已经选定在硬件中。edgecapture寄存器只能在硬件被配置位捕获边沿时存在。如果PIO核没有被配置成捕获边沿，读edgecapture将返回一个未定义的值，写edgecapture无影响。</p>
<h5 id="输出置位和输出清零寄存器"><a href="#输出置位和输出清零寄存器" class="headerlink" title="输出置位和输出清零寄存器"></a>输出置位和输出清零寄存器</h5><p>你可以使用输出置位和输出清零（outset和outclear）寄存器置1或清0指定的输出端口的位。例如，要设置输出端口的第六位，可以写0x40（0100 0000）到outset寄存器。写0x08（0000 1000）到outclear寄存器可清0输出端口的第3位。<br>这些寄存器只有在选择Enable individual bit set/clear output register寄存器为开启时才可用。</p>
<h5 id="中断行为"><a href="#中断行为" class="headerlink" title="中断行为"></a>中断行为</h5><p>PIO核输出一个能够连接到任意在系统中的主外设的单个IRQ信号。主外设既能够读dagta寄存器，也能够edgecapture寄存器以确定那一个输入端口引发了中断。<br>当硬件被配置为电平敏感中断时，当data和interruptmask寄存器中相应的位是1时，IRQ被确定。当硬件被配置为边沿敏感中断时，当edgecapture和interruptmask寄存器中相应的位是1时，IRQ被确定。IRQ保持确定直到禁用interruptmask中相应的位或者写edgecapture相应的位以明确地确认为止。</p>
<p>参考：<br>Chentuo’s<a href="http://www.cnblogs.com/chentuo/articles/1427283.html">《PIO Core》</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>NIOS-II</tag>
        <tag>寄存器</tag>
      </tags>
  </entry>
  <entry>
    <title>NIOS II 定时器的使用</title>
    <url>/archives/2018/05/NIOS-II-%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h5 id="初始化，即对定时器进行清零"><a href="#初始化，即对定时器进行清零" class="headerlink" title="初始化，即对定时器进行清零"></a>初始化，即对定时器进行清零</h5><p>清零的方式有两种，一种是用定时器清零，另外一种是使用库函数，主要是io.h这个库里面的。<br>这里主要讲一下使用库函数，因为使用库函数可以使得程序的可读性更强。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER1_BASE,0x00);  //清除timer1中断标志位</span><br></pre></td></tr></table></figure>
<p>其中TIMER1_BASE是定时器1的基地址，在system.h头文件中。</p>
<h5 id="设置定时周期"><a href="#设置定时周期" class="headerlink" title="设置定时周期"></a>设置定时周期</h5><p>同样建议使用库函数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER1_BASE,timer_prd[j]);      //低16位</span><br><span class="line">IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER1_BASE,timer_prd[j]&gt;&gt;16);  //高16位</span><br></pre></td></tr></table></figure>
<p>其中XXX_PERIODL和XXX_PERIODH分别为定时器的周期的低十六位和高十六位。这里需要提醒大家的一点是，不要超出16位，否则会丢失高位。</p>
<h5 id="启动定时器"><a href="#启动定时器" class="headerlink" title="启动定时器"></a>启动定时器</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER1_BASE,0X07);  //启动timer1 </span><br></pre></td></tr></table></figure>
<p>这里0x07主要是对某一些特定的标志位进行操作，启动定时器。</p>
<h5 id="注册定时器。"><a href="#注册定时器。" class="headerlink" title="注册定时器。"></a>注册定时器。</h5><p>这里的注册需要解释一下，这个可能和os有点联系，nios后台有个操作系统，当定时器中断产生以后，后台就会响应这个中断，也就是执行这个中断对应的中断函数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alt_irq_register(TIMER1_IRQ,NULL,ISR_timer1);   //注册timer1</span><br></pre></td></tr></table></figure>
<p>这里的ISR_timer1就是定时器1对应的中断函数，ISR_timer1是这个中断函数对应的函数名称。（函数名实质就是一个指针，只不过这个指针是函数指针）。<br>我们可在中断函数中进行一些短时的操作，不宜进行复杂长时操作，主要是考虑到时间过长会引起定时器溢出。</p>
<h5 id="设置定时器中断函数"><a href="#设置定时器中断函数" class="headerlink" title="设置定时器中断函数"></a>设置定时器中断函数</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">static void ISR_timer1(void) </span><br><span class="line">&#123;</span><br><span class="line">	XXX;</span><br><span class="line">	XXXXX;</span><br><span class="line">	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER1_BASE,0x00);  //清除timer1中断标志位</span><br><span class="line">	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE,0x05);  //启动定时器</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在中断响应函数中，不要忘记在执行结束前，添加定时器清零以及启动定时器。便于定时器下一次响应，否则定时器就仅仅执行一次。</p>
<h5 id="简单定时器中断示例："><a href="#简单定时器中断示例：" class="headerlink" title="简单定时器中断示例："></a>简单定时器中断示例：</h5><p><em>用定时器控制的流水灯</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;system.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;altera_avalon_pio_regs.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;altera_avalon_timer_regs.h&gt;</span></span><br><span class="line"></span><br><span class="line">static void Timer_ISR_Init(void);</span><br><span class="line">static void Timer_Irq_Handler(void);</span><br><span class="line">int count=0;</span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Hello from Nios II!\n&quot;</span>);</span><br><span class="line">	int LED_code=0x00;</span><br><span class="line">	Timer_ISR_Init();</span><br><span class="line">	<span class="keyword">while</span>(1)</span><br><span class="line">	&#123;</span><br><span class="line">		switch(count)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> 0: LED_code=0X01; <span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 1: LED_code=0X02; <span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 2: LED_code=0X04; <span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 3: LED_code=0X08; <span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 4: LED_code=0X10; <span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 5: LED_code=0X20; <span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 6: LED_code=0X40; <span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 7: LED_code=0X80; <span class="built_in">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, LED_code);</span><br><span class="line">		<span class="keyword">if</span>(count == 7) count=0;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void Timer_ISR_Init(void)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n  Timer Initial! \n&quot;</span>);</span><br><span class="line">	// 清除定时器中断标志寄存器</span><br><span class="line">	IOWR_ALTERA_AVALON_TIMER_STATUS( TIMER_BASE,0x00);</span><br><span class="line">	//设置定时周期</span><br><span class="line">	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE,50000);</span><br><span class="line">	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE,100);</span><br><span class="line">	//启动定时器</span><br><span class="line">	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE,0x05);</span><br><span class="line">	//注册中断</span><br><span class="line">	alt_irq_register(TIMER_IRQ,NULL,Timer_Irq_Handler);</span><br><span class="line">&#125;</span><br><span class="line">static void Timer_Irq_Handler(void)</span><br><span class="line">&#123;</span><br><span class="line">	count++;</span><br><span class="line">	// 清除定时器中断标志寄存器</span><br><span class="line">	IOWR_ALTERA_AVALON_TIMER_STATUS( TIMER_BASE,0x00);</span><br><span class="line">	//启动定时器</span><br><span class="line">	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE,0x05);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h5 id="友情链接："><a href="#友情链接：" class="headerlink" title="友情链接："></a>友情链接：</h5><p>1、<a href="https://www.cnblogs.com/logic3/">大西瓜FPGA</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>NIOS-II</tag>
        <tag>定时器</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt 框架下 C++ 调用 MATLAB 程序</title>
    <url>/archives/2022/01/Qt%E6%A1%86%E6%9E%B6%E4%B8%8BCpp%E8%B0%83%E7%94%A8MATLAB%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>最近 Qt 项目中需要使用相对复杂的算法，因自身功力尚浅暂时无法使用 C/C++ 实现复杂算法，经过查找发现 Qt 可以通过某些途径实现 MATLAB 算法的调用，对于我这种算法小白十分友好，遂将 Qt 与 MATLAB 混合编程方法做一些简单记录。说是 QT 与 MATLAB 的混合编程，其实质仍是 C++ 对 MATLAB 程序的调用。</p>
<h1 id="1、C-调用-MATLAB-的几种方法"><a href="#1、C-调用-MATLAB-的几种方法" class="headerlink" title="1、C++ 调用 MATLAB 的几种方法"></a>1、C++ 调用 MATLAB 的几种方法</h1><p>在 Qt 框架下有多种 C++ 调用 MATLAB 程序的方法，下面进行简单介绍。</p>
<p>（1）调用 MATLAB 独立引擎</p>
<p>MATLAB Engine API 提供了 C++ 调用 MATLAB 程序的接口，C++ 程序通过 API 能够启动 MATLAB、调用 MATLAB 函数以及在 MATLAB 和 C++ 程序之间交换数据。通过查阅貌似这种方法比较适合于图表绘制，且运行时依赖 MATLAB 环境，比较受限。详细介绍可以参考 <a href="https://www.mathworks.com/help/matlab/calling-matlab-engine-from-cpp-programs.html">MATLAB Engine API for C++</a>。</p>
<p>（2）MATLAB 代码转换为 C/C++ 代码</p>
<p>MATLAB 中集成了 MATLAB Coder（编码器），用于将 MATLAB 代码转换为 C/C++ 代码，可以方便地将 MATLAB 程序移植到需要的平台上。具体介绍和实现方法参考 <a href="https://www.mathworks.com/help/coder/?s_tid=srchbrcm">MATLAB Coder</a>。</p>
<p>（3）将 MATLAB 程序生成共享库</p>
<p>MATLAB Compiler 中包含 Library Compiler，可以将 MATLAB 程序打包生成动态共享库（DLL），方便在其他程序语言中调用使用MATLAB功能。</p>
<p><strong>本篇文章主要围绕第三种方法展开，下面依次对 MATLAB 生成共享库，Qt 调用MATLAB DLL的具体方法进行介绍。</strong></p>
<h1 id="2、MATLAB-生成-DLL文件"><a href="#2、MATLAB-生成-DLL文件" class="headerlink" title="2、MATLAB 生成 DLL文件"></a>2、MATLAB 生成 DLL文件</h1><h2 id="2-1-编译环境配置"><a href="#2-1-编译环境配置" class="headerlink" title="2.1 编译环境配置"></a>2.1 编译环境配置</h2><p>Qt 在 Windows 平台的编译环境一般有两种，分别为 MinGW 和 MSVC，为使 DLL 文件的编译平台与 Qt 保持一直，在配置时需要选择相同的编译器，且位数必须一致，比如我使用的环境均为MSVC2019 64bit。MSVC 可以通过安装 Visual Studio 进行配置，网上相关资料很多，不再赘述；MinGW 可以在 MATLAB 附加功能中安装，打开附加功能管理器后，直接搜索<code>Mingw</code>即可。</p>
<p><img src="/image/2022-02/Qt%E6%A1%86%E6%9E%B6%E4%B8%8BCpp%E8%B0%83%E7%94%A8MATLAB%E7%A8%8B%E5%BA%8F/image-20220129162316124.png"></p>
<p>在 MATLAB 命令行窗口，使用<code>mbuild –setup</code>命令查看 MATLAB 中可以配置的编译环境。</p>
<p>如果没有可选编译器，需要自行配置后进行下一步操作。</p>
<p>输入命令后，会显示当前可配置的编译器，如下图所示。</p>
<p><img src="/image/2022-02/Qt%E6%A1%86%E6%9E%B6%E4%B8%8BCpp%E8%B0%83%E7%94%A8MATLAB%E7%A8%8B%E5%BA%8F/image-20220129160931145.png"></p>
<p>根据自己的需要选择编译器，这里我选择 <code>Microsoft Visual C++ 2019</code>，并选择 C++ 语言，依次</p>
<p>点击相应选项，最终配置为如图所示即可。<img src="/image/2022-02/Qt%E6%A1%86%E6%9E%B6%E4%B8%8BCpp%E8%B0%83%E7%94%A8MATLAB%E7%A8%8B%E5%BA%8F/image-20220129161554344.png"></p>
<p>上述两步也可以合并为一步，命令为 <code>mbuild -setup C++</code>，直接选择编译器。</p>
<p><img src="/image/2022-02/Qt%E6%A1%86%E6%9E%B6%E4%B8%8BCpp%E8%B0%83%E7%94%A8MATLAB%E7%A8%8B%E5%BA%8F/image-20220129162030542.png"></p>
<h2 id="2-2-打包生成-DLL-文件"><a href="#2-2-打包生成-DLL-文件" class="headerlink" title="2.2 打包生成 DLL 文件"></a>2.2 打包生成 DLL 文件</h2><p>为方便展示，先使用 MATLAB 编写一个两个数相加的函数，文件名为 add_matlab.m，具体代码如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span> = <span class="title">add_matlab</span><span class="params">(a,b)</span></span></span><br><span class="line">c = a + b;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>在 MATLAB 命令行窗口输入<code>deploytool</code>命令，弹出如下对话框。</p>
<p><img src="/image/2022-02/Qt%E6%A1%86%E6%9E%B6%E4%B8%8BCpp%E8%B0%83%E7%94%A8MATLAB%E7%A8%8B%E5%BA%8F/image-20220129162735857.png"></p>
<p>选择<code>Library Compiler</code>编译器，如下图所示。</p>
<p><img src="/image/2022-02/Qt%E6%A1%86%E6%9E%B6%E4%B8%8BCpp%E8%B0%83%E7%94%A8MATLAB%E7%A8%8B%E5%BA%8F/image-20220129162948362.png"></p>
<p><code>TYPE</code>选择<code>C++ Shared Library</code>，<code>EXPORTED FUNCTIONS</code>选择要编译的文件，这里选择前面编写好的<code>add_matlab.m</code>文件，如下所示。</p>
<p><img src="/image/2022-02/Qt%E6%A1%86%E6%9E%B6%E4%B8%8BCpp%E8%B0%83%E7%94%A8MATLAB%E7%A8%8B%E5%BA%8F/image-20220129163425530.png"></p>
<p>选择完成后，点击<code>Package</code>按钮，选择编译后的文件放置位置，开始编译打包，稍等片刻即可完成，输出目录中有如下三个文件夹。</p>
<p><img src="/image/2022-02/Qt%E6%A1%86%E6%9E%B6%E4%B8%8BCpp%E8%B0%83%E7%94%A8MATLAB%E7%A8%8B%E5%BA%8F/image-20220129163745686.png"></p>
<p><code>for_testing</code> 目录下的文件，用于测试。</p>
<p><code>for_redistribution</code>目录中程序<code>MyAppInstaller_web.exe</code>用于安装 MATLAB 运行时库和本项目生成的 DLL 、LIB 和 H 文件，将程序部署至没有 MATLAB 环境中电脑时，可以使用此方法。</p>
<p><code>for_redistribution_files_only</code>目录中的 DLL 、LIB 和 H 文件，就是在 Qt 项目中要使用的文件。H 和 LIB 文件用于 Qt 程序调用，DLL 文件用于保障程序运行。有文章说 v2 目录中的 .ctf 文件在较低版本的 MATLAB 中影响 DLL 接口中的初始化函数，较高版本的MATLAB不需要。在无法初始化时，可以将该文件与 DLL 文件一同放入 debug 文件夹下尝试解决。</p>
<h1 id="3、Qt-框架下-C-调用-DLL"><a href="#3、Qt-框架下-C-调用-DLL" class="headerlink" title="3、Qt 框架下 C++ 调用 DLL"></a>3、Qt 框架下 C++ 调用 DLL</h1><h2 id="3-1-创建-Qt-项目，添加外部库"><a href="#3-1-创建-Qt-项目，添加外部库" class="headerlink" title="3.1 创建 Qt 项目，添加外部库"></a>3.1 创建 Qt 项目，添加外部库</h2><p>创建一个 Qt 项目，在项目文件目录下新建一个名为<code>matlab_libs</code>（文件夹名可以自定义随便取），将 MATLAB 编译生成的<code>for_redistribution_files_only</code>目录下的文件全部拷贝至该文件夹下。</p>
<p>右键点击 Qt 项目目录名，选择<code>添加库</code>、<code>外部库</code></p>
<p><img src="/image/2022-02/Qt%E6%A1%86%E6%9E%B6%E4%B8%8BCpp%E8%B0%83%E7%94%A8MATLAB%E7%A8%8B%E5%BA%8F/image-20220204102609801.png"></p>
<p>库文件选择<code>Matlab_libs</code>中的<code>add_matlab.lib</code>，点击下一步完成 Qt 外部库的添加。</p>
<p><img src="/image/2022-02/Qt%E6%A1%86%E6%9E%B6%E4%B8%8BCpp%E8%B0%83%E7%94%A8MATLAB%E7%A8%8B%E5%BA%8F/image-20220204105703963.png"></p>
<p>完成后会在项目 .pro 文件中添加如下信息：</p>
<p><img src="/image/2022-02/Qt%E6%A1%86%E6%9E%B6%E4%B8%8BCpp%E8%B0%83%E7%94%A8MATLAB%E7%A8%8B%E5%BA%8F/image-20220204103955797.png"></p>
<h2 id="3-2-添加-MATLAB-其他依赖库和头文件路径"><a href="#3-2-添加-MATLAB-其他依赖库和头文件路径" class="headerlink" title="3.2 添加 MATLAB 其他依赖库和头文件路径"></a>3.2 添加 MATLAB 其他依赖库和头文件路径</h2><p>Qt 项目编译时，不仅需要自己添加的 MATLAB 编译后的库文件，还需要其他 MATLAB 依赖库文件，在工程 .pro 文件中添加如下内容：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"># MATLAB 用到的.lib库文件 及其搜索路径</span><br><span class="line">win32: LIBS += -LD:/Matlab/<span class="keyword">extern</span>\lib/win64/microsoft/ -llibmx</span><br><span class="line">win32: LIBS += -LD:/Matlab/<span class="keyword">extern</span>\lib/win64/microsoft/ -llibmat</span><br><span class="line">win32: LIBS += -LD:/Matlab/<span class="keyword">extern</span>\lib/win64/microsoft/ -llibeng</span><br><span class="line">win32: LIBS += -LD:/Matlab/<span class="keyword">extern</span>\lib/win64/microsoft/ -lmclmcr</span><br><span class="line">win32: LIBS += -LD:/Matlab/<span class="keyword">extern</span>\lib/win64/microsoft/ -lmclmcrrt</span><br><span class="line">win32: LIBS += -LD:/Matlab/<span class="keyword">extern</span>\lib/win64/microsoft/ -llibmex</span><br><span class="line"></span><br><span class="line">INCLUDEPATH += D:/Matlab/<span class="keyword">extern</span>\lib/win64/microsoft</span><br><span class="line">DEPENDPATH += D:/Matlab/<span class="keyword">extern</span>\lib/win64/microsoft</span><br><span class="line"></span><br><span class="line"># .h文件搜索路径</span><br><span class="line">INCLUDEPATH += D:/Matlab/<span class="keyword">extern</span>/include</span><br><span class="line">INCLUDEPATH += D:/Matlab/<span class="keyword">extern</span>/include/win64</span><br></pre></td></tr></table></figure>

<p>上述路径根据自己安装位置进行替换，需要注意的是，文件路径中不得有空格，若有空格可以使用 quote()，如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">INCLUDEPATH+=$$<span class="built_in">quote</span>(D:/Matlab/<span class="keyword">extern</span>/include/win64)</span><br></pre></td></tr></table></figure>

<h2 id="3-3-环境配置"><a href="#3-3-环境配置" class="headerlink" title="3.3 环境配置"></a>3.3 环境配置</h2><p>本文中使用的 Qt 版本为 Qt5.9.9。</p>
<p>如果要发布程序或者运行在没有 MATLAB 环境的电脑需要安装 MATLAB 运行库，可以通过<code>for_redistribution</code>目录中<code>MyAppInstaller_web.exe</code>程序进行安装，也可以直接下载运行库安装程序，下载的运行库必须和生成 DLL 文件的 MATLAB 软件是同一个版本，MATLAB 运行库链接：<a href="https://ww2.mathworks.cn/products/compiler/matlab-runtime.html%EF%BC%8C">https://ww2.mathworks.cn/products/compiler/matlab-runtime.html，</a><br>运行库的安装根据提示一直点击确定即可。</p>
<h2 id="3-4-调用生成的-add-matlab-DLL-库函数"><a href="#3-4-调用生成的-add-matlab-DLL-库函数" class="headerlink" title="3.4 调用生成的 add_matlab DLL 库函数"></a>3.4 调用生成的 add_matlab DLL 库函数</h2><p>（1）初始化库函数</p>
<p>编写一个加法窗口程序，在调用 add_matlab() 函数前，必须先使用 add_matlabInitialize() 函数初始化库函数。</p>
<p>（2）MATLAB 编译生成的 DLL 函数接口，保存在<code>add_matlab.h</code>文件中，add_matlab() 函数如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> LIB_add_matlab_CPP_API <span class="type">void</span> MW_CALL_CONV <span class="title">add_matlab</span><span class="params">(<span class="type">int</span> nargout, mwArray&amp; c, <span class="type">const</span> mwArray&amp; a, <span class="type">const</span> mwArray&amp; b)</span></span>;</span><br></pre></td></tr></table></figure>

<p>nargout 为函数输出参数的个数，表示其后面紧跟着 nargout  个输出参数。</p>
<p>其他参数为 MATLAB 程序中自定义的输入输出参数，数据类型均为<code>mwArray</code>类。</p>
<p>（3）<code>mwArray</code>类</p>
<p><code>mwArray</code>类是用于将输入/输出参数传递给 MATLAB Compiler SDK 生成的 C++ 函数的类，具体可以参考<a href="https://www.mathworks.com/help/compiler_sdk/cxx/mwarray.html?s_tid=srchtitle_mwArray_1">mwArray Class</a>。</p>
<h2 id="3-5-编译运行"><a href="#3-5-编译运行" class="headerlink" title="3.5 编译运行"></a>3.5 编译运行</h2><p><strong>具体代码如下：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;add_matlab.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">add_matlabInitialize</span>())&#123;</span><br><span class="line">        <span class="built_in">qDebug</span>(<span class="string">&quot;add_matlab unsuccessfully initialized&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_pushButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString result;</span><br><span class="line"></span><br><span class="line">    <span class="function">mwArray <span class="title">a</span><span class="params">(<span class="number">1</span>,<span class="number">1</span>,mxDOUBLE_CLASS)</span></span>;</span><br><span class="line">    <span class="function">mwArray <span class="title">b</span><span class="params">(<span class="number">1</span>,<span class="number">1</span>,mxDOUBLE_CLASS)</span></span>;</span><br><span class="line">    <span class="function">mwArray <span class="title">c</span><span class="params">(<span class="number">1</span>,<span class="number">1</span>,mxDOUBLE_CLASS)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">a</span>(<span class="number">1</span>,<span class="number">1</span>)=ui-&gt;LE1-&gt;<span class="built_in">text</span>().<span class="built_in">toInt</span>();</span><br><span class="line">    <span class="built_in">b</span>(<span class="number">1</span>,<span class="number">1</span>)=ui-&gt;LE2-&gt;<span class="built_in">text</span>().<span class="built_in">toInt</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">add_matlab</span>(<span class="number">1</span>,c,a,b);</span><br><span class="line">    result = c.<span class="built_in">ToString</span>();</span><br><span class="line">    ui-&gt;LE3-&gt;<span class="built_in">setText</span>(result);</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行效果如下：</p>
<p><img src="/image/2022-02/Qt%E6%A1%86%E6%9E%B6%E4%B8%8BCpp%E8%B0%83%E7%94%A8MATLAB%E7%A8%8B%E5%BA%8F/image-20220204113201971.png"></p>
<p>完整项目仓库地址：<a href="https://github.com/leafiness/Qt_MATLAB">https://github.com/leafiness/Qt_MATLAB</a></p>
<p><strong>参考：</strong></p>
<p>[1] <a href="https://www.mathworks.com/help/matlab/calling-matlab-engine-from-cpp-programs.html">MATLAB Engine API for C++</a><br>[2] <a href="https://www.mathworks.com/help/coder/?s_tid=srchbrcm">MATLAB Coder</a><br>[3] <a href="https://www.mathworks.com/help/compiler/excel/librarycompiler-app.html?searchHighlight=library%20compiler&s_tid=srchtitle_library%20compiler_2">Library Compiler</a><br>[4] <a href="https://www.mathworks.com/help/compiler_sdk/cxx/mwarray.html?s_tid=srchtitle_mwArray_1">mwArray Class</a><br>[5] <a href="https://blog.csdn.net/King_zkk/article/details/105783638">Qt调用MATLAB 生成的dll经验分享</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Qt</tag>
        <tag>MATLAB</tag>
      </tags>
  </entry>
  <entry>
    <title>MyTest</title>
    <url>/archives/2018/05/MyTest/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7d8231c3188a08abc6540ad9f6341755d7f286b8c5e0b1d8d420ae0e6c7a123c">bd25ed9264b080267271e137e33d0ce10d0d63c746cf62e20f15a634036418035663a28cabb4d8b61b9b22b55a2353d15acb169f7fa04cc96688119bd92ec7b4839ae812f7024f069eb306923adbfc2a130d3b738c64a494b90528b93f7ed23c75502db2be4b8a50e7942a2f10516126c934adde31bc0638aab3a2c9ef220410</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">测试用，请输入密码：</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>Sunrise</title>
    <url>/archives/2018/05/Sunrise/</url>
    <content><![CDATA[<p><img src="/image/2018-05/welcome.jpg">  </p>
<blockquote class="blockquote-center">
<p>欢迎来到我的博客<br>这是我的第一条博客！</p>

</blockquote>

<p><img src="/image/2018-05/00.gif">  </p>
]]></content>
  </entry>
  <entry>
    <title>Win10+Ubuntu 双系统安装教程</title>
    <url>/archives/2018/05/Win10-Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>最近上课要用Linux，准备从头记录一次Ubuntu的安装过程。如果有刚学的可以看看..同时接受大佬建议和指出错误…</p>
<h3 id="一-安装ubuntu之前"><a href="#一-安装ubuntu之前" class="headerlink" title="一.安装ubuntu之前"></a>一.安装ubuntu之前</h3><p>1.你需要下载UtralISO<br><img src="/image/2018-5-20/01.jpg"><br>下载试用版即可<br>2.下载Ubuntu桌面版，推荐下载此18.04LTS版本，能从新的上手就尽量从新的上手使用。<br><img src="/image/2018-5-20/02.jpg"><br>下载ubuntu-18.04-desktop-amd64.iso版本。<br>下面的ubuntu-18.04-live-server-amd64.iso是服务器版本的。<br>等待下载完成之后，你会看到如下一个文件。<br><img src="/image/2018-5-20/03.jpg"></p>
<h3 id="二．通过UtralISO制作启动盘"><a href="#二．通过UtralISO制作启动盘" class="headerlink" title="二．通过UtralISO制作启动盘"></a>二．通过UtralISO制作启动盘</h3><p>1.打开UtralISO点击试用即可。<br>在UtralISO主界面中点击文件—打开—选择你之前下载的ubuntu镜像文件。选中红框区域。<br><img src="/image/2018-5-20/04.jpg"><br>点击启动—写入硬盘映像<br>默认即可，无需设置<br><img src="/image/2018-5-20/05.jpg"><br>点击写入，等待写入完成。</p>
<h3 id="三．分区"><a href="#三．分区" class="headerlink" title="三．分区"></a>三．分区</h3><p>假设你的电脑和我一样是windows10那么可以打开磁盘管理<br><img src="/image/2018-5-20/06.jpg"><br>从你的机械硬盘或者固态硬盘中分配一块区域（最好大于40G）出来。让这块区域显示为未分配状态即可。具体ubuntu系统分区会在安装ubuntu系统的时候在这块windows10未分配区域操作。所以你在windows里面是无法访问你的ubuntu系统磁盘的。</p>
<h3 id="四．安装Ubuntu"><a href="#四．安装Ubuntu" class="headerlink" title="四．安装Ubuntu"></a>四．安装Ubuntu</h3><p>1.重启电脑进入BIOS我的电脑是F2进入<br>2.把你的U盘设置成第一启动盘<br>3.移动到sava and restar回车点击YES<br>4.等待自动重启<br>5.在选项里面选择Install Ubuntu<br>6.进入安装引导界面：<br><img src="/image/2018-5-20/07.jpg"><br>选择中文吧，虽然选择英文比较好,但是初期使用还是使用中文吧…<br>2.选择安装方式：<br><img src="/image/2018-5-20/08.jpg"><br>这个应该很好看懂…装双系统的话就选择其他选项<br>3.分区（最重要的一步）在ubuntu安装界面中，有一个磁盘管理的界面<br>选择你之前在windows下未分配的磁盘分区<br>点击左下角的+号<br>先创建主分区 /分区<br>我的是创建20G 主分区 空间起始位置 Ext4日志文件系统 /<br><img src="/image/2018-5-20/09.jpg"><br>创建swap分区 8000M 主分区 空间起始位置 用于交换空间 ok<br>创建boot分区 2048M 逻辑分区 空间起始位置 Ext4日志文件 系统挂载点 /boot<br>创建home分区 未分配的区域全部分区至home分区 逻辑分区 空间起始位置 Ext4日志文件 系统挂载点 /home<br>接下来就简单了，安装即可 设置用户名密码登陆系统<br><img src="/image/2018-5-20/10.jpg"></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划—背包问题（Python）</title>
    <url>/archives/2020/03/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%88Python%EF%BC%89/</url>
    <content><![CDATA[<h4 id="一、什么是动态规划（Dynamic-Programming，DP）"><a href="#一、什么是动态规划（Dynamic-Programming，DP）" class="headerlink" title="一、什么是动态规划（Dynamic Programming，DP）"></a>一、什么是动态规划（Dynamic Programming，DP）</h4><ul>
<li>1.动态规划是通过组合子问题的解来解决原问题</li>
<li>2.动态规划应用于子问题重叠的情况，即不同的子问题具有公共的子子问题</li>
<li>3.动态规划算法对每个子子问题只求解一次</li>
<li>4.动态规划通常用来求解最优化问题<br>注：每个子问题必须是离散的，没有依赖关系，比如要解决<code>子问题1</code> 必须通过解决<code>子问题2</code> 才可以解决。</li>
</ul>
<h4 id="二、背包问题"><a href="#二、背包问题" class="headerlink" title="二、背包问题"></a>二、背包问题</h4><p>&emsp;&emsp;问题描述：将四个不同重量不同价值的物品放入一个背包，使得背包中的物品价值总和最大。例如，</p>
<table>
<thead>
<tr>
<th align="center">物品</th>
<th align="center">重量</th>
<th align="center">价值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">音响</td>
<td align="center">4</td>
<td align="center">3000</td>
</tr>
<tr>
<td align="center">电脑</td>
<td align="center">3</td>
<td align="center">2000</td>
</tr>
<tr>
<td align="center">吉他</td>
<td align="center">1</td>
<td align="center">1500</td>
</tr>
<tr>
<td align="center">手机</td>
<td align="center">1</td>
<td align="center">2000</td>
</tr>
<tr>
<td align="center">将以上物品怎样放入一个载重为4的背包可以获得最大价值，求最优解。</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h4 id="三、DP算法思路"><a href="#三、DP算法思路" class="headerlink" title="三、DP算法思路"></a>三、DP算法思路</h4><h5 id="1、传统思路"><a href="#1、传统思路" class="headerlink" title="1、传统思路"></a>1、传统思路</h5><p>&emsp;&emsp;传统思路是将不同物品进行排列组合放入背包，通过比较全部的组合形式以获得最优解，而这种算法是时间复杂度是指数级别，后果就是当子问题越多时计算量将会急剧增长。</p>
<h5 id="2、DP算法思路"><a href="#2、DP算法思路" class="headerlink" title="2、DP算法思路"></a>2、DP算法思路</h5><p>&emsp;&emsp;DP算法是将主问题分解成若干小问题，自下而上求解子问题。<br>在这里通过将背包容量分割以及不同物品组成网格，每一行物品将对应的网格填充并比较上一行的价值大小。如下：<br><img src="/image/2020-3-27/image-0.png"><br>具体思路看参考链接。</p>
<h4 id="四、代码例程"><a href="#四、代码例程" class="headerlink" title="四、代码例程"></a>四、代码例程</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里使用了图解中的吉他，音箱，电脑，手机做的测试，数据保持一致</span></span><br><span class="line">w = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>]   <span class="comment">#n个物体的重量(w[0]无用)</span></span><br><span class="line">p = [<span class="number">0</span>, <span class="number">1500</span>, <span class="number">3000</span>, <span class="number">2000</span>, <span class="number">2000</span>]   <span class="comment">#n个物体的价值(p[0]无用)</span></span><br><span class="line">n = <span class="built_in">len</span>(w) - <span class="number">1</span>   <span class="comment">#计算n的个数</span></span><br><span class="line">m = <span class="number">4</span>   <span class="comment">#背包的载重量</span></span><br><span class="line"></span><br><span class="line">x = []   <span class="comment">#装入背包的物体，元素为True时，对应物体被装入(x[0]无用)</span></span><br><span class="line">v = <span class="number">0</span></span><br><span class="line"><span class="comment">#optp[i][j]表示在前i个物体中，能够装入载重量为j的背包中的物体的最大价值</span></span><br><span class="line">optp = [[<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)] <span class="keyword">for</span> raw <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line"><span class="comment">#optp 相当于做了一个n*m的全零矩阵的赶脚，n行为物件，m列为自背包载重量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">knapsack_dynamic</span>(<span class="params">w, p, n, m, x</span>):</span><br><span class="line">    <span class="comment">#计算optp[i][j]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):       <span class="comment"># 物品一件件来</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):   <span class="comment"># j为子背包的载重量，寻找能够承载物品的子背包</span></span><br><span class="line">            <span class="keyword">if</span> (j &gt;= w[i]):         <span class="comment"># 当物品的重量小于背包能够承受的载重量的时候，才考虑能不能放进去</span></span><br><span class="line">                optp[i][j] = <span class="built_in">max</span>(optp[i - <span class="number">1</span>][j], optp[i - <span class="number">1</span>][j - w[i]] + p[i])    <span class="comment"># optp[i - 1][j]是上一个单元的值， optp[i - 1][j - w[i]]为剩余空间的价值</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                optp[i][j] = optp[i - <span class="number">1</span>][j]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#递推装入背包的物体,寻找跳变的地方，从最后结果开始逆推</span></span><br><span class="line">    j = m</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> optp[i][j] &gt; optp[i - <span class="number">1</span>][j]:</span><br><span class="line">            x.append(i)</span><br><span class="line">            j = j - w[i]  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#返回最大价值，即表格中最后一行最后一列的值</span></span><br><span class="line">    v = optp[n][m]</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;最大值为：&#x27;</span> + <span class="built_in">str</span>(knapsack_dynamic(w, p, n, m, x))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;物品的索引：&#x27;</span>,x</span><br><span class="line"></span><br><span class="line"><span class="comment">#最大值为：4000</span></span><br><span class="line"><span class="comment">#物品的索引： [4, 3]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://blog.csdn.net/MrLevo520/article/details/75676160">动态规划(DP)的整理-Python描述</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Dynamic Programming</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Admin 后台管理</title>
    <url>/archives/2020/03/Hexo%E5%8D%9A%E5%AE%A2/Hexo-Admin%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h4 id="1-安装-hexo-admin-插件"><a href="#1-安装-hexo-admin-插件" class="headerlink" title="1. 安装 hexo-admin 插件"></a>1. 安装 hexo-admin 插件</h4><p>首先，在创建Blog的根目录下安装插件，打开Git Bash输入如下命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>安装过程中可能会有许多错误提示，绝大多数情况下没有影响可以忽略。<br>输入命令，启动服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>在浏览器中打开localhost:4000/admin/即可编辑文章内容,界面如下。<br><img src="/image/2020-3-20/image-1.png"></p>
<h4 id="2-安全与配置"><a href="#2-安全与配置" class="headerlink" title="2. 安全与配置"></a>2. 安全与配置</h4><p>此时，访问后台不需要账号密码即可进入，为安全起见设置账号密码。<br>在主页面上方选在 “ Setting ”，然后点击“ Setup authentification here ”。<br><img src="/image/2020-3-20/image-2.png"><br>填写username,password,seret等信息，获得password_hash。</p>
<p><img src="/image/2020-3-20/image-3.png"><br>将页面下方获取的内容复制。<br><img src="/image/2020-3-20/image-4.png"><br>粘贴到 _config.yml 文件中。注意此文件非主题中的配置文件，目录结构如下。</p>
<p><img src="/image/2020-3-20/image-5.png"></p>
<h4 id="3-文章编写"><a href="#3-文章编写" class="headerlink" title="3. 文章编写"></a>3. 文章编写</h4><p>在 admin 主页面 “Posts” 下方点击 New Post 输入文章名称即可进入编辑界面。<br><img src="/image/2020-3-20/image-12.png"><br><img src="/image/2020-3-20/image-13.png"><br>点击右上角的 齿轮 标识可以设置文章的 Date、Author、Tags、Categories等信息。<br><img src="/image/2020-3-20/image-14.png"><br>此插件支持图片的直接粘贴，并可以将图片保存到指定位置。<br>在 Setting 中最下方有 “Image Pasting Settings” 设置项。<br><img src="/image/2020-3-20/image-15.png"><br><strong>Image directory</strong>： 图片存放位置<br><strong>Image filename prefix</strong>：图片保存名称格式<br>将复制的图片粘贴在文档中即可，可以看到插件已自动按照MD语法将图片添加到文章中，并按照设置好的路径和命名方式保存。<br><img src="/image/2020-3-20/image-16.png"><br><img src="/image/2020-3-20/image-17.png"><br>编辑时，文章作为草稿保存在 _drafts 文件夹中。<br><img src="/image/2020-3-20/image-18.png"><br>文章编写完成后，点击右上角  ‘Publish’ ，文章会被转存到 _posts 文件夹中。<br>此后进行下一步操作。</p>
<h4 id="4-文章-Deploy"><a href="#4-文章-Deploy" class="headerlink" title="4. 文章 Deploy"></a>4. 文章 Deploy</h4><p>如要 Deploy ，需要在标题 2 中的 _config.yml 文件同级目录下编写一个脚本。<br>脚本名为“ hexo-deploy，文件内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>
<p>配置 _config.yml 文件，在 admin 处添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deployCommand:<span class="string">&#x27;hexo-deploy.bat&#x27;</span></span><br></pre></td></tr></table></figure>
<p>操作完成后点击Deploy，即可将文章部署到 GitHub 上。</p>
<hr>
<h5 id="Hexo-Admin地址"><a href="#Hexo-Admin地址" class="headerlink" title="Hexo-Admin地址"></a><a href="https://github.com/jaredly/hexo-admin">Hexo-Admin地址</a></h5>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>hexo-admin</tag>
      </tags>
  </entry>
  <entry>
    <title>Next 优化与使用技巧</title>
    <url>/archives/2020/03/Hexo%E5%8D%9A%E5%AE%A2/Next%20%E4%BC%98%E5%8C%96%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>Next主题设置及美化，打造自己的个性化主题。</p>
<h1 id="一、主题美化"><a href="#一、主题美化" class="headerlink" title="一、主题美化"></a>一、主题美化</h1><h2 id="1、文章永久链接"><a href="#1、文章永久链接" class="headerlink" title="1、文章永久链接"></a>1、文章永久链接</h2><p>Hexo 默认生成的文章地址路径是 【网站名称／年／月／日／文章名称】。</p>
<p>这种链接对搜索爬虫很不友好，它的 url 结构超过三层，太深。<br>安装 hexo-abbrlink</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<p> 然后配置站点配置文件 <code>_config.yml</code> ：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://blog.juanertu.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:categories/:abbrlink.html</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#添加</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span> <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span> <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure>

<h2 id="2、鼠标点击特效"><a href="#2、鼠标点击特效" class="headerlink" title="2、鼠标点击特效"></a>2、鼠标点击特效</h2><p>新建特效脚本文件，将其放在站点的 source 目录下（即 <code>hexo/source/js/cursor</code>）而不是主题目录下，如果没有 js 目录，则新建一个。</p>
<ul>
<li><p>礼花特效（fireworks.js）</p>
<details>
<summary>点击显/隐代码</summary>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">&#123; origin, speed, color, angle, context &#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">origin</span> = origin</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">position</span> = &#123; ...<span class="variable language_">this</span>.<span class="property">origin</span> &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">speed</span> = speed</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">angle</span> = angle</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span> = context</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">renderCount</span> = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">fillStyle</span> = <span class="variable language_">this</span>.<span class="property">color</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">beginPath</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">arc</span>(<span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">x</span>, <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">y</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">fill</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">move</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">x</span> = (<span class="title class_">Math</span>.<span class="title function_">sin</span>(<span class="variable language_">this</span>.<span class="property">angle</span>) * <span class="variable language_">this</span>.<span class="property">speed</span>) + <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">x</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">y</span> = (<span class="title class_">Math</span>.<span class="title function_">cos</span>(<span class="variable language_">this</span>.<span class="property">angle</span>) * <span class="variable language_">this</span>.<span class="property">speed</span>) + <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">y</span> + (<span class="variable language_">this</span>.<span class="property">renderCount</span> * <span class="number">0.3</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">renderCount</span>++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boom</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span> (&#123; origin, context, circleCount = <span class="number">16</span>, area &#125;) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">origin</span> = origin</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span> = context</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">circleCount</span> = circleCount</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">area</span> = area</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stop</span> = <span class="literal">false</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">circles</span> = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">randomArray</span>(<span class="params">range</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> length = range.<span class="property">length</span></span><br><span class="line">    <span class="keyword">const</span> randomIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(length * <span class="title class_">Math</span>.<span class="title function_">random</span>())</span><br><span class="line">    <span class="keyword">return</span> range[randomIndex]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">randomColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> range = [<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span> + <span class="variable language_">this</span>.<span class="title function_">randomArray</span>(range) + <span class="variable language_">this</span>.<span class="title function_">randomArray</span>(range) + <span class="variable language_">this</span>.<span class="title function_">randomArray</span>(range) + <span class="variable language_">this</span>.<span class="title function_">randomArray</span>(range) + <span class="variable language_">this</span>.<span class="title function_">randomArray</span>(range) + <span class="variable language_">this</span>.<span class="title function_">randomArray</span>(range)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">randomRange</span>(<span class="params">start, end</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (end - start) * <span class="title class_">Math</span>.<span class="title function_">random</span>() + start</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">circleCount</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> circle = <span class="keyword">new</span> <span class="title class_">Circle</span>(&#123;</span><br><span class="line">        <span class="attr">context</span>: <span class="variable language_">this</span>.<span class="property">context</span>,</span><br><span class="line">        <span class="attr">origin</span>: <span class="variable language_">this</span>.<span class="property">origin</span>,</span><br><span class="line">        <span class="attr">color</span>: <span class="variable language_">this</span>.<span class="title function_">randomColor</span>(),</span><br><span class="line">        <span class="attr">angle</span>: <span class="variable language_">this</span>.<span class="title function_">randomRange</span>(<span class="title class_">Math</span>.<span class="property">PI</span> - <span class="number">1</span>, <span class="title class_">Math</span>.<span class="property">PI</span> + <span class="number">1</span>),</span><br><span class="line">        <span class="attr">speed</span>: <span class="variable language_">this</span>.<span class="title function_">randomRange</span>(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">circles</span>.<span class="title function_">push</span>(circle)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">move</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">circles</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">circle, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (circle.<span class="property">position</span>.<span class="property">x</span> &gt; <span class="variable language_">this</span>.<span class="property">area</span>.<span class="property">width</span> || circle.<span class="property">position</span>.<span class="property">y</span> &gt; <span class="variable language_">this</span>.<span class="property">area</span>.<span class="property">height</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">circles</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      circle.<span class="title function_">move</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">circles</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">stop</span> = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">circles</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">circle</span> =&gt;</span> circle.<span class="title function_">draw</span>())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CursorSpecialEffects</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">computerCanvas</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">renderCanvas</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">computerContext</span> = <span class="variable language_">this</span>.<span class="property">computerCanvas</span>.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">renderContext</span> = <span class="variable language_">this</span>.<span class="property">renderCanvas</span>.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">globalWidth</span> = <span class="variable language_">window</span>.<span class="property">innerWidth</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">globalHeight</span> = <span class="variable language_">window</span>.<span class="property">innerHeight</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">booms</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">running</span> = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleMouseDown</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> boom = <span class="keyword">new</span> <span class="title class_">Boom</span>(&#123;</span><br><span class="line">      <span class="attr">origin</span>: &#123; <span class="attr">x</span>: e.<span class="property">clientX</span>, <span class="attr">y</span>: e.<span class="property">clientY</span> &#125;,</span><br><span class="line">      <span class="attr">context</span>: <span class="variable language_">this</span>.<span class="property">computerContext</span>,</span><br><span class="line">      <span class="attr">area</span>: &#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="variable language_">this</span>.<span class="property">globalWidth</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="variable language_">this</span>.<span class="property">globalHeight</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    boom.<span class="title function_">init</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">booms</span>.<span class="title function_">push</span>(boom)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">running</span> || <span class="variable language_">this</span>.<span class="title function_">run</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handlePageHide</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">booms</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">running</span> = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> style = <span class="variable language_">this</span>.<span class="property">renderCanvas</span>.<span class="property">style</span></span><br><span class="line">    style.<span class="property">position</span> = <span class="string">&#x27;fixed&#x27;</span></span><br><span class="line">    style.<span class="property">top</span> = style.<span class="property">left</span> = <span class="number">0</span></span><br><span class="line">    style.<span class="property">zIndex</span> = <span class="string">&#x27;999999999999999999999999999999999999999999&#x27;</span></span><br><span class="line">    style.<span class="property">pointerEvents</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line"></span><br><span class="line">    style.<span class="property">width</span> = <span class="variable language_">this</span>.<span class="property">renderCanvas</span>.<span class="property">width</span> = <span class="variable language_">this</span>.<span class="property">computerCanvas</span>.<span class="property">width</span> = <span class="variable language_">this</span>.<span class="property">globalWidth</span></span><br><span class="line">    style.<span class="property">height</span> = <span class="variable language_">this</span>.<span class="property">renderCanvas</span>.<span class="property">height</span> = <span class="variable language_">this</span>.<span class="property">computerCanvas</span>.<span class="property">height</span> = <span class="variable language_">this</span>.<span class="property">globalHeight</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(<span class="variable language_">this</span>.<span class="property">renderCanvas</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleMouseDown</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pagehide&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handlePageHide</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">running</span> = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">booms</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">running</span> = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(<span class="variable language_">this</span>.<span class="property">run</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">computerContext</span>.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">globalWidth</span>, <span class="variable language_">this</span>.<span class="property">globalHeight</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">renderContext</span>.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">globalWidth</span>, <span class="variable language_">this</span>.<span class="property">globalHeight</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">booms</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">boom, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (boom.<span class="property">stop</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">booms</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      boom.<span class="title function_">move</span>()</span><br><span class="line">      boom.<span class="title function_">draw</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">renderContext</span>.<span class="title function_">drawImage</span>(<span class="variable language_">this</span>.<span class="property">computerCanvas</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">globalWidth</span>, <span class="variable language_">this</span>.<span class="property">globalHeight</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cursorSpecialEffects = <span class="keyword">new</span> <span class="title class_">CursorSpecialEffects</span>()</span><br><span class="line">cursorSpecialEffects.<span class="title function_">init</span>()</span><br></pre></td></tr></table></figure>
</details>
</li>
<li><p>爆炸特效（explosion.js）</p>
<details>
<summary>点击显/隐代码</summary>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;<span class="keyword">function</span> <span class="title function_">updateCoords</span>(<span class="params">e</span>)&#123;pointerX=(e.<span class="property">clientX</span>||e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientX</span>)-canvasEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">left</span>,pointerY=e.<span class="property">clientY</span>||e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientY</span>-canvasEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span>&#125;<span class="keyword">function</span> <span class="title function_">setParticuleDirection</span>(<span class="params">e</span>)&#123;<span class="keyword">var</span> t=anime.<span class="title function_">random</span>(<span class="number">0</span>,<span class="number">360</span>)*<span class="title class_">Math</span>.<span class="property">PI</span>/<span class="number">180</span>,a=anime.<span class="title function_">random</span>(<span class="number">50</span>,<span class="number">180</span>),n=[-<span class="number">1</span>,<span class="number">1</span>][anime.<span class="title function_">random</span>(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.<span class="property">x</span>+n*<span class="title class_">Math</span>.<span class="title function_">cos</span>(t),<span class="attr">y</span>:e.<span class="property">y</span>+n*<span class="title class_">Math</span>.<span class="title function_">sin</span>(t)&#125;&#125;<span class="keyword">function</span> <span class="title function_">createParticule</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.<span class="property">x</span>=e,a.<span class="property">y</span>=t,a.<span class="property">color</span>=colors[anime.<span class="title function_">random</span>(<span class="number">0</span>,colors.<span class="property">length</span>-<span class="number">1</span>)],a.<span class="property">radius</span>=anime.<span class="title function_">random</span>(<span class="number">16</span>,<span class="number">32</span>),a.<span class="property">endPos</span>=<span class="title function_">setParticuleDirection</span>(a),a.<span class="property">draw</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="title function_">beginPath</span>(),ctx.<span class="title function_">arc</span>(a.<span class="property">x</span>,a.<span class="property">y</span>,a.<span class="property">radius</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">0</span>),ctx.<span class="property">fillStyle</span>=a.<span class="property">color</span>,ctx.<span class="title function_">fill</span>()&#125;,a&#125;<span class="keyword">function</span> <span class="title function_">createCircle</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.<span class="property">x</span>=e,a.<span class="property">y</span>=t,a.<span class="property">color</span>=<span class="string">&quot;#F00&quot;</span>,a.<span class="property">radius</span>=<span class="number">.1</span>,a.<span class="property">alpha</span>=<span class="number">.5</span>,a.<span class="property">lineWidth</span>=<span class="number">6</span>,a.<span class="property">draw</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="property">globalAlpha</span>=a.<span class="property">alpha</span>,ctx.<span class="title function_">beginPath</span>(),ctx.<span class="title function_">arc</span>(a.<span class="property">x</span>,a.<span class="property">y</span>,a.<span class="property">radius</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">0</span>),ctx.<span class="property">lineWidth</span>=a.<span class="property">lineWidth</span>,ctx.<span class="property">strokeStyle</span>=a.<span class="property">color</span>,ctx.<span class="title function_">stroke</span>(),ctx.<span class="property">globalAlpha</span>=<span class="number">1</span>&#125;,a&#125;<span class="keyword">function</span> <span class="title function_">renderParticule</span>(<span class="params">e</span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.<span class="property">animatables</span>.<span class="property">length</span>;t++)e.<span class="property">animatables</span>[t].<span class="property">target</span>.<span class="title function_">draw</span>()&#125;<span class="keyword">function</span> <span class="title function_">animateParticules</span>(<span class="params">e,t</span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="title function_">createCircle</span>(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)n.<span class="title function_">push</span>(<span class="title function_">createParticule</span>(e,t));anime.<span class="title function_">timeline</span>().<span class="title function_">add</span>(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> e.<span class="property">endPos</span>.<span class="property">x</span>&#125;,<span class="attr">y</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> e.<span class="property">endPos</span>.<span class="property">y</span>&#125;,<span class="attr">radius</span>:<span class="number">.1</span>,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule&#125;).<span class="title function_">add</span>(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.<span class="title function_">random</span>(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">&quot;linear&quot;</span>,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> n=<span class="variable language_">this</span>,i=<span class="variable language_">arguments</span>;<span class="built_in">clearTimeout</span>(a),a=<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;e.<span class="title function_">apply</span>(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.fireworks&quot;</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">&quot;mousedown&quot;</span>,colors=[<span class="string">&quot;#FF1461&quot;</span>,<span class="string">&quot;#18FF92&quot;</span>,<span class="string">&quot;#5A87FF&quot;</span>,<span class="string">&quot;#FBF38C&quot;</span>],setCanvasSize=<span class="title function_">debounce</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;canvasEl.<span class="property">width</span>=<span class="number">2</span>*<span class="variable language_">window</span>.<span class="property">innerWidth</span>,canvasEl.<span class="property">height</span>=<span class="number">2</span>*<span class="variable language_">window</span>.<span class="property">innerHeight</span>,canvasEl.<span class="property">style</span>.<span class="property">width</span>=<span class="variable language_">window</span>.<span class="property">innerWidth</span>+<span class="string">&quot;px&quot;</span>,canvasEl.<span class="property">style</span>.<span class="property">height</span>=<span class="variable language_">window</span>.<span class="property">innerHeight</span>+<span class="string">&quot;px&quot;</span>,canvasEl.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>).<span class="title function_">scale</span>(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=<span class="title function_">anime</span>(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,canvasEl.<span class="property">width</span>,canvasEl.<span class="property">height</span>)&#125;&#125;);<span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(tap,<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="string">&quot;sidebar&quot;</span>!==e.<span class="property">target</span>.<span class="property">id</span>&amp;&amp;<span class="string">&quot;toggle-sidebar&quot;</span>!==e.<span class="property">target</span>.<span class="property">id</span>&amp;&amp;<span class="string">&quot;A&quot;</span>!==e.<span class="property">target</span>.<span class="property">nodeName</span>&amp;&amp;<span class="string">&quot;IMG&quot;</span>!==e.<span class="property">target</span>.<span class="property">nodeName</span>&amp;&amp;(render.<span class="title function_">play</span>(),<span class="title function_">updateCoords</span>(e),<span class="title function_">animateParticules</span>(pointerX,pointerY))&#125;,!<span class="number">1</span>),<span class="title function_">setCanvasSize</span>(),<span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,setCanvasSize,!<span class="number">1</span>)&#125;</span><br></pre></td></tr></table></figure>
</details>
</li>
<li><p>爱心（love.js）</p>
<details>
<summary>点击显/隐代码</summary>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!(<span class="keyword">function</span> (<span class="params">e, t, a</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">n</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">c</span>(</span><br><span class="line">      <span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span></span><br><span class="line">    ),</span><br><span class="line">      <span class="title function_">o</span>(),</span><br><span class="line">      <span class="title function_">r</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">r</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; d.<span class="property">length</span>; e++)</span><br><span class="line">      d[e].<span class="property">alpha</span> &lt;= <span class="number">0</span></span><br><span class="line">        ? (t.<span class="property">body</span>.<span class="title function_">removeChild</span>(d[e].<span class="property">el</span>), d.<span class="title function_">splice</span>(e, <span class="number">1</span>))</span><br><span class="line">        : (d[e].<span class="property">y</span>--,</span><br><span class="line">          (d[e].<span class="property">scale</span> += <span class="number">0.004</span>),</span><br><span class="line">          (d[e].<span class="property">alpha</span> -= <span class="number">0.013</span>),</span><br><span class="line">          (d[e].<span class="property">el</span>.<span class="property">style</span>.<span class="property">cssText</span> =</span><br><span class="line">            <span class="string">&#x27;left:&#x27;</span> +</span><br><span class="line">            d[e].<span class="property">x</span> +</span><br><span class="line">            <span class="string">&#x27;px;top:&#x27;</span> +</span><br><span class="line">            d[e].<span class="property">y</span> +</span><br><span class="line">            <span class="string">&#x27;px;opacity:&#x27;</span> +</span><br><span class="line">            d[e].<span class="property">alpha</span> +</span><br><span class="line">            <span class="string">&#x27;;transform:scale(&#x27;</span> +</span><br><span class="line">            d[e].<span class="property">scale</span> +</span><br><span class="line">            <span class="string">&#x27;,&#x27;</span> +</span><br><span class="line">            d[e].<span class="property">scale</span> +</span><br><span class="line">            <span class="string">&#x27;) rotate(45deg);background:&#x27;</span> +</span><br><span class="line">            d[e].<span class="property">color</span> +</span><br><span class="line">            <span class="string">&#x27;;z-index:99999&#x27;</span>))</span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(r)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">o</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="string">&#x27;function&#x27;</span> == <span class="keyword">typeof</span> e.<span class="property">onclick</span> &amp;&amp; e.<span class="property">onclick</span></span><br><span class="line">    e.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      t &amp;&amp; <span class="title function_">t</span>(), <span class="title function_">i</span>(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">i</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = t.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    ;(a.<span class="property">className</span> = <span class="string">&#x27;heart&#x27;</span>),</span><br><span class="line">      d.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>: a,</span><br><span class="line">        <span class="attr">x</span>: e.<span class="property">clientX</span> - <span class="number">5</span>,</span><br><span class="line">        <span class="attr">y</span>: e.<span class="property">clientY</span> - <span class="number">5</span>,</span><br><span class="line">        <span class="attr">scale</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">alpha</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">color</span>: <span class="title function_">s</span>(),</span><br><span class="line">      &#125;),</span><br><span class="line">      t.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = t.<span class="title function_">createElement</span>(<span class="string">&#x27;style&#x27;</span>)</span><br><span class="line">    a.<span class="property">type</span> = <span class="string">&#x27;text/css&#x27;</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      a.<span class="title function_">appendChild</span>(t.<span class="title function_">createTextNode</span>(e))</span><br><span class="line">    &#125; <span class="keyword">catch</span> (t) &#123;</span><br><span class="line">      a.<span class="property">styleSheet</span>.<span class="property">cssText</span> = e</span><br><span class="line">    &#125;</span><br><span class="line">    t.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">s</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="string">&#x27;rgb(&#x27;</span> +</span><br><span class="line">      ~~(<span class="number">255</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()) +</span><br><span class="line">      <span class="string">&#x27;,&#x27;</span> +</span><br><span class="line">      ~~(<span class="number">255</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()) +</span><br><span class="line">      <span class="string">&#x27;,&#x27;</span> +</span><br><span class="line">      ~~(<span class="number">255</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()) +</span><br><span class="line">      <span class="string">&#x27;)&#x27;</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> d = []</span><br><span class="line">  ;(e.<span class="property">requestAnimationFrame</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      e.<span class="property">requestAnimationFrame</span> ||</span><br><span class="line">      e.<span class="property">webkitRequestAnimationFrame</span> ||</span><br><span class="line">      e.<span class="property">mozRequestAnimationFrame</span> ||</span><br><span class="line">      e.<span class="property">oRequestAnimationFrame</span> ||</span><br><span class="line">      e.<span class="property">msRequestAnimationFrame</span> ||</span><br><span class="line">      <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(e, <span class="number">1e3</span> / <span class="number">60</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;)()),</span><br><span class="line">    <span class="title function_">n</span>()</span><br><span class="line">&#125;)(<span class="variable language_">window</span>, <span class="variable language_">document</span>)</span><br></pre></td></tr></table></figure>
</details>
</li>
<li><p>浮现文字（text.js）</p>
<details>
<summary>点击显/隐代码</summary>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a_idx = <span class="number">0</span>;</span><br><span class="line"><span class="title function_">jQuery</span>(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params">$</span>) &#123;</span><br><span class="line">  $(<span class="string">&quot;body&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;喜欢我&quot;</span>, <span class="string">&quot;不喜欢我&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> $i = $(<span class="string">&quot;&lt;span/&gt;&quot;</span>).<span class="title function_">text</span>(a[a_idx]);</span><br><span class="line">    <span class="keyword">var</span> x = e.<span class="property">pageX</span>,</span><br><span class="line">    y = e.<span class="property">pageY</span>;</span><br><span class="line">    $i.<span class="title function_">css</span>(&#123;</span><br><span class="line">      <span class="string">&quot;z-index&quot;</span>: <span class="number">99999</span>,</span><br><span class="line">      <span class="string">&quot;top&quot;</span>: y - <span class="number">28</span>,</span><br><span class="line">      <span class="string">&quot;left&quot;</span>: x - a[a_idx].<span class="property">length</span> * <span class="number">8</span>,</span><br><span class="line">      <span class="string">&quot;position&quot;</span>: <span class="string">&quot;absolute&quot;</span>,</span><br><span class="line">      <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ff7a45&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&quot;body&quot;</span>).<span class="title function_">append</span>($i);</span><br><span class="line">    $i.<span class="title function_">animate</span>(&#123;</span><br><span class="line">      <span class="string">&quot;top&quot;</span>: y - <span class="number">180</span>,</span><br><span class="line">      <span class="string">&quot;opacity&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;, <span class="number">1500</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      $i.<span class="title function_">remove</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    a_idx = (a_idx + <span class="number">1</span>) % a.<span class="property">length</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</details>

</li>
</ul>
<p>在 <code>hexo/source/_data/body-end.njk</code> 文件中添加如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;# 鼠标点击特效 #&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.<span class="property">cursor_effect</span> == <span class="string">&quot;fireworks&quot;</span> %&#125;</span><br><span class="line">  &lt;script <span class="keyword">async</span> src=<span class="string">&quot;/js/cursor/fireworks.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% elseif theme.<span class="property">cursor_effect</span> == <span class="string">&quot;explosion&quot;</span> %&#125;</span><br><span class="line">  &lt;canvas <span class="keyword">class</span>=<span class="string">&quot;fireworks&quot;</span> style=<span class="string">&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot;</span> &gt;&lt;/canvas&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;/js/cursor/explosion.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&#123;% elseif theme.<span class="property">cursor_effect</span> == <span class="string">&quot;love&quot;</span> %&#125;</span><br><span class="line">  &lt;script <span class="keyword">async</span> src=<span class="string">&quot;/js/cursor/love.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% elseif theme.<span class="property">cursor_effect</span> == <span class="string">&quot;text&quot;</span> %&#125;</span><br><span class="line">  &lt;script <span class="keyword">async</span> src=<span class="string">&quot;/js/cursor/text.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>然后在Next的配置文件 <code>_config.next.yml</code> 中取消 <code>bodyEnd: source/_data/body-end.njk</code> 的注释。<br>添加如下配置项：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 鼠标点击特效</span></span><br><span class="line"><span class="comment"># mouse click effect: fireworks | explosion | love </span></span><br><span class="line"><span class="attr">cursor_effect:</span> <span class="string">fireworks</span></span><br></pre></td></tr></table></figure>

<h2 id="3、近期文章"><a href="#3、近期文章" class="headerlink" title="3、近期文章"></a>3、近期文章</h2><p> 在 <code>hexo/source/_data/sidebar.njk</code> 文件中添加如下代码：</p>
<details>
  <summary>点击显/隐代码</summary>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.<span class="property">recent_posts</span> %&#125;</span><br><span class="line">    &lt;div <span class="keyword">class</span>=<span class="string">&quot;links-of-blogroll motion-element &#123;&#123; &quot;</span>links-<span class="keyword">of</span>-blogroll-<span class="string">&quot; + theme.recent_posts_layout  &#125;&#125;&quot;</span>&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;links-of-blogroll-title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- modify icon to fire by szw --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;&#123; theme.recent_posts_title &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;links-of-blogroll-list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;% set posts = site.posts.sort(&#x27;-date&#x27;).toArray() %&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;% for post in posts.slice(&#x27;0&#x27;, &#x27;5&#x27;) %&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&#123;&#123; post.title &#125;&#125;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;% endfor %&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
</details>

<p>然后在Next的配置文件 <code>_config.next.yml</code> 中取消 <code>sidebar:source/_data/sidebar.njk</code> 的注释。<br>添加如下配置项：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">recent_posts_title:</span> <span class="string">近期文章</span></span><br><span class="line"><span class="attr">recent_posts_layout:</span> <span class="string">block</span></span><br><span class="line"><span class="attr">recent_posts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="4、Live2D模型"><a href="#4、Live2D模型" class="headerlink" title="4、Live2D模型"></a>4、Live2D模型</h2><p>参考链接：<a href="https://www.cnblogs.com/Friends-A/p/11054968.html">Hexo添加Live2D看板娘+模型预览</a></p>
<h2 id="5、文字背景色块"><a href="#5、文字背景色块" class="headerlink" title="5、文字背景色块"></a>5、文字背景色块</h2><p>效果如下：<br><span id="inline-blue"> 站点配置文件 </span><br><span id="inline-purple"> 主题配置文件 </span><br><span id="inline-yellow"> 站点配置文件 </span><br><span id="inline-green"> 主题配置文件 </span><br> 在 <code>hexo/source/_data/styles.styl</code> 文件中添加如下代码：</p>
 <details>
  <summary>点击显/隐代码</summary>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> // 颜色块-黄</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-yellow</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line"><span class="attribute">font-weight</span>:bold;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#f0ad4e</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 颜色块-绿</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-green</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line"><span class="attribute">font-weight</span>:bold;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#5cb85c</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 颜色块-蓝</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-blue</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line"><span class="attribute">font-weight</span>:bold;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#2780e3</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 颜色块-紫</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-purple</span> &#123;</span><br><span class="line"><span class="attribute">display</span>:inline;</span><br><span class="line"><span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line"><span class="attribute">font-weight</span>:bold;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">white-space</span>:nowrap;</span><br><span class="line"><span class="attribute">vertical-align</span>:baseline;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#9954bb</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
然后在Next的配置文件 `_config.next.yml` 中取消 `style: source/_data/styles.styl` 的注释。
书写格式如下：
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;inline-blue&quot;</span>&gt;</span> 站点配置文件 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;inline-purple&quot;</span>&gt;</span> 主题配置文件 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;inline-yellow&quot;</span>&gt;</span> 站点配置文件 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;inline-green&quot;</span>&gt;</span> 主题配置文件 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>

<h2 id="6、点击头像跳转首页"><a href="#6、点击头像跳转首页" class="headerlink" title="6、点击头像跳转首页"></a>6、点击头像跳转首页</h2><p>打开 <code>themes\next\layout\_partials\sidebar</code> 目录下 <code>site-overview.njk</code> 文件<br>将第一个 div 替换为以下内容：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;site-author site-overview-item animated&quot; itemprop=&quot;author&quot; itemscope itemtype=&quot;http://schema.org/Person&quot;&gt;</span><br><span class="line">  &#123;%- if theme.avatar.url %&#125;</span><br><span class="line"><span class="addition">+    &lt;a href=&quot;/&quot;&gt;</span></span><br><span class="line"><span class="addition">+      &lt;img class=&quot;site-author-image&quot; itemprop=&quot;image&quot; alt=&quot;&#123;&#123; author &#125;&#125;&quot;</span></span><br><span class="line"><span class="addition">+        src=&quot;&#123;&#123; url_for(theme.avatar.url or theme.images + &#x27;/avatar.gif&#x27;) &#125;&#125;&quot;&gt;</span></span><br><span class="line"><span class="addition">+    &lt;/a&gt;</span></span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line">  &lt;p class=&quot;site-author-name&quot; itemprop=&quot;name&quot;&gt;&#123;&#123; author &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;div class=&quot;site-description&quot; itemprop=&quot;description&quot;&gt;&#123;&#123; description &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="7、修改背景"><a href="#7、修改背景" class="headerlink" title="7、修改背景"></a>7、修改背景</h2><p>打开 <code>hexo/source/_data/styles.styl</code> 文件<br>找到 <code>body</code> 块：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">/image/site/bg1.jpg</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">  // <span class="attribute">background-position</span>: center;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    <span class="attribute">background-size</span>: auto auto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="8、设置置顶"><a href="#8、设置置顶" class="headerlink" title="8、设置置顶"></a>8、设置置顶</h2><p>先卸载 <code>hexo-generator-index</code> 插件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index</span><br></pre></td></tr></table></figure>

<p>再安装<code>hexo-generator-index-pin-top</code>插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-index-pin-top</span><br></pre></td></tr></table></figure>

<p>在<code>hexo/source/_data/post-meta.njk</code>添加如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">    &lt;span class=&quot;post-meta-item&quot;&gt;</span><br><span class="line">      &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">      &lt;i class=&quot;far fa-thumb-tack&quot;&gt;&lt;/i&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">      &lt;font color=red&gt;置顶&lt;/font&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>此时，文章标题下会显示<code>置顶</code>标识，但不在最前方，这是因为 Next 此部分注入代码位置不在最前方。</p>
<p>打开<code>Hexo\themes\next\layout\_partials\post\post-meta.njk</code>文件，找到以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;- next_inject(&#x27;postMeta&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>将其移动至文件前部位置即可。</p>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/apple-touch-icon-next.png"></object>
<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>
<a href="https://theme-next.js.org/"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="/images/apple-touch-icon-next.png"></object>
<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>
<a href="https://theme-next.js.org/"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="/images/apple-touch-icon-next.png"></object>
<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>
<a href="https://theme-next.js.org/"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="/images/apple-touch-icon-next.png"></object>
<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>
<a href="https://theme-next.js.org/"></a>
</div><div class="link-grid-container">
<object class="link-grid-image" data="/images/apple-touch-icon-next.png"></object>
<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>
<a href="https://theme-next.js.org/"></a>
</div></div>

<h1 id="二、使用技巧"><a href="#二、使用技巧" class="headerlink" title="二、使用技巧"></a>二、使用技巧</h1><h2 id="1、Note-标注功能"><a href="#1、Note-标注功能" class="headerlink" title="1、Note 标注功能"></a>1、Note 标注功能</h2><p>效果如下：</p>
<div class="note success"><p><strong>Welcome</strong> to <a href="https://hexo.io/">Hexo!</a></p>
</div>
<p>参考：<a href="https://theme-next.js.org/docs/tag-plugins/note.html">Note (Bootstrap Callout)</a></p>
<h2 id="2、居中引用"><a href="#2、居中引用" class="headerlink" title="2、居中引用"></a>2、居中引用</h2><p>格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125; </span><br><span class="line">引用内容</span><br><span class="line">&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<blockquote class="blockquote-center">
<p>故乡啊，挨着碰着，都是带刺的花。<br>——小林一茶</p>

</blockquote>

<hr>
<p>参考：<br><a href="https://theme-next.js.org//">Next官方文档</a><br><a href="https://github.com/next-theme/hexo-theme-next">Next主题仓库</a></p>
<p>1、<a href="https://www.dazhuanlan.com/2019/10/28/5db601ba91d49/">Next 主题美化</a><br>2、<a href="https://tding.top/archives/aad98408.html">Hexo 搭建个人博客文章汇总（next 8.0）</a><br>3、<a href="https://blog.juanertu.com/archives/5b20fbd0.html">Hexo框架(十三)：关于博客主题持续更新的问题和我的新配置方式（next 8.0）</a><br>4、<a href="https://blog.csdn.net/jankingmeaning/article/details/88783308">Hexo+NexT搭建博客笔记</a>（较全)<br>5、<a href="https://www.jianshu.com/p/f054333ac9e6">hexo的next主题个性化教程:打造炫酷网站</a><br>6、<a href="https://www.jianshu.com/p/b5f509f25872">为 Hexo 的 Next 主题添加 Gitalk 评论</a><br>7、<a href="https://www.cnblogs.com/Friends-A/p/11054968.html">Hexo添加Live2D看板娘+模型预览</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客编写与部署</title>
    <url>/archives/2018/05/Hexo%E5%8D%9A%E5%AE%A2/Hexo%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99%E4%B8%8E%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>通过前面<a href="https://ljone.top/archives/2018/05/Hexo%E5%8D%9A%E5%AE%A2/%E5%88%A9%E7%94%A8Hexo%E5%85%8D%E8%B4%B9%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">《利用Hexo免费创建个人博客》</a>的步骤，已经完成了基础环境的搭建以及 Hexo 的安装，那么接下来就跟大家说一说怎样利用 Hexo 编写博客然后将其部署到云端。</p>
<h1 id="一、博客编写"><a href="#一、博客编写" class="headerlink" title="一、博客编写"></a>一、博客编写</h1><p>在命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;file_name&quot;</span></span><br></pre></td></tr></table></figure>
<p>打开 Hexo 目录下的 source 文件夹，所有的文章都会以md形式保存在 _post 文件夹中，刚刚新建的文件也在其中。<br>也可以直接在 _post 文件夹中新建md类型的文档，便可以生成新的文章。<br>新建的文章头需要添加一些yml信息，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: hello-world         <span class="comment">#在此处添加文章标题</span></span><br><span class="line"><span class="built_in">date</span>: 2018-05-21 17:55:53  <span class="comment">#在此处添加编辑文章时间</span></span><br><span class="line">categories: Exercise       <span class="comment">#在此处添加文章分类</span></span><br><span class="line">tags:                      <span class="comment">#在此处添加文章标签</span></span><br></pre></td></tr></table></figure>
<p>在.md文件的开头添加上面代码，是为了让 Hexo 框架在生成网页的时候，设置相应的参数。</p>
<p>如果你使用过<code>MarkDown </code>来写博客文章的话，接下来就简单多了，没使用过也没关系，推荐大家一个编辑工具<a href="http://maxiang.io/">马克飞象</a>，具体语法推荐参考： <a href="https://www.appinn.com/markdown/">https://www.appinn.com/markdown/</a> </p>
<p>在编辑器里面写好文章后，复制或另存为.md文件,将其存放在 _post 文件夹中。在 Hexo 文件夹中点击鼠标右键选择 Git Bash 再次输入以下内容便可重新在本地启动项目，在浏览器访问就可以看到之前添加的文章。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo sever  <span class="comment">#可简写为 hexo s</span></span><br></pre></td></tr></table></figure>
<p>也可以输入下面的指令进行调试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure>
<h1 id="二、部署到云端"><a href="#二、部署到云端" class="headerlink" title="二、部署到云端"></a>二、部署到云端</h1><h2 id="1、账号准备"><a href="#1、账号准备" class="headerlink" title="1、账号准备"></a>1、账号准备</h2><p>发布到云端之前需要有一个 <a href="https://github.com/">GitHub</a> 账号或者 <a href="https://gitee.com/">Gitee</a>（码云）账号，没有的话到官网申请一个便是，二者并没有太大的区别。<br>主要区别在于 GitHub 服务器在国外因为众所周知的原因在国内访问速度相对较慢，而且不支持免费创建私人仓库，而码云原依托于开源中国访问速度快而且可以免费创建私人仓库，最重要的一点是它还支持中文（坏笑）。二者在使用上基本一致，到底使用哪一个，请自行斟酌。<br>##2、创建仓库<br>编者在这以码云为例，注册好账号以后点击创建项目，新建一个项目如下图所示<br><img src="/image/2018-5-21/01.jpg"><br>填写与你账号名称相同的项目名，然后点击<code>创建</code>，然后会看到以下界面<br><img src="/image/2018-5-21/02.jpg"><br>接着点击上图中出现的 <code>克隆/下载</code>,选中 HTTPS 点击右侧的 <code>复制</code>按钮，将地址复制下来，后续会使用到。</p>
<h2 id="3、本地配置及部署"><a href="#3、本地配置及部署" class="headerlink" title="3、本地配置及部署"></a>3、本地配置及部署</h2><p>配置项目根目录_config.yml 文件，修改<code>Deloyment</code>的值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git   </span><br><span class="line">  repo:  <span class="comment">#此处改为之前复制的地址</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>注意： repo  后的地址是之前在码云上面创建项目后获取的地址</p>
<p>尤其要注意的是<code>在每一个冒号的后面都必须要有一个空格</code>，此警告适用于此文件的每一处，一定要谨记！！！否则会出现一些莫名其妙的报错。<br>修改后如下图所示：<br><img src="/image/2018-5-21/03.jpg"><br>具体配置可参考 Hexo 官方文档<a href="https://hexo.io/docs/">英文</a>/<a href="https://hexo.io/zh-cn/docs/">中文</a>。</p>
<p>修改完成后，使用git将项目中public 文件夹下的文件管理起来，并推送到码云上。<br>这里借用一个插件来帮助我们完成，在 Hexo 文件夹下安装 hexo-deployer-git。安装代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>安装完成后，继续在命令行窗口执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate    <span class="comment">#生成静态 HTML 文件</span></span><br><span class="line">hexo deploy      <span class="comment">#部署到云端</span></span><br></pre></td></tr></table></figure>
<p>命令也可以合成一步进行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>
<p>第一次执行上述命令会有如下提示：<br><img src="/image/2018-5-21/07.jpg"><br>在命令行执行以下命令，按要求填写自己的邮箱和姓名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;you@example.com&quot;</span>  <span class="comment">#你的邮箱</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span>         <span class="comment">#你的姓名</span></span><br></pre></td></tr></table></figure>
<p>然后在弹出的对话框中填写自己的Gitee或GitHub账号和密码即可<br><img src="/image/2018-5-21/08.jpg"><br>在首次执行 <code>deploy</code>时会弹出一个对话框，输入你码云对应的账号和密码即可。<br>部署好后，登录码云会看到之前创建的项目中出现了本地 Public 文件夹中的内容，这时表明部署成功。</p>
<h5 id="4、启动-Pages-功能"><a href="#4、启动-Pages-功能" class="headerlink" title="4、启动 Pages 功能"></a>4、启动 Pages 功能</h5><p>接下来点击<code>服务</code><br><img src="/image/2018-5-21/04.jpg"><br>然后再点击<code>Gitee Pages</code><br><img src="/image/2018-5-21/05.jpg"><br>接着点击<code>启动服务</code>，便会看到以下画面：<br><img src="/image/2018-5-21/06.jpg"><br>到此就可以通过图中红圈部分的地址访问博客的主页了，效果和在本地启动时一样。以后只要将写好的文章放入Hexo项目的source 目录下的_posts 文件夹中，再按照之前步骤就可以更新博客了，行动起来吧！</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Hexo免费创建个人博客</title>
    <url>/archives/2018/05/Hexo%E5%8D%9A%E5%AE%A2/%E5%88%A9%E7%94%A8Hexo%E5%85%8D%E8%B4%B9%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>相信很多朋友正在为了不知道怎么创建私人博客而苦恼、不知所措，那么读完这篇文章你会发现新天地。本篇文章将带领你基于码云利用HEXO创建个人博客，让我们一起来学习吧！<br><img src="/image/2018-5-19/05.gif"></p>
<h1 id="什么是-Hexo-？"><a href="#什么是-Hexo-？" class="headerlink" title="什么是 Hexo ？"></a>什么是 Hexo ？</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<p>安装之前需要准备以下文件：<br><a href="http://nodejs.cn/download/">Node.js环境</a><br><a href="https://git-scm.com/downloads">Git</a><br>准备好后，接下来就可以进行安装</p>
<h1 id="一、配置环境"><a href="#一、配置环境" class="headerlink" title="一、配置环境"></a>一、配置环境</h1><h2 id="1、安装Node-js环境"><a href="#1、安装Node-js环境" class="headerlink" title="1、安装Node.js环境"></a>1、安装Node.js环境</h2><p>因为博主使用的 Windows 系统，在这就以 Windows 系统举例。</p>
<p>Windows 用户可以到官网根据自己的系统版本下载  <a href="http://nodejs.cn/download/">.msi包</a>  进行程序自动安装。下载好后打开界面如下 ：<br><img src="/image/2018-5-19/01.jpg"><br>保持默认设置即可，一路点击Next，安装很快就结束了。 然后我们检查一下是不是要求的组件都安装好了，同时按下Win和R，打开运行窗口：<br><img src="/image/2018-5-19/02.jpg"><br>在新打开的窗口中输入 cmd，敲击回车，打开命令行界面，并输入以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>结果如下图所示，则说明安装正确，可以进行下一步了；如不正确，则需要回头检查自己的安装过程是否有错误。<br><img src="/image/2018-5-19/03.jpg"></p>
<h2 id="2、安装Git"><a href="#2、安装Git" class="headerlink" title="2、安装Git"></a>2、安装Git</h2><p>下载 Git 根据自己的系统版本选择下载 <a href="https://git-scm.com/download/win">Git for Windows Setup </a>  下载好后进入安装界面，如下图<br><img src="/image/2018-5-19/04.jpg"><br>和Node.js一样，大部分设置都只需要保持默认，但是出于我们操作方便考虑，建议 PATH 选项按照下图选择。按照图中进行选择，将会使得Git安装程序在系统 PATH 中加入 Git 的相关路径，使得你可以在 CMD 界面下调用Git，不用打开 Git Bash。否则只有在Git Bash中才能进行Git的相关操作。<br><img src="/image/2018-5-19/05.jpg"><br>安装完成后，在命令行中输入一下内容，检验安装是否完成。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>
<p>结果如下：<br><img src="/image/2018-5-19/06.jpg"><br>注：有的同学可能遇到（1）CMD中提示“‘git’不是内部或外部命令，也不是可运行的程序”或（2）Git Bash 中提示”bash: npm: command not found“的情况，这时就需要自己配置系统环境变量了，步骤如下<br>1.找到你电脑上的git安装中bin的路径，如：E:\安装\Git\Git\bin；同时，找到git安装路径中git-core的位置，如：E:\安装\Git\Git\mingw64\libexec\git-core；<br>2.配置系统变量。右键“计算机”-&gt;“属性”-&gt;“高级系统设置”-&gt;“环境变量”-&gt;在下方的“系统变量”中找到“path”-&gt;选中“path”并选择“编辑”-&gt;然后新建分别将1中找到的bin和git-core路径复制到其中-&gt;保存并退出。<br>3.设置完成之后，重新执行git命令，如果还是报错，重启一下电脑就OK啦</p>
<h1 id="二、配置-Hexo"><a href="#二、配置-Hexo" class="headerlink" title="二、配置 Hexo"></a>二、配置 Hexo</h1><h2 id="1、安装-Hexo"><a href="#1、安装-Hexo" class="headerlink" title="1、安装 Hexo"></a>1、安装 Hexo</h2><p>在自己认为合适的地方创建一个文件夹，然后在文件夹空白处按住 Shift + 鼠标右键，然后点击在此处打开命令行窗口（如果在安装 Git 时 PATH 选择没有按照图示操作，那么需要在文件夹空白处点击右键，选择 Git Bash 代替命令行进行如下操作），并输入以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli g</span><br><span class="line">npm i -g hexo //上一条命令失败的情况下，执行这条命令代替</span><br></pre></td></tr></table></figure>
<p>然后你会看到如下画面<br><img src="/image/2018-5-19/07.jpg"><br>稍等片刻，等待安装完成。如果出现 WARN ，不用担心，一般不会影响使用。然后再依次输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo --save</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure>
<p>如果看到如图所示内容说明安装成功。<br><img src="/image/2018-5-19/08.jpg"></p>
<div class="note warning"><h4 id="Hexo-运行错误"><a href="#Hexo-运行错误" class="headerlink" title="Hexo 运行错误"></a>Hexo 运行错误</h4><p>如下图，运行Hexo报错hexo : 无法加载文件hexo.ps1，因为在此系统上禁止运行脚本<br>解决方法：针对windows系统，设置-&gt;隐私和安全性-&gt;开发者选项-&gt;允许本地PowerShell脚本在为签名的情况下运行。</p>
</div>

<p><img src="/image/2018-5-19/image-20230820150114136.png" alt="image-20230820150114136"></p>
<h2 id="2、初始化Hexo"><a href="#2、初始化Hexo" class="headerlink" title="2、初始化Hexo"></a>2、初始化Hexo</h2><p>Hexo 安装完成后，请依次输入下列命令，Hexo 将会在指定文件夹中新建所需要的文件夹。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br></pre></td></tr></table></figure>
<p>然后再输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>npm将会自动安装你需要的组件，只需要等待npm操作完成即可。当前文件夹内生成的目录如下<br><img src="/image/2018-5-19/09.jpg"></p>
<h2 id="3、体验-Hexo-魅力（本地运行）"><a href="#3、体验-Hexo-魅力（本地运行）" class="headerlink" title="3、体验 Hexo 魅力（本地运行）"></a>3、体验 Hexo 魅力（本地运行）</h2><p>上面的步骤执行完后，在 folder 目录下打开命令行执行以下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server         <span class="comment">#运行本地服务,简写为，hexo s</span></span><br></pre></td></tr></table></figure>
<p>命令行会提示以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<p>最后在浏览器中打开 <a href="http://localhost:4000/">http://localhost:4000/</a> 你将会看到期待已久的画面：<br><img src="/image/2018-5-19/10.jpg"><br>到此为止 Hexo 的安装就算完美结束了，尽情的享用吧！</p>
<p>接下来就是如何部署到云端以及文章的编写，如果您还想继续学习请看 [《Hexo博客编写与部署》][1]</p>
<p>参考：<br><a href="https://hexo.io/">Hexo官方网站</a><br>[1]: <a href="https://ljone.top/archives/2018/05/Hexo%E5%8D%9A%E5%AE%A2/Hexo%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99%E4%B8%8E%E9%83%A8%E7%BD%B2/">https://ljone.top/archives/2018/05/Hexo博客/Hexo博客编写与部署/</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌入式实训 Day3 Linux内核编译与服务器配置</title>
    <url>/archives/2018/07/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%9E%E8%AE%AD/Day3/</url>
    <content><![CDATA[<h5 id="【1】uboot烧写原理"><a href="#【1】uboot烧写原理" class="headerlink" title="【1】uboot烧写原理"></a>【1】uboot烧写原理</h5><p> SD卡制作启动盘：<br>     cd  sdfuse_q<br>     ./mkuboot.sh /dev/sdb    SD卡的设备文件名    /dev 保存设备节点（文件名）<br>     ./sd_fusing_exynos4x12.sh /dev/sdb u-boot-fs4412.bin</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$2</span> fusing...&quot;</span></span><br><span class="line"><span class="built_in">dd</span> iflag=dsync oflag=dsync <span class="keyword">if</span>=<span class="variable">$2</span> of=<span class="variable">$1</span> seek=1 &amp;&amp; \</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$2</span> image has been fused successfully.&quot;</span>   </span><br></pre></td></tr></table></figure>
<p>if(inputfile)–输入文件—u-boot-fs4412.bin（2010）<br>of(outputfile)–输出文件— /dev/sdb<br>dd 将输入文件的内容复制给输出文件（复制的同时进行了格式转换）<br>本质：将uboot镜像固化到SD卡，SD卡成为启动盘</p>
<pre><code>Linux文件类型：
b  （block 块设备文件）  具体表示是一种设备
c  （char 字符设备文件） 具体表示是一种设备
d  （目录）
-  （普通文件） .txt .dat
l  （链接文件）
s  （套接字文件）
p  （管道文件）
</code></pre>
<h5 id="【2】重启网卡"><a href="#【2】重启网卡" class="headerlink" title="【2】重启网卡"></a>【2】重启网卡</h5><pre><code>sudo /etc/init.d/networking restart
</code></pre>
<h5 id="【3】Linux内核配置编译"><a href="#【3】Linux内核配置编译" class="headerlink" title="【3】Linux内核配置编译"></a>【3】Linux内核配置编译</h5><p> 1）Makefile<br>    198 ARCH        ?= arm     默认X86<br>    199 CROSS_COMPILE   ?= arm-none-linux-gnueabi-    申明交叉编译工具链的前缀</p>
<p> 2）导入默认配置<br>    确保Linux内核镜像可以运行在当前产品中，支持当前的SOC<br>    make  exynos_defconfig<br>          描述的是与SOC有关的代码对应的选项<br>          cp arch/arm/configs/exynos_defconfig .config</p>
<p>  .config 配置文件通知Makefile在编译内核镜像的时候，用来确定编译哪些文件</p>
<p>  由顶层目录下的Makefile，调用子目录的中的Makefile协同完成源码的编译</p>
<p>  .config保存的都是选项，每一个选项都会对应源码中的一个文件或者多个文件</p>
<p> 3）make menuconfig  图形界面的选配<br>    对上一步的完善，用户可以自定义选择选项，选项被选择，该选项所对应的文件被编译到内核镜像中‘<br>    选项未选中，该选项所对应的文件肯定不会被编译到内核镜像中</p>
<p> 4）make uImage  编译内核镜像</p>
<p> 5）make dtbs  编译设备树文件</p>
<h5 id="【4】tftp服务器"><a href="#【4】tftp服务器" class="headerlink" title="【4】tftp服务器"></a>【4】tftp服务器</h5><p> tftp远程传输协议<br> 服务器端配置： sudo vi /etc/default/tftpd-hpa</p>
<p>  3 TFTP_USERNAME=”tftp”<br>  4 TFTP_DIRECTORY=”/tftpboot”   传输目录<br>                                 sudo mkdir /tftpboot<br>                                 sudo chmod  777 /tftpboot<br>  5 TFTP_ADDRESS=”0.0.0.0:69”<br>  6 TFTP_OPTIONS=”-c -s -l”    </p>
<p>  启动服务器：<br>  sudo service tftpd-hpa restart</p>
<h5 id="【5】配置nfs服务器"><a href="#【5】配置nfs服务器" class="headerlink" title="【5】配置nfs服务器"></a>【5】配置nfs服务器</h5><p> 配置server端：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> sudo vi /etc/exports</span><br><span class="line">	 </span><br><span class="line">/source/rootfs/ *(rw,sync,no_subtree_check,no_root_squash)</span><br><span class="line"></span><br><span class="line">/source  共享目录</span><br><span class="line">sudo mkdir /source</span><br><span class="line">sudo chmod 777 /source</span><br></pre></td></tr></table></figure>

<p>rootfs   开发板需要访问的文件系统</p>
<p>启动nfs服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/nfs-kernel-server restart</span><br></pre></td></tr></table></figure>
<h5 id="【6】bootloader"><a href="#【6】bootloader" class="headerlink" title="【6】bootloader"></a>【6】bootloader</h5><p> bootloader的操作的方式：自启动、交互</p>
<p> setenv  设置新的环境变量<br> saveenv  保存设置的环境变量<br> printenv 显示保存的环境变量</p>
<p> serverip  主机IP<br> ipaddr    目标机<br> bootcmd   bootcmd  自启动命令（当uboot自启动时，默认操作该命令后的所有指令）<br> tftp addr uImage/exynos4412-fs4412.dtb   传输指令<br> bootm  addr  启动地址上的镜像</p>
<p> bootargs  uboot不执行该命令，uboot将该命令在启动内核之后，传递给内核，<br>           内核会读取检验该命令，进而完成对文件系统的访问</p>
<h5 id="【7】网卡驱动"><a href="#【7】网卡驱动" class="headerlink" title="【7】网卡驱动"></a>【7】网卡驱动</h5><p> 1）设备树（网卡的信息）<br>    设备树功能：描述硬件信息，内核在启动时，会解析设备树文件，将设备树中保存的硬件信息读取，保存<br>    内核中的驱动可以通过读取的硬件信息，进而完成对硬件设备的控制<br>    Linux3.0提供设备树的机制（结合数据结构中的树为思想）<br>    设备树本质是文本文件，Linux内核中把该文件抽象为树型结构</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/&#123;</span><br><span class="line">	testnode1&#123;</span><br><span class="line">	   a = x;</span><br><span class="line">	&#125;;</span><br><span class="line">	testnode2&#123;</span><br><span class="line">		testnode3&#123;</span><br><span class="line">		   b = y;</span><br><span class="line">		&#125;;</span><br><span class="line">	</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p> 2）make menuconfig图形界面<br>    选配选项 [*]  </p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] Networking support  ---&gt;</span><br><span class="line">Networking options  ---&gt;	 网络配置 网络协议</span><br><span class="line">	&lt;*&gt; Packet socket</span><br><span class="line">	&lt;*&gt; Unix domain sockets </span><br><span class="line">	[*] TCP/IP networking</span><br><span class="line">	[*]   IP: kernel level autoconfiguration</span><br><span class="line"></span><br><span class="line">   device Drivers  ---&gt;       设备驱动</span><br><span class="line">[*] Network device support  ---&gt;</span><br><span class="line">	[*]   Ethernet driver support   ---&gt;</span><br><span class="line">		&lt;*&gt;   DM9000 support</span><br><span class="line"></span><br><span class="line">File systems  ---&gt;          文件系统支持（支持nfs服务器的客户端）</span><br><span class="line">[*] Network File Systems   ---&gt;</span><br><span class="line">	&lt;*&gt;   NFS client support</span><br><span class="line">	[*]   NFS client support for NFS version 3 (NEW)</span><br><span class="line">	[*]   NFS client support for the NFSv3 ACL protocol extension (NEW)</span><br><span class="line">	[*]   Root file system on NFS (NEW)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌入式实训 Day2 u-boot的烧写及使用</title>
    <url>/archives/2018/07/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%9E%E8%AE%AD/Day2/</url>
    <content><![CDATA[<h5 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h5><p>1、    ubuntu 12.04发行版<br>2、    u-boot-2010.03<br>3、    FS4412平台</p>
<h5 id="【1】Linux系统移植"><a href="#【1】Linux系统移植" class="headerlink" title="【1】Linux系统移植"></a>【1】Linux系统移植</h5><p>引导启动界面 –&gt; Linux镜像 –&gt; 加载Linux文件系统</p>
<p>引导程序：bootloder<br>uboot    Linux 3.14</p>
<h5 id="【2】SD启动盘制作"><a href="#【2】SD启动盘制作" class="headerlink" title="【2】SD启动盘制作"></a>【2】SD启动盘制作</h5><p>　　a)    将 sdfuse_q拷贝到Linux家目录下<br>　　b)    将SD卡插入电脑并在ubuntu中识别<br>　　c)    进入sdfuse_q目录并执行如下操作将SD卡制作成uboot 2010启动盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo  ./mkuboot.sh  /dev/sdb</span><br></pre></td></tr></table></figure>
<p>　　d)    在SD卡中创建目录sdupdate并把学生资料中的实验代码/第一天/镜像中的u-boot-fs4412.bin(uboot 2013)拷贝到这个目录下</p>
<h5 id="【3】u-boot的烧写"><a href="#【3】u-boot的烧写" class="headerlink" title="【3】u-boot的烧写"></a>【3】u-boot的烧写</h5><p>a)    使用串口线连接板子与电脑，运行串口通信程序putty(实验代码/第一天/工具)<br><img src="/image/2018-7-3/01.png"><br>选择右上角的”Serial”，然后点击左下角的”Serial”<br><img src="/image/2018-7-3/02.png"><br>按照自己的主机的情况（设备管理器中）选择COM口，其他信息必须一直，然后点击open打开串口<br><img src="/image/2018-7-3/03.png"><br>b)    关闭开发板电源，将拨码开关SW1调至(1000)(SD启动模式)<br>c)    将刚才做好的SD启动盘插入开发板SD卡插槽<br>d)    重新打开开发板电源能够看到如下界面<br><img src="/image/2018-7-3/04.png"><br>在倒计时时按任意键让uboot停留在交互模式<br>e)    烧写<br>在终端上执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sdfuse flashall</span></span><br></pre></td></tr></table></figure>
<p>等待终端无输出是表示烧写结束<br>f)    关闭开发板电源，将拨码开关SW1调至0110(EMMC启动模式)后打开电源可以看到如下界面表示烧写成功<br><img src="/image/2018-7-3/05.png"><br>在倒计时时按任意键让uboot停留在交互模式</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>　　整个嵌入式开发大体分为三层，自上而下依次为应用层、驱动层和硬件层，而我们主要做的是应用层。Linux系统的启动需要引导程序的引导，所以在移植系统之前需要对开发板烧写uboot引导程序。对开发板烧写系统与安装Windows系统类似，首先需要制作SD启动盘，在制作好SD启动盘后，将uboot烧写到flash中。这样，开发板在每次上电以后就会自行将uboot从flash中复制到DRAM中，并通过一系列命令引导Linux镜像启动。接下来就是通过tftp传输内核镜像，nfs远程访问文件系统，此为后话。<br><img src="/image/2018-7-3/06.png"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌入式实训 Day1 Linux基础篇</title>
    <url>/archives/2018/07/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%9E%E8%AE%AD/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%9E%E8%AE%AD%20Day1%20Linux%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    <content><![CDATA[<h5 id="【1】linux命令"><a href="#【1】linux命令" class="headerlink" title="【1】linux命令"></a>【1】linux命令</h5><p>   linux@ubuntu:~$  家目录   /home/linux<br>   linux@ubuntu:/$  根目录   </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl+alt+t		<span class="comment">#打开终端</span></span><br><span class="line"><span class="built_in">cd</span>			<span class="comment">#切换到家目录</span></span><br><span class="line"><span class="built_in">cd</span> /			<span class="comment">#切换到根目录（系统文件）</span></span><br><span class="line"><span class="built_in">cd</span> ..			<span class="comment">#切换到上一级</span></span><br><span class="line"><span class="built_in">cd</span> -			<span class="comment">#返回上一级</span></span><br><span class="line"><span class="built_in">ls</span>  			<span class="comment">#查看当前目录下的所有文件目录  （-list）</span></span><br></pre></td></tr></table></figure>

<p>   目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> + 目录名  					<span class="comment">#创建目录	</span></span><br><span class="line"><span class="built_in">rmdir</span> + 目录名 （只能删除空目录）			<span class="comment">#删除目录	</span></span><br><span class="line"><span class="built_in">touch</span> + 文件名 （普通文本，C源码）			<span class="comment">#创建新文件  </span></span><br><span class="line"><span class="built_in">rm</span> + 文件名 					<span class="comment">#删除文件	</span></span><br><span class="line"><span class="built_in">cp</span> + 被复制 + 新文件名/目录名（拷贝到此目录）	<span class="comment">#复制文件	</span></span><br><span class="line"><span class="built_in">mv</span> + 被剪切 + 新文件名/目录名（剪切到此目录）	<span class="comment">#剪切		</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="【2】vim编辑器"><a href="#【2】vim编辑器" class="headerlink" title="【2】vim编辑器"></a>【2】vim编辑器</h5><p>vim编辑器模式：<br>    1.输入模式<br>    2.底行模式<br>在底行模式下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shift + : wq		#保存退出</span><br><span class="line">	  q!		#不保存退出</span><br><span class="line">	  w		#只保存</span><br><span class="line">	  行号 		#光标跳转到某一行</span><br><span class="line">	  / + 关键字 #查找关键字  N</span><br><span class="line">yy 	#复制一行</span><br><span class="line">dd	#剪切一行</span><br><span class="line">p  	#粘贴</span><br></pre></td></tr></table></figure>

<p>底行模式 ——&gt; 输入模式  i<br>输入模式 ——&gt; 底行模式  Esc</p>
<h5 id="【3】gcc编译器"><a href="#【3】gcc编译器" class="headerlink" title="【3】gcc编译器"></a>【3】gcc编译器</h5><pre><code>gcc + xxx.c   #生成a.out(elf格式)
执行 ./a.out 
自定义生成的文件名：  gcc  xxx.c  -o（生成新文件） xxx
gcc -o2 -Wall xxx.c -o xxx   #打开全部警告
</code></pre>
<p>gcc编译流程： 预处理、编译、汇编、链接<br>预处理：xxx.c —&gt; xxx.i(预处理文件)<br>编译：    xxx.i —&gt; xxx.s(汇编文件)<br>汇编：    xxx.s —&gt; xxx.o(可重定向文件、执行文件的依赖文件)<br>链接：    xxx.o —&gt; xxx(可执行文件,elf格式)</p>
<p>单步编译处理：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">预处理:  gcc -E xxx.c -o xxx.i</span><br><span class="line">编译：	gcc -S xxx.c -o xxx.s</span><br><span class="line">汇编：	gcc -c xxx.s -o xxx.o</span><br><span class="line">链接：	gcc xxx.o -o xxx</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
</search>
